// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_wrapper_tracked.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fwrapper_5ftracked_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fwrapper_5ftracked_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_vision_detection_tracked.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fwrapper_5ftracked_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fvision_5fwrapper_5ftracked_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fvision_5fwrapper_5ftracked_2eproto;
class TrackerWrapperPacket;
struct TrackerWrapperPacketDefaultTypeInternal;
extern TrackerWrapperPacketDefaultTypeInternal _TrackerWrapperPacket_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TrackerWrapperPacket* Arena::CreateMaybeMessage<::TrackerWrapperPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TrackerWrapperPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackerWrapperPacket) */ {
 public:
  inline TrackerWrapperPacket() : TrackerWrapperPacket(nullptr) {}
  ~TrackerWrapperPacket() override;
  explicit PROTOBUF_CONSTEXPR TrackerWrapperPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackerWrapperPacket(const TrackerWrapperPacket& from);
  TrackerWrapperPacket(TrackerWrapperPacket&& from) noexcept
    : TrackerWrapperPacket() {
    *this = ::std::move(from);
  }

  inline TrackerWrapperPacket& operator=(const TrackerWrapperPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackerWrapperPacket& operator=(TrackerWrapperPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackerWrapperPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackerWrapperPacket* internal_default_instance() {
    return reinterpret_cast<const TrackerWrapperPacket*>(
               &_TrackerWrapperPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackerWrapperPacket& a, TrackerWrapperPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackerWrapperPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackerWrapperPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackerWrapperPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackerWrapperPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackerWrapperPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackerWrapperPacket& from) {
    TrackerWrapperPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackerWrapperPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackerWrapperPacket";
  }
  protected:
  explicit TrackerWrapperPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kSourceNameFieldNumber = 2,
    kTrackedFrameFieldNumber = 3,
  };
  // required string uuid = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional string source_name = 2;
  bool has_source_name() const;
  private:
  bool _internal_has_source_name() const;
  public:
  void clear_source_name();
  const std::string& source_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_name();
  PROTOBUF_NODISCARD std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // optional .TrackedFrame tracked_frame = 3;
  bool has_tracked_frame() const;
  private:
  bool _internal_has_tracked_frame() const;
  public:
  void clear_tracked_frame();
  const ::TrackedFrame& tracked_frame() const;
  PROTOBUF_NODISCARD ::TrackedFrame* release_tracked_frame();
  ::TrackedFrame* mutable_tracked_frame();
  void set_allocated_tracked_frame(::TrackedFrame* tracked_frame);
  private:
  const ::TrackedFrame& _internal_tracked_frame() const;
  ::TrackedFrame* _internal_mutable_tracked_frame();
  public:
  void unsafe_arena_set_allocated_tracked_frame(
      ::TrackedFrame* tracked_frame);
  ::TrackedFrame* unsafe_arena_release_tracked_frame();

  // @@protoc_insertion_point(class_scope:TrackerWrapperPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
    ::TrackedFrame* tracked_frame_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fwrapper_5ftracked_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackerWrapperPacket

// required string uuid = 1;
inline bool TrackerWrapperPacket::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackerWrapperPacket::has_uuid() const {
  return _internal_has_uuid();
}
inline void TrackerWrapperPacket::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackerWrapperPacket::uuid() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrackerWrapperPacket::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TrackerWrapperPacket.uuid)
}
inline std::string* TrackerWrapperPacket::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.uuid)
  return _s;
}
inline const std::string& TrackerWrapperPacket::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void TrackerWrapperPacket::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackerWrapperPacket::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* TrackerWrapperPacket::release_uuid() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrackerWrapperPacket::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.uuid)
}

// optional string source_name = 2;
inline bool TrackerWrapperPacket::_internal_has_source_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackerWrapperPacket::has_source_name() const {
  return _internal_has_source_name();
}
inline void TrackerWrapperPacket::clear_source_name() {
  _impl_.source_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackerWrapperPacket::source_name() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.source_name)
  return _internal_source_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TrackerWrapperPacket::set_source_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.source_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TrackerWrapperPacket.source_name)
}
inline std::string* TrackerWrapperPacket::mutable_source_name() {
  std::string* _s = _internal_mutable_source_name();
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.source_name)
  return _s;
}
inline const std::string& TrackerWrapperPacket::_internal_source_name() const {
  return _impl_.source_name_.Get();
}
inline void TrackerWrapperPacket::_internal_set_source_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.source_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TrackerWrapperPacket::_internal_mutable_source_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.source_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TrackerWrapperPacket::release_source_name() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.source_name)
  if (!_internal_has_source_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.source_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_name_.IsDefault()) {
    _impl_.source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TrackerWrapperPacket::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.source_name_.SetAllocated(source_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_name_.IsDefault()) {
    _impl_.source_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.source_name)
}

// optional .TrackedFrame tracked_frame = 3;
inline bool TrackerWrapperPacket::_internal_has_tracked_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tracked_frame_ != nullptr);
  return value;
}
inline bool TrackerWrapperPacket::has_tracked_frame() const {
  return _internal_has_tracked_frame();
}
inline const ::TrackedFrame& TrackerWrapperPacket::_internal_tracked_frame() const {
  const ::TrackedFrame* p = _impl_.tracked_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TrackedFrame&>(
      ::_TrackedFrame_default_instance_);
}
inline const ::TrackedFrame& TrackerWrapperPacket::tracked_frame() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.tracked_frame)
  return _internal_tracked_frame();
}
inline void TrackerWrapperPacket::unsafe_arena_set_allocated_tracked_frame(
    ::TrackedFrame* tracked_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracked_frame_);
  }
  _impl_.tracked_frame_ = tracked_frame;
  if (tracked_frame) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackerWrapperPacket.tracked_frame)
}
inline ::TrackedFrame* TrackerWrapperPacket::release_tracked_frame() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TrackedFrame* temp = _impl_.tracked_frame_;
  _impl_.tracked_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TrackedFrame* TrackerWrapperPacket::unsafe_arena_release_tracked_frame() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.tracked_frame)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TrackedFrame* temp = _impl_.tracked_frame_;
  _impl_.tracked_frame_ = nullptr;
  return temp;
}
inline ::TrackedFrame* TrackerWrapperPacket::_internal_mutable_tracked_frame() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.tracked_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrackedFrame>(GetArenaForAllocation());
    _impl_.tracked_frame_ = p;
  }
  return _impl_.tracked_frame_;
}
inline ::TrackedFrame* TrackerWrapperPacket::mutable_tracked_frame() {
  ::TrackedFrame* _msg = _internal_mutable_tracked_frame();
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.tracked_frame)
  return _msg;
}
inline void TrackerWrapperPacket::set_allocated_tracked_frame(::TrackedFrame* tracked_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tracked_frame_);
  }
  if (tracked_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracked_frame));
    if (message_arena != submessage_arena) {
      tracked_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracked_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.tracked_frame_ = tracked_frame;
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.tracked_frame)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fwrapper_5ftracked_2eproto
