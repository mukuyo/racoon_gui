// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_game_event.proto

#include "ssl_gc_game_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR GameEvent_BallLeftField::GameEvent_BallLeftField(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_BallLeftFieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BallLeftFieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BallLeftFieldDefaultTypeInternal() {}
  union {
    GameEvent_BallLeftField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BallLeftFieldDefaultTypeInternal _GameEvent_BallLeftField_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_AimlessKick::GameEvent_AimlessKick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.kick_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_AimlessKickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AimlessKickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AimlessKickDefaultTypeInternal() {}
  union {
    GameEvent_AimlessKick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AimlessKickDefaultTypeInternal _GameEvent_AimlessKick_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_Goal::GameEvent_Goal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.kick_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.kicking_bot_)*/0u
  , /*decltype(_impl_.max_ball_height_)*/0
  , /*decltype(_impl_.kicking_team_)*/0
  , /*decltype(_impl_.last_touch_by_team_)*/uint64_t{0u}
  , /*decltype(_impl_.num_robots_by_team_)*/0u} {}
struct GameEvent_GoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_GoalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_GoalDefaultTypeInternal() {}
  union {
    GameEvent_Goal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_GoalDefaultTypeInternal _GameEvent_Goal_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_IndirectGoal::GameEvent_IndirectGoal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.kick_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_IndirectGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_IndirectGoalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_IndirectGoalDefaultTypeInternal() {}
  union {
    GameEvent_IndirectGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_IndirectGoalDefaultTypeInternal _GameEvent_IndirectGoal_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_ChippedGoal::GameEvent_ChippedGoal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.kick_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.max_ball_height_)*/0} {}
struct GameEvent_ChippedGoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_ChippedGoalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_ChippedGoalDefaultTypeInternal() {}
  union {
    GameEvent_ChippedGoal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_ChippedGoalDefaultTypeInternal _GameEvent_ChippedGoal_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.speed_)*/0} {}
struct GameEvent_BotTooFastInStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotTooFastInStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotTooFastInStopDefaultTypeInternal() {}
  union {
    GameEvent_BotTooFastInStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotTooFastInStopDefaultTypeInternal _GameEvent_BotTooFastInStop_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.distance_)*/0} {}
struct GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal() {}
  union {
    GameEvent_DefenderTooCloseToKickPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_DefenderTooCloseToKickPointDefaultTypeInternal _GameEvent_DefenderTooCloseToKickPoint_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.bot_yellow_)*/0u
  , /*decltype(_impl_.bot_blue_)*/0u
  , /*decltype(_impl_.crash_speed_)*/0
  , /*decltype(_impl_.speed_diff_)*/0
  , /*decltype(_impl_.crash_angle_)*/0} {}
struct GameEvent_BotCrashDrawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotCrashDrawnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotCrashDrawnDefaultTypeInternal() {}
  union {
    GameEvent_BotCrashDrawn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotCrashDrawnDefaultTypeInternal _GameEvent_BotCrashDrawn_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.violator_)*/0u
  , /*decltype(_impl_.victim_)*/0u
  , /*decltype(_impl_.crash_speed_)*/0
  , /*decltype(_impl_.speed_diff_)*/0
  , /*decltype(_impl_.crash_angle_)*/0} {}
struct GameEvent_BotCrashUniqueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotCrashUniqueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotCrashUniqueDefaultTypeInternal() {}
  union {
    GameEvent_BotCrashUnique _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotCrashUniqueDefaultTypeInternal _GameEvent_BotCrashUnique_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotPushedBot::GameEvent_BotPushedBot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.violator_)*/0u
  , /*decltype(_impl_.victim_)*/0u
  , /*decltype(_impl_.pushed_distance_)*/0} {}
struct GameEvent_BotPushedBotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotPushedBotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotPushedBotDefaultTypeInternal() {}
  union {
    GameEvent_BotPushedBot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotPushedBotDefaultTypeInternal _GameEvent_BotPushedBot_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotTippedOver::GameEvent_BotTippedOver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.ball_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_BotTippedOverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotTippedOverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotTippedOverDefaultTypeInternal() {}
  union {
    GameEvent_BotTippedOver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotTippedOverDefaultTypeInternal _GameEvent_BotTippedOver_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.distance_)*/0} {}
struct GameEvent_DefenderInDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_DefenderInDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_DefenderInDefenseArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_DefenderInDefenseAreaDefaultTypeInternal _GameEvent_DefenderInDefenseArea_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.ball_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.distance_)*/0} {}
struct GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal() {}
  union {
    GameEvent_DefenderInDefenseAreaPartially _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_DefenderInDefenseAreaPartiallyDefaultTypeInternal _GameEvent_DefenderInDefenseAreaPartially_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.distance_)*/0} {}
struct GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_AttackerTouchedBallInDefenseArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerTouchedBallInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedBallInDefenseArea_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.initial_ball_speed_)*/0
  , /*decltype(_impl_.chipped_)*/false} {}
struct GameEvent_BotKickedBallTooFastDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotKickedBallTooFastDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotKickedBallTooFastDefaultTypeInternal() {}
  union {
    GameEvent_BotKickedBallTooFast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotKickedBallTooFastDefaultTypeInternal _GameEvent_BotKickedBallTooFast_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.start_)*/nullptr
  , /*decltype(_impl_.end_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_BotDribbledBallTooFarDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotDribbledBallTooFarDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotDribbledBallTooFarDefaultTypeInternal() {}
  union {
    GameEvent_BotDribbledBallTooFar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotDribbledBallTooFarDefaultTypeInternal _GameEvent_BotDribbledBallTooFar_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.victim_)*/0u} {}
struct GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_AttackerTouchedOpponentInDefenseArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerTouchedOpponentInDefenseAreaDefaultTypeInternal _GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal() {}
  union {
    GameEvent_AttackerDoubleTouchedBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerDoubleTouchedBallDefaultTypeInternal _GameEvent_AttackerDoubleTouchedBall_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.ball_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.distance_)*/0} {}
struct GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal() {}
  union {
    GameEvent_AttackerTooCloseToDefenseArea _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_AttackerTooCloseToDefenseAreaDefaultTypeInternal _GameEvent_AttackerTooCloseToDefenseArea_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u
  , /*decltype(_impl_.duration_)*/0} {}
struct GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal() {}
  union {
    GameEvent_BotHeldBallDeliberately _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotHeldBallDeliberatelyDefaultTypeInternal _GameEvent_BotHeldBallDeliberately_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.by_bot_)*/0u} {}
struct GameEvent_BotInterferedPlacementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotInterferedPlacementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotInterferedPlacementDefaultTypeInternal() {}
  union {
    GameEvent_BotInterferedPlacement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotInterferedPlacementDefaultTypeInternal _GameEvent_BotInterferedPlacement_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_MultipleCards::GameEvent_MultipleCards(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_MultipleCardsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_MultipleCardsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_MultipleCardsDefaultTypeInternal() {}
  union {
    GameEvent_MultipleCards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_MultipleCardsDefaultTypeInternal _GameEvent_MultipleCards_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_MultipleFouls::GameEvent_MultipleFouls(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.caused_game_events_)*/{}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_MultipleFoulsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_MultipleFoulsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_MultipleFoulsDefaultTypeInternal() {}
  union {
    GameEvent_MultipleFouls _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_MultipleFoulsDefaultTypeInternal _GameEvent_MultipleFouls_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_MultiplePlacementFailuresDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_MultiplePlacementFailuresDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_MultiplePlacementFailuresDefaultTypeInternal() {}
  union {
    GameEvent_MultiplePlacementFailures _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_MultiplePlacementFailuresDefaultTypeInternal _GameEvent_MultiplePlacementFailures_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_KickTimeout::GameEvent_KickTimeout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.time_)*/0} {}
struct GameEvent_KickTimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_KickTimeoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_KickTimeoutDefaultTypeInternal() {}
  union {
    GameEvent_KickTimeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_KickTimeoutDefaultTypeInternal _GameEvent_KickTimeout_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.time_)*/0} {}
struct GameEvent_NoProgressInGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_NoProgressInGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_NoProgressInGameDefaultTypeInternal() {}
  union {
    GameEvent_NoProgressInGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_NoProgressInGameDefaultTypeInternal _GameEvent_NoProgressInGame_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_PlacementFailed::GameEvent_PlacementFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.remaining_distance_)*/0} {}
struct GameEvent_PlacementFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PlacementFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PlacementFailedDefaultTypeInternal() {}
  union {
    GameEvent_PlacementFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PlacementFailedDefaultTypeInternal _GameEvent_PlacementFailed_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_UnsportingBehaviorMinorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMinorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_UnsportingBehaviorMinorDefaultTypeInternal() {}
  union {
    GameEvent_UnsportingBehaviorMinor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_UnsportingBehaviorMinorDefaultTypeInternal _GameEvent_UnsportingBehaviorMinor_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_UnsportingBehaviorMajorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_UnsportingBehaviorMajorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_UnsportingBehaviorMajorDefaultTypeInternal() {}
  union {
    GameEvent_UnsportingBehaviorMajor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_UnsportingBehaviorMajorDefaultTypeInternal _GameEvent_UnsportingBehaviorMajor_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.duration_)*/0} {}
struct GameEvent_KeeperHeldBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_KeeperHeldBallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_KeeperHeldBallDefaultTypeInternal() {}
  union {
    GameEvent_KeeperHeldBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_KeeperHeldBallDefaultTypeInternal _GameEvent_KeeperHeldBall_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.time_taken_)*/0
  , /*decltype(_impl_.precision_)*/0
  , /*decltype(_impl_.distance_)*/0} {}
struct GameEvent_PlacementSucceededDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PlacementSucceededDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PlacementSucceededDefaultTypeInternal() {}
  union {
    GameEvent_PlacementSucceeded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PlacementSucceededDefaultTypeInternal _GameEvent_PlacementSucceeded_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_Prepared::GameEvent_Prepared(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_taken_)*/0} {}
struct GameEvent_PreparedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PreparedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PreparedDefaultTypeInternal() {}
  union {
    GameEvent_Prepared _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PreparedDefaultTypeInternal _GameEvent_Prepared_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BotSubstitution::GameEvent_BotSubstitution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_BotSubstitutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BotSubstitutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BotSubstitutionDefaultTypeInternal() {}
  union {
    GameEvent_BotSubstitution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BotSubstitutionDefaultTypeInternal _GameEvent_BotSubstitution_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_ChallengeFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_ChallengeFlagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_ChallengeFlagDefaultTypeInternal() {}
  union {
    GameEvent_ChallengeFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_ChallengeFlagDefaultTypeInternal _GameEvent_ChallengeFlag_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_EmergencyStop::GameEvent_EmergencyStop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_EmergencyStopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_EmergencyStopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_EmergencyStopDefaultTypeInternal() {}
  union {
    GameEvent_EmergencyStop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_EmergencyStopDefaultTypeInternal _GameEvent_EmergencyStop_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_TooManyRobots::GameEvent_TooManyRobots(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ball_location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0
  , /*decltype(_impl_.num_robots_allowed_)*/0
  , /*decltype(_impl_.num_robots_on_field_)*/0} {}
struct GameEvent_TooManyRobotsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_TooManyRobotsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_TooManyRobotsDefaultTypeInternal() {}
  union {
    GameEvent_TooManyRobots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_TooManyRobotsDefaultTypeInternal _GameEvent_TooManyRobots_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_BoundaryCrossingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_BoundaryCrossingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_BoundaryCrossingDefaultTypeInternal() {}
  union {
    GameEvent_BoundaryCrossing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_BoundaryCrossingDefaultTypeInternal _GameEvent_BoundaryCrossing_default_instance_;
PROTOBUF_CONSTEXPR GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.by_team_)*/0} {}
struct GameEvent_PenaltyKickFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEvent_PenaltyKickFailedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEvent_PenaltyKickFailedDefaultTypeInternal() {}
  union {
    GameEvent_PenaltyKickFailed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEvent_PenaltyKickFailedDefaultTypeInternal _GameEvent_PenaltyKickFailed_default_instance_;
PROTOBUF_CONSTEXPR GameEvent::GameEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/{}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.event_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct GameEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEventDefaultTypeInternal() {}
  union {
    GameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEventDefaultTypeInternal _GameEvent_default_instance_;
static ::_pb::Metadata file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[39];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5fgame_5fevent_2eproto = nullptr;

const uint32_t TableStruct_ssl_5fgc_5fgame_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BallLeftField, _impl_.location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AimlessKick, _impl_.kick_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.kicking_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.kicking_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.kick_location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.max_ball_height_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.num_robots_by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.last_touch_by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Goal, _impl_.message_),
  3,
  6,
  4,
  1,
  2,
  5,
  8,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_IndirectGoal, _impl_.kick_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.kick_location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChippedGoal, _impl_.max_ball_height_),
  2,
  3,
  0,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTooFastInStop, _impl_.speed_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderTooCloseToKickPoint, _impl_.distance_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.bot_yellow_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.bot_blue_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.crash_speed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.speed_diff_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashDrawn, _impl_.crash_angle_),
  1,
  2,
  0,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.violator_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.crash_speed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.speed_diff_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotCrashUnique, _impl_.crash_angle_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.violator_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotPushedBot, _impl_.pushed_distance_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotTippedOver, _impl_.ball_location_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseArea, _impl_.distance_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_DefenderInDefenseAreaPartially, _impl_.ball_location_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedBallInDefenseArea, _impl_.distance_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.initial_ball_speed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotKickedBallTooFast, _impl_.chipped_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotDribbledBallTooFar, _impl_.end_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.location_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerDoubleTouchedBall, _impl_.location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_AttackerTooCloseToDefenseArea, _impl_.ball_location_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotHeldBallDeliberately, _impl_.duration_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_.by_bot_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotInterferedPlacement, _impl_.location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleCards, _impl_.by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultipleFouls, _impl_.caused_game_events_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_MultiplePlacementFailures, _impl_.by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KickTimeout, _impl_.time_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_NoProgressInGame, _impl_.time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementFailed, _impl_.remaining_distance_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMinor, _impl_.reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_UnsportingBehaviorMajor, _impl_.reason_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_KeeperHeldBall, _impl_.duration_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.time_taken_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.precision_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PlacementSucceeded, _impl_.distance_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_Prepared, _impl_.time_taken_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BotSubstitution, _impl_.by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_ChallengeFlag, _impl_.by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_EmergencyStop, _impl_.by_team_),
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.num_robots_allowed_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.num_robots_on_field_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_TooManyRobots, _impl_.ball_location_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_BoundaryCrossing, _impl_.location_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_.by_team_),
  PROTOBUF_FIELD_OFFSET(::GameEvent_PenaltyKickFailed, _impl_.location_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.origin_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::GameEvent, _impl_.event_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::GameEvent_BallLeftField)},
  { 12, 22, -1, sizeof(::GameEvent_AimlessKick)},
  { 26, 41, -1, sizeof(::GameEvent_Goal)},
  { 50, 60, -1, sizeof(::GameEvent_IndirectGoal)},
  { 64, 75, -1, sizeof(::GameEvent_ChippedGoal)},
  { 80, 90, -1, sizeof(::GameEvent_BotTooFastInStop)},
  { 94, 104, -1, sizeof(::GameEvent_DefenderTooCloseToKickPoint)},
  { 108, 120, -1, sizeof(::GameEvent_BotCrashDrawn)},
  { 126, 139, -1, sizeof(::GameEvent_BotCrashUnique)},
  { 146, 157, -1, sizeof(::GameEvent_BotPushedBot)},
  { 162, 172, -1, sizeof(::GameEvent_BotTippedOver)},
  { 176, 186, -1, sizeof(::GameEvent_DefenderInDefenseArea)},
  { 190, 201, -1, sizeof(::GameEvent_DefenderInDefenseAreaPartially)},
  { 206, 216, -1, sizeof(::GameEvent_AttackerTouchedBallInDefenseArea)},
  { 220, 231, -1, sizeof(::GameEvent_BotKickedBallTooFast)},
  { 236, 246, -1, sizeof(::GameEvent_BotDribbledBallTooFar)},
  { 250, 260, -1, sizeof(::GameEvent_AttackerTouchedOpponentInDefenseArea)},
  { 264, 273, -1, sizeof(::GameEvent_AttackerDoubleTouchedBall)},
  { 276, 287, -1, sizeof(::GameEvent_AttackerTooCloseToDefenseArea)},
  { 292, 302, -1, sizeof(::GameEvent_BotHeldBallDeliberately)},
  { 306, 315, -1, sizeof(::GameEvent_BotInterferedPlacement)},
  { 318, 325, -1, sizeof(::GameEvent_MultipleCards)},
  { 326, 334, -1, sizeof(::GameEvent_MultipleFouls)},
  { 336, 343, -1, sizeof(::GameEvent_MultiplePlacementFailures)},
  { 344, 353, -1, sizeof(::GameEvent_KickTimeout)},
  { 356, 364, -1, sizeof(::GameEvent_NoProgressInGame)},
  { 366, 374, -1, sizeof(::GameEvent_PlacementFailed)},
  { 376, 384, -1, sizeof(::GameEvent_UnsportingBehaviorMinor)},
  { 386, 394, -1, sizeof(::GameEvent_UnsportingBehaviorMajor)},
  { 396, 405, -1, sizeof(::GameEvent_KeeperHeldBall)},
  { 408, 418, -1, sizeof(::GameEvent_PlacementSucceeded)},
  { 422, 429, -1, sizeof(::GameEvent_Prepared)},
  { 430, 437, -1, sizeof(::GameEvent_BotSubstitution)},
  { 438, 445, -1, sizeof(::GameEvent_ChallengeFlag)},
  { 446, 453, -1, sizeof(::GameEvent_EmergencyStop)},
  { 454, 464, -1, sizeof(::GameEvent_TooManyRobots)},
  { 468, 476, -1, sizeof(::GameEvent_BoundaryCrossing)},
  { 478, 486, -1, sizeof(::GameEvent_PenaltyKickFailed)},
  { 488, 541, -1, sizeof(::GameEvent)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_GameEvent_BallLeftField_default_instance_._instance,
  &::_GameEvent_AimlessKick_default_instance_._instance,
  &::_GameEvent_Goal_default_instance_._instance,
  &::_GameEvent_IndirectGoal_default_instance_._instance,
  &::_GameEvent_ChippedGoal_default_instance_._instance,
  &::_GameEvent_BotTooFastInStop_default_instance_._instance,
  &::_GameEvent_DefenderTooCloseToKickPoint_default_instance_._instance,
  &::_GameEvent_BotCrashDrawn_default_instance_._instance,
  &::_GameEvent_BotCrashUnique_default_instance_._instance,
  &::_GameEvent_BotPushedBot_default_instance_._instance,
  &::_GameEvent_BotTippedOver_default_instance_._instance,
  &::_GameEvent_DefenderInDefenseArea_default_instance_._instance,
  &::_GameEvent_DefenderInDefenseAreaPartially_default_instance_._instance,
  &::_GameEvent_AttackerTouchedBallInDefenseArea_default_instance_._instance,
  &::_GameEvent_BotKickedBallTooFast_default_instance_._instance,
  &::_GameEvent_BotDribbledBallTooFar_default_instance_._instance,
  &::_GameEvent_AttackerTouchedOpponentInDefenseArea_default_instance_._instance,
  &::_GameEvent_AttackerDoubleTouchedBall_default_instance_._instance,
  &::_GameEvent_AttackerTooCloseToDefenseArea_default_instance_._instance,
  &::_GameEvent_BotHeldBallDeliberately_default_instance_._instance,
  &::_GameEvent_BotInterferedPlacement_default_instance_._instance,
  &::_GameEvent_MultipleCards_default_instance_._instance,
  &::_GameEvent_MultipleFouls_default_instance_._instance,
  &::_GameEvent_MultiplePlacementFailures_default_instance_._instance,
  &::_GameEvent_KickTimeout_default_instance_._instance,
  &::_GameEvent_NoProgressInGame_default_instance_._instance,
  &::_GameEvent_PlacementFailed_default_instance_._instance,
  &::_GameEvent_UnsportingBehaviorMinor_default_instance_._instance,
  &::_GameEvent_UnsportingBehaviorMajor_default_instance_._instance,
  &::_GameEvent_KeeperHeldBall_default_instance_._instance,
  &::_GameEvent_PlacementSucceeded_default_instance_._instance,
  &::_GameEvent_Prepared_default_instance_._instance,
  &::_GameEvent_BotSubstitution_default_instance_._instance,
  &::_GameEvent_ChallengeFlag_default_instance_._instance,
  &::_GameEvent_EmergencyStop_default_instance_._instance,
  &::_GameEvent_TooManyRobots_default_instance_._instance,
  &::_GameEvent_BoundaryCrossing_default_instance_._instance,
  &::_GameEvent_PenaltyKickFailed_default_instance_._instance,
  &::_GameEvent_default_instance_._instance,
};

const char descriptor_table_protodef_ssl_5fgc_5fgame_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027ssl_gc_game_event.proto\032\023ssl_gc_common"
  ".proto\032\025ssl_gc_geometry.proto\"\244>\n\tGameEv"
  "ent\022\035\n\004type\030( \001(\0162\017.GameEvent.Type\022\016\n\006or"
  "igin\030) \003(\t\022>\n\032ball_left_field_touch_line"
  "\030\006 \001(\0132\030.GameEvent.BallLeftFieldH\000\022=\n\031ba"
  "ll_left_field_goal_line\030\007 \001(\0132\030.GameEven"
  "t.BallLeftFieldH\000\022.\n\014aimless_kick\030\013 \001(\0132"
  "\026.GameEvent.AimlessKickH\000\022V\n\"attacker_to"
  "o_close_to_defense_area\030\023 \001(\0132(.GameEven"
  "t.AttackerTooCloseToDefenseAreaH\000\022D\n\030def"
  "ender_in_defense_area\030\037 \001(\0132 .GameEvent."
  "DefenderInDefenseAreaH\000\0228\n\021boundary_cros"
  "sing\030+ \001(\0132\033.GameEvent.BoundaryCrossingH"
  "\000\0225\n\020keeper_held_ball\030\r \001(\0132\031.GameEvent."
  "KeeperHeldBallH\000\022E\n\031bot_dribbled_ball_to"
  "o_far\030\021 \001(\0132 .GameEvent.BotDribbledBallT"
  "ooFarH\000\0221\n\016bot_pushed_bot\030\030 \001(\0132\027.GameEv"
  "ent.BotPushedBotH\000\022H\n\032bot_held_ball_deli"
  "berately\030\032 \001(\0132\".GameEvent.BotHeldBallDe"
  "liberatelyH\000\0223\n\017bot_tipped_over\030\033 \001(\0132\030."
  "GameEvent.BotTippedOverH\000\022\\\n%attacker_to"
  "uched_ball_in_defense_area\030\017 \001(\0132+.GameE"
  "vent.AttackerTouchedBallInDefenseAreaH\000\022"
  "C\n\030bot_kicked_ball_too_fast\030\022 \001(\0132\037.Game"
  "Event.BotKickedBallTooFastH\000\0225\n\020bot_cras"
  "h_unique\030\026 \001(\0132\031.GameEvent.BotCrashUniqu"
  "eH\000\0223\n\017bot_crash_drawn\030\025 \001(\0132\030.GameEvent"
  ".BotCrashDrawnH\000\022R\n defender_too_close_t"
  "o_kick_point\030\035 \001(\0132&.GameEvent.DefenderT"
  "ooCloseToKickPointH\000\022;\n\024bot_too_fast_in_"
  "stop\030\034 \001(\0132\033.GameEvent.BotTooFastInStopH"
  "\000\022E\n\030bot_interfered_placement\030\024 \001(\0132!.Ga"
  "meEvent.BotInterferedPlacementH\000\022(\n\rposs"
  "ible_goal\030\' \001(\0132\017.GameEvent.GoalH\000\022\037\n\004go"
  "al\030\010 \001(\0132\017.GameEvent.GoalH\000\022\'\n\014invalid_g"
  "oal\030, \001(\0132\017.GameEvent.GoalH\000\022L\n\034attacker"
  "_double_touched_ball\030\016 \001(\0132$.GameEvent.A"
  "ttackerDoubleTouchedBallH\000\022<\n\023placement_"
  "succeeded\030\005 \001(\0132\035.GameEvent.PlacementSuc"
  "ceededH\000\022;\n\023penalty_kick_failed\030- \001(\0132\034."
  "GameEvent.PenaltyKickFailedH\000\022:\n\023no_prog"
  "ress_in_game\030\002 \001(\0132\033.GameEvent.NoProgres"
  "sInGameH\000\0226\n\020placement_failed\030\003 \001(\0132\032.Ga"
  "meEvent.PlacementFailedH\000\0222\n\016multiple_ca"
  "rds\030  \001(\0132\030.GameEvent.MultipleCardsH\000\0222\n"
  "\016multiple_fouls\030\" \001(\0132\030.GameEvent.Multip"
  "leFoulsH\000\0226\n\020bot_substitution\030% \001(\0132\032.Ga"
  "meEvent.BotSubstitutionH\000\0223\n\017too_many_ro"
  "bots\030& \001(\0132\030.GameEvent.TooManyRobotsH\000\0222"
  "\n\016challenge_flag\030. \001(\0132\030.GameEvent.Chall"
  "engeFlagH\000\0222\n\016emergency_stop\030/ \001(\0132\030.Gam"
  "eEvent.EmergencyStopH\000\022G\n\031unsporting_beh"
  "avior_minor\030# \001(\0132\".GameEvent.Unsporting"
  "BehaviorMinorH\000\022G\n\031unsporting_behavior_m"
  "ajor\030$ \001(\0132\".GameEvent.UnsportingBehavio"
  "rMajorH\000\022+\n\010prepared\030\001 \001(\0132\023.GameEvent.P"
  "reparedB\002\030\001H\000\0224\n\rindirect_goal\030\t \001(\0132\027.G"
  "ameEvent.IndirectGoalB\002\030\001H\000\0222\n\014chipped_g"
  "oal\030\n \001(\0132\026.GameEvent.ChippedGoalB\002\030\001H\000\022"
  "2\n\014kick_timeout\030\014 \001(\0132\026.GameEvent.KickTi"
  "meoutB\002\030\001H\000\022h\n)attacker_touched_opponent"
  "_in_defense_area\030\020 \001(\0132/.GameEvent.Attac"
  "kerTouchedOpponentInDefenseAreaB\002\030\001H\000\022p\n"
  "1attacker_touched_opponent_in_defense_ar"
  "ea_skipped\030* \001(\0132/.GameEvent.AttackerTou"
  "chedOpponentInDefenseAreaB\002\030\001H\000\022A\n\030bot_c"
  "rash_unique_skipped\030\027 \001(\0132\031.GameEvent.Bo"
  "tCrashUniqueB\002\030\001H\000\022=\n\026bot_pushed_bot_ski"
  "pped\030\031 \001(\0132\027.GameEvent.BotPushedBotB\002\030\001H"
  "\000\022[\n\"defender_in_defense_area_partially\030"
  "\036 \001(\0132).GameEvent.DefenderInDefenseAreaP"
  "artiallyB\002\030\001H\000\022O\n\033multiple_placement_fai"
  "lures\030! \001(\0132$.GameEvent.MultiplePlacemen"
  "tFailuresB\002\030\001H\000\032S\n\rBallLeftField\022\026\n\007by_t"
  "eam\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010loca"
  "tion\030\003 \001(\0132\010.Vector2\032r\n\013AimlessKick\022\026\n\007b"
  "y_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010l"
  "ocation\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location"
  "\030\004 \001(\0132\010.Vector2\032\357\001\n\004Goal\022\026\n\007by_team\030\001 \002"
  "(\0162\005.Team\022\033\n\014kicking_team\030\006 \001(\0162\005.Team\022\023"
  "\n\013kicking_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010."
  "Vector2\022\037\n\rkick_location\030\004 \001(\0132\010.Vector2"
  "\022\027\n\017max_ball_height\030\005 \001(\002\022\032\n\022num_robots_"
  "by_team\030\007 \001(\r\022\032\n\022last_touch_by_team\030\010 \001("
  "\004\022\017\n\007message\030\t \001(\t\032s\n\014IndirectGoal\022\026\n\007by"
  "_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010lo"
  "cation\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030"
  "\004 \001(\0132\010.Vector2\032\213\001\n\013ChippedGoal\022\026\n\007by_te"
  "am\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010locat"
  "ion\030\003 \001(\0132\010.Vector2\022\037\n\rkick_location\030\004 \001"
  "(\0132\010.Vector2\022\027\n\017max_ball_height\030\005 \001(\002\032e\n"
  "\020BotTooFastInStop\022\026\n\007by_team\030\001 \002(\0162\005.Tea"
  "m\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Ve"
  "ctor2\022\r\n\005speed\030\004 \001(\002\032s\n\033DefenderTooClose"
  "ToKickPoint\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006b"
  "y_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\022"
  "\020\n\010distance\030\004 \001(\002\032\217\001\n\rBotCrashDrawn\022\022\n\nb"
  "ot_yellow\030\001 \001(\r\022\020\n\010bot_blue\030\002 \001(\r\022\032\n\010loc"
  "ation\030\003 \001(\0132\010.Vector2\022\023\n\013crash_speed\030\004 \001"
  "(\002\022\022\n\nspeed_diff\030\005 \001(\002\022\023\n\013crash_angle\030\006 "
  "\001(\002\032\244\001\n\016BotCrashUnique\022\026\n\007by_team\030\001 \002(\0162"
  "\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003 \001(\r"
  "\022\032\n\010location\030\004 \001(\0132\010.Vector2\022\023\n\013crash_sp"
  "eed\030\005 \001(\002\022\022\n\nspeed_diff\030\006 \001(\002\022\023\n\013crash_a"
  "ngle\030\007 \001(\002\032}\n\014BotPushedBot\022\026\n\007by_team\030\001 "
  "\002(\0162\005.Team\022\020\n\010violator\030\002 \001(\r\022\016\n\006victim\030\003"
  " \001(\r\022\032\n\010location\030\004 \001(\0132\010.Vector2\022\027\n\017push"
  "ed_distance\030\005 \001(\002\032t\n\rBotTippedOver\022\026\n\007by"
  "_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010lo"
  "cation\030\003 \001(\0132\010.Vector2\022\037\n\rball_location\030"
  "\004 \001(\0132\010.Vector2\032m\n\025DefenderInDefenseArea"
  "\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r"
  "\022\032\n\010location\030\003 \001(\0132\010.Vector2\022\020\n\010distance"
  "\030\004 \001(\002\032\227\001\n\036DefenderInDefenseAreaPartiall"
  "y\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001("
  "\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\022\020\n\010distanc"
  "e\030\004 \001(\002\022\037\n\rball_location\030\005 \001(\0132\010.Vector2"
  "\032x\n AttackerTouchedBallInDefenseArea\022\026\n\007"
  "by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010"
  "location\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030\004 \001"
  "(\002\032\207\001\n\024BotKickedBallTooFast\022\026\n\007by_team\030\001"
  " \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location\030"
  "\003 \001(\0132\010.Vector2\022\032\n\022initial_ball_speed\030\004 "
  "\001(\002\022\017\n\007chipped\030\005 \001(\010\032o\n\025BotDribbledBallT"
  "ooFar\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot\030"
  "\002 \001(\r\022\027\n\005start\030\003 \001(\0132\010.Vector2\022\025\n\003end\030\004 "
  "\001(\0132\010.Vector2\032z\n$AttackerTouchedOpponent"
  "InDefenseArea\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n"
  "\006by_bot\030\002 \001(\r\022\016\n\006victim\030\004 \001(\r\022\032\n\010locatio"
  "n\030\003 \001(\0132\010.Vector2\032_\n\031AttackerDoubleTouch"
  "edBall\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot"
  "\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\032\226\001\n\035A"
  "ttackerTooCloseToDefenseArea\022\026\n\007by_team\030"
  "\001 \002(\0162\005.Team\022\016\n\006by_bot\030\002 \001(\r\022\032\n\010location"
  "\030\003 \001(\0132\010.Vector2\022\020\n\010distance\030\004 \001(\002\022\037\n\rba"
  "ll_location\030\005 \001(\0132\010.Vector2\032o\n\027BotHeldBa"
  "llDeliberately\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016"
  "\n\006by_bot\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vecto"
  "r2\022\020\n\010duration\030\004 \001(\002\032\\\n\026BotInterferedPla"
  "cement\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006by_bot"
  "\030\002 \001(\r\022\032\n\010location\030\003 \001(\0132\010.Vector2\032\'\n\rMu"
  "ltipleCards\022\026\n\007by_team\030\001 \002(\0162\005.Team\032O\n\rM"
  "ultipleFouls\022\026\n\007by_team\030\001 \002(\0162\005.Team\022&\n\022"
  "caused_game_events\030\002 \003(\0132\n.GameEvent\0323\n\031"
  "MultiplePlacementFailures\022\026\n\007by_team\030\001 \002"
  "(\0162\005.Team\032O\n\013KickTimeout\022\026\n\007by_team\030\001 \002("
  "\0162\005.Team\022\032\n\010location\030\002 \001(\0132\010.Vector2\022\014\n\004"
  "time\030\003 \001(\002\032<\n\020NoProgressInGame\022\032\n\010locati"
  "on\030\001 \001(\0132\010.Vector2\022\014\n\004time\030\002 \001(\002\032E\n\017Plac"
  "ementFailed\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\022r"
  "emaining_distance\030\002 \001(\002\032A\n\027UnsportingBeh"
  "aviorMinor\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\016\n\006re"
  "ason\030\002 \002(\t\032A\n\027UnsportingBehaviorMajor\022\026\n"
  "\007by_team\030\001 \002(\0162\005.Team\022\016\n\006reason\030\002 \002(\t\032V\n"
  "\016KeeperHeldBall\022\026\n\007by_team\030\001 \002(\0162\005.Team\022"
  "\032\n\010location\030\002 \001(\0132\010.Vector2\022\020\n\010duration\030"
  "\003 \001(\002\032e\n\022PlacementSucceeded\022\026\n\007by_team\030\001"
  " \002(\0162\005.Team\022\022\n\ntime_taken\030\002 \001(\002\022\021\n\tpreci"
  "sion\030\003 \001(\002\022\020\n\010distance\030\004 \001(\002\032\036\n\010Prepared"
  "\022\022\n\ntime_taken\030\001 \001(\002\032)\n\017BotSubstitution\022"
  "\026\n\007by_team\030\001 \002(\0162\005.Team\032\'\n\rChallengeFlag"
  "\022\026\n\007by_team\030\001 \002(\0162\005.Team\032\'\n\rEmergencySto"
  "p\022\026\n\007by_team\030\001 \002(\0162\005.Team\032\201\001\n\rTooManyRob"
  "ots\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\022num_robot"
  "s_allowed\030\002 \001(\005\022\033\n\023num_robots_on_field\030\003"
  " \001(\005\022\037\n\rball_location\030\004 \001(\0132\010.Vector2\032F\n"
  "\020BoundaryCrossing\022\026\n\007by_team\030\001 \002(\0162\005.Tea"
  "m\022\032\n\010location\030\002 \001(\0132\010.Vector2\032G\n\021Penalty"
  "KickFailed\022\026\n\007by_team\030\001 \002(\0162\005.Team\022\032\n\010lo"
  "cation\030\002 \001(\0132\010.Vector2\"\342\t\n\004Type\022\033\n\027UNKNO"
  "WN_GAME_EVENT_TYPE\020\000\022\036\n\032BALL_LEFT_FIELD_"
  "TOUCH_LINE\020\006\022\035\n\031BALL_LEFT_FIELD_GOAL_LIN"
  "E\020\007\022\020\n\014AIMLESS_KICK\020\013\022&\n\"ATTACKER_TOO_CL"
  "OSE_TO_DEFENSE_AREA\020\023\022\034\n\030DEFENDER_IN_DEF"
  "ENSE_AREA\020\037\022\025\n\021BOUNDARY_CROSSING\020)\022\024\n\020KE"
  "EPER_HELD_BALL\020\r\022\035\n\031BOT_DRIBBLED_BALL_TO"
  "O_FAR\020\021\022\022\n\016BOT_PUSHED_BOT\020\030\022\036\n\032BOT_HELD_"
  "BALL_DELIBERATELY\020\032\022\023\n\017BOT_TIPPED_OVER\020\033"
  "\022)\n%ATTACKER_TOUCHED_BALL_IN_DEFENSE_ARE"
  "A\020\017\022\034\n\030BOT_KICKED_BALL_TOO_FAST\020\022\022\024\n\020BOT"
  "_CRASH_UNIQUE\020\026\022\023\n\017BOT_CRASH_DRAWN\020\025\022$\n "
  "DEFENDER_TOO_CLOSE_TO_KICK_POINT\020\035\022\030\n\024BO"
  "T_TOO_FAST_IN_STOP\020\034\022\034\n\030BOT_INTERFERED_P"
  "LACEMENT\020\024\022\021\n\rPOSSIBLE_GOAL\020\'\022\010\n\004GOAL\020\010\022"
  "\020\n\014INVALID_GOAL\020*\022 \n\034ATTACKER_DOUBLE_TOU"
  "CHED_BALL\020\016\022\027\n\023PLACEMENT_SUCCEEDED\020\005\022\027\n\023"
  "PENALTY_KICK_FAILED\020+\022\027\n\023NO_PROGRESS_IN_"
  "GAME\020\002\022\024\n\020PLACEMENT_FAILED\020\003\022\022\n\016MULTIPLE"
  "_CARDS\020 \022\022\n\016MULTIPLE_FOULS\020\"\022\024\n\020BOT_SUBS"
  "TITUTION\020%\022\023\n\017TOO_MANY_ROBOTS\020&\022\022\n\016CHALL"
  "ENGE_FLAG\020,\022\022\n\016EMERGENCY_STOP\020-\022\035\n\031UNSPO"
  "RTING_BEHAVIOR_MINOR\020#\022\035\n\031UNSPORTING_BEH"
  "AVIOR_MAJOR\020$\022\020\n\010PREPARED\020\001\032\002\010\001\022\025\n\rINDIR"
  "ECT_GOAL\020\t\032\002\010\001\022\024\n\014CHIPPED_GOAL\020\n\032\002\010\001\022\024\n\014"
  "KICK_TIMEOUT\020\014\032\002\010\001\0221\n)ATTACKER_TOUCHED_O"
  "PPONENT_IN_DEFENSE_AREA\020\020\032\002\010\001\0229\n1ATTACKE"
  "R_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPP"
  "ED\020(\032\002\010\001\022 \n\030BOT_CRASH_UNIQUE_SKIPPED\020\027\032\002"
  "\010\001\022\036\n\026BOT_PUSHED_BOT_SKIPPED\020\031\032\002\010\001\022*\n\"DE"
  "FENDER_IN_DEFENSE_AREA_PARTIALLY\020\036\032\002\010\001\022#"
  "\n\033MULTIPLE_PLACEMENT_FAILURES\020!\032\002\010\001B\007\n\005e"
  "ventB-Z+github.com/Rione-SSL/RACOON-Pi/p"
  "roto/pb_gen"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto = {
    false, false, 8091, descriptor_table_protodef_ssl_5fgc_5fgame_5fevent_2eproto,
    "ssl_gc_game_event.proto",
    &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once, descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_deps, 2, 39,
    schemas, file_default_instances, TableStruct_ssl_5fgc_5fgame_5fevent_2eproto::offsets,
    file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto, file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto,
    file_level_service_descriptors_ssl_5fgc_5fgame_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter() {
  return &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ssl_5fgc_5fgame_5fevent_2eproto(&descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEvent_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5fgame_5fevent_2eproto[0];
}
bool GameEvent_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GameEvent_Type GameEvent::UNKNOWN_GAME_EVENT_TYPE;
constexpr GameEvent_Type GameEvent::BALL_LEFT_FIELD_TOUCH_LINE;
constexpr GameEvent_Type GameEvent::BALL_LEFT_FIELD_GOAL_LINE;
constexpr GameEvent_Type GameEvent::AIMLESS_KICK;
constexpr GameEvent_Type GameEvent::ATTACKER_TOO_CLOSE_TO_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::DEFENDER_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::BOUNDARY_CROSSING;
constexpr GameEvent_Type GameEvent::KEEPER_HELD_BALL;
constexpr GameEvent_Type GameEvent::BOT_DRIBBLED_BALL_TOO_FAR;
constexpr GameEvent_Type GameEvent::BOT_PUSHED_BOT;
constexpr GameEvent_Type GameEvent::BOT_HELD_BALL_DELIBERATELY;
constexpr GameEvent_Type GameEvent::BOT_TIPPED_OVER;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_BALL_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::BOT_KICKED_BALL_TOO_FAST;
constexpr GameEvent_Type GameEvent::BOT_CRASH_UNIQUE;
constexpr GameEvent_Type GameEvent::BOT_CRASH_DRAWN;
constexpr GameEvent_Type GameEvent::DEFENDER_TOO_CLOSE_TO_KICK_POINT;
constexpr GameEvent_Type GameEvent::BOT_TOO_FAST_IN_STOP;
constexpr GameEvent_Type GameEvent::BOT_INTERFERED_PLACEMENT;
constexpr GameEvent_Type GameEvent::POSSIBLE_GOAL;
constexpr GameEvent_Type GameEvent::GOAL;
constexpr GameEvent_Type GameEvent::INVALID_GOAL;
constexpr GameEvent_Type GameEvent::ATTACKER_DOUBLE_TOUCHED_BALL;
constexpr GameEvent_Type GameEvent::PLACEMENT_SUCCEEDED;
constexpr GameEvent_Type GameEvent::PENALTY_KICK_FAILED;
constexpr GameEvent_Type GameEvent::NO_PROGRESS_IN_GAME;
constexpr GameEvent_Type GameEvent::PLACEMENT_FAILED;
constexpr GameEvent_Type GameEvent::MULTIPLE_CARDS;
constexpr GameEvent_Type GameEvent::MULTIPLE_FOULS;
constexpr GameEvent_Type GameEvent::BOT_SUBSTITUTION;
constexpr GameEvent_Type GameEvent::TOO_MANY_ROBOTS;
constexpr GameEvent_Type GameEvent::CHALLENGE_FLAG;
constexpr GameEvent_Type GameEvent::EMERGENCY_STOP;
constexpr GameEvent_Type GameEvent::UNSPORTING_BEHAVIOR_MINOR;
constexpr GameEvent_Type GameEvent::UNSPORTING_BEHAVIOR_MAJOR;
constexpr GameEvent_Type GameEvent::PREPARED;
constexpr GameEvent_Type GameEvent::INDIRECT_GOAL;
constexpr GameEvent_Type GameEvent::CHIPPED_GOAL;
constexpr GameEvent_Type GameEvent::KICK_TIMEOUT;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA;
constexpr GameEvent_Type GameEvent::ATTACKER_TOUCHED_OPPONENT_IN_DEFENSE_AREA_SKIPPED;
constexpr GameEvent_Type GameEvent::BOT_CRASH_UNIQUE_SKIPPED;
constexpr GameEvent_Type GameEvent::BOT_PUSHED_BOT_SKIPPED;
constexpr GameEvent_Type GameEvent::DEFENDER_IN_DEFENSE_AREA_PARTIALLY;
constexpr GameEvent_Type GameEvent::MULTIPLE_PLACEMENT_FAILURES;
constexpr GameEvent_Type GameEvent::Type_MIN;
constexpr GameEvent_Type GameEvent::Type_MAX;
constexpr int GameEvent::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GameEvent_BallLeftField::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BallLeftField>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BallLeftField* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BallLeftField::_Internal::location(const GameEvent_BallLeftField* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BallLeftField::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BallLeftField::GameEvent_BallLeftField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BallLeftField)
}
GameEvent_BallLeftField::GameEvent_BallLeftField(const GameEvent_BallLeftField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BallLeftField* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BallLeftField)
}

inline void GameEvent_BallLeftField::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_BallLeftField::~GameEvent_BallLeftField() {
  // @@protoc_insertion_point(destructor:GameEvent.BallLeftField)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BallLeftField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BallLeftField::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BallLeftField::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BallLeftField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BallLeftField::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BallLeftField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BallLeftField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BallLeftField)
  return target;
}

size_t GameEvent_BallLeftField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BallLeftField)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BallLeftField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BallLeftField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BallLeftField::GetClassData() const { return &_class_data_; }


void GameEvent_BallLeftField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BallLeftField*>(&to_msg);
  auto& from = static_cast<const GameEvent_BallLeftField&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BallLeftField)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BallLeftField::CopyFrom(const GameEvent_BallLeftField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BallLeftField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BallLeftField::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BallLeftField::InternalSwap(GameEvent_BallLeftField* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.by_bot_)
      + sizeof(GameEvent_BallLeftField::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BallLeftField, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BallLeftField::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[0]);
}

// ===================================================================

class GameEvent_AimlessKick::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AimlessKick>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_AimlessKick* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& kick_location(const GameEvent_AimlessKick* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_AimlessKick::_Internal::location(const GameEvent_AimlessKick* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_AimlessKick::_Internal::kick_location(const GameEvent_AimlessKick* msg) {
  return *msg->_impl_.kick_location_;
}
void GameEvent_AimlessKick::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AimlessKick::clear_kick_location() {
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_AimlessKick::GameEvent_AimlessKick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AimlessKick)
}
GameEvent_AimlessKick::GameEvent_AimlessKick(const GameEvent_AimlessKick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_AimlessKick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_kick_location()) {
    _this->_impl_.kick_location_ = new ::Vector2(*from._impl_.kick_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AimlessKick)
}

inline void GameEvent_AimlessKick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_AimlessKick::~GameEvent_AimlessKick() {
  // @@protoc_insertion_point(destructor:GameEvent.AimlessKick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_AimlessKick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.kick_location_;
}

void GameEvent_AimlessKick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_AimlessKick::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AimlessKick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AimlessKick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_AimlessKick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AimlessKick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kick_location(this),
        _Internal::kick_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AimlessKick)
  return target;
}

size_t GameEvent_AimlessKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AimlessKick)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_AimlessKick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_AimlessKick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_AimlessKick::GetClassData() const { return &_class_data_; }


void GameEvent_AimlessKick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_AimlessKick*>(&to_msg);
  auto& from = static_cast<const GameEvent_AimlessKick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AimlessKick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kick_location()->::Vector2::MergeFrom(
          from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AimlessKick::CopyFrom(const GameEvent_AimlessKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AimlessKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AimlessKick::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!_impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AimlessKick::InternalSwap(GameEvent_AimlessKick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.by_bot_)
      + sizeof(GameEvent_AimlessKick::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AimlessKick, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AimlessKick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[1]);
}

// ===================================================================

class GameEvent_Goal::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_Goal>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_kicking_team(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_kicking_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& location(const GameEvent_Goal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& kick_location(const GameEvent_Goal* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_ball_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_robots_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_last_touch_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::Vector2&
GameEvent_Goal::_Internal::location(const GameEvent_Goal* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_Goal::_Internal::kick_location(const GameEvent_Goal* msg) {
  return *msg->_impl_.kick_location_;
}
void GameEvent_Goal::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GameEvent_Goal::clear_kick_location() {
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GameEvent_Goal::GameEvent_Goal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.Goal)
}
GameEvent_Goal::GameEvent_Goal(const GameEvent_Goal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_Goal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.kicking_bot_){}
    , decltype(_impl_.max_ball_height_){}
    , decltype(_impl_.kicking_team_){}
    , decltype(_impl_.last_touch_by_team_){}
    , decltype(_impl_.num_robots_by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_kick_location()) {
    _this->_impl_.kick_location_ = new ::Vector2(*from._impl_.kick_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_robots_by_team_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.num_robots_by_team_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.Goal)
}

inline void GameEvent_Goal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.kicking_bot_){0u}
    , decltype(_impl_.max_ball_height_){0}
    , decltype(_impl_.kicking_team_){0}
    , decltype(_impl_.last_touch_by_team_){uint64_t{0u}}
    , decltype(_impl_.num_robots_by_team_){0u}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameEvent_Goal::~GameEvent_Goal() {
  // @@protoc_insertion_point(destructor:GameEvent.Goal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_Goal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.kick_location_;
}

void GameEvent_Goal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Goal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.last_touch_by_team_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.last_touch_by_team_));
  }
  _impl_.num_robots_by_team_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_Goal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 kicking_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_kicking_bot(&has_bits);
          _impl_.kicking_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float max_ball_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_max_ball_height(&has_bits);
          _impl_.max_ball_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .Team kicking_team = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_kicking_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_robots_by_team = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_robots_by_team(&has_bits);
          _impl_.num_robots_by_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_touch_by_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_last_touch_by_team(&has_bits);
          _impl_.last_touch_by_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "GameEvent.Goal.message");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_Goal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Goal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 kicking_bot = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kicking_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kick_location(this),
        _Internal::kick_location(this).GetCachedSize(), target, stream);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_max_ball_height(), target);
  }

  // optional .Team kicking_team = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_kicking_team(), target);
  }

  // optional uint32 num_robots_by_team = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_num_robots_by_team(), target);
  }

  // optional uint64 last_touch_by_team = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_last_touch_by_team(), target);
  }

  // optional string message = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.Goal.message");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Goal)
  return target;
}

size_t GameEvent_Goal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Goal)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kick_location_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 kicking_bot = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_kicking_bot());
    }

    // optional float max_ball_height = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional .Team kicking_team = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_kicking_team());
    }

    // optional uint64 last_touch_by_team = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_touch_by_team());
    }

  }
  // optional uint32 num_robots_by_team = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_robots_by_team());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_Goal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_Goal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_Goal::GetClassData() const { return &_class_data_; }


void GameEvent_Goal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_Goal*>(&to_msg);
  auto& from = static_cast<const GameEvent_Goal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Goal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_kick_location()->::Vector2::MergeFrom(
          from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.kicking_bot_ = from._impl_.kicking_bot_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_ball_height_ = from._impl_.max_ball_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.kicking_team_ = from._impl_.kicking_team_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.last_touch_by_team_ = from._impl_.last_touch_by_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_num_robots_by_team(from._internal_num_robots_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_Goal::CopyFrom(const GameEvent_Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Goal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!_impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_Goal::InternalSwap(GameEvent_Goal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.num_robots_by_team_)
      + sizeof(GameEvent_Goal::_impl_.num_robots_by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_Goal, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_Goal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[2]);
}

// ===================================================================

class GameEvent_IndirectGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_IndirectGoal>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_IndirectGoal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& kick_location(const GameEvent_IndirectGoal* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_IndirectGoal::_Internal::location(const GameEvent_IndirectGoal* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_IndirectGoal::_Internal::kick_location(const GameEvent_IndirectGoal* msg) {
  return *msg->_impl_.kick_location_;
}
void GameEvent_IndirectGoal::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_IndirectGoal::clear_kick_location() {
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.IndirectGoal)
}
GameEvent_IndirectGoal::GameEvent_IndirectGoal(const GameEvent_IndirectGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_IndirectGoal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_kick_location()) {
    _this->_impl_.kick_location_ = new ::Vector2(*from._impl_.kick_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.IndirectGoal)
}

inline void GameEvent_IndirectGoal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_IndirectGoal::~GameEvent_IndirectGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.IndirectGoal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_IndirectGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.kick_location_;
}

void GameEvent_IndirectGoal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_IndirectGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.IndirectGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_IndirectGoal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_IndirectGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.IndirectGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kick_location(this),
        _Internal::kick_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.IndirectGoal)
  return target;
}

size_t GameEvent_IndirectGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.IndirectGoal)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kick_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_IndirectGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_IndirectGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_IndirectGoal::GetClassData() const { return &_class_data_; }


void GameEvent_IndirectGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_IndirectGoal*>(&to_msg);
  auto& from = static_cast<const GameEvent_IndirectGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.IndirectGoal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kick_location()->::Vector2::MergeFrom(
          from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_IndirectGoal::CopyFrom(const GameEvent_IndirectGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.IndirectGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_IndirectGoal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!_impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_IndirectGoal::InternalSwap(GameEvent_IndirectGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.by_bot_)
      + sizeof(GameEvent_IndirectGoal::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_IndirectGoal, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_IndirectGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[3]);
}

// ===================================================================

class GameEvent_ChippedGoal::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_ChippedGoal>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_ChippedGoal* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& kick_location(const GameEvent_ChippedGoal* msg);
  static void set_has_kick_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_ball_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_ChippedGoal::_Internal::location(const GameEvent_ChippedGoal* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_ChippedGoal::_Internal::kick_location(const GameEvent_ChippedGoal* msg) {
  return *msg->_impl_.kick_location_;
}
void GameEvent_ChippedGoal::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_ChippedGoal::clear_kick_location() {
  if (_impl_.kick_location_ != nullptr) _impl_.kick_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChippedGoal)
}
GameEvent_ChippedGoal::GameEvent_ChippedGoal(const GameEvent_ChippedGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_ChippedGoal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.max_ball_height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_kick_location()) {
    _this->_impl_.kick_location_ = new ::Vector2(*from._impl_.kick_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_ball_height_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.max_ball_height_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChippedGoal)
}

inline void GameEvent_ChippedGoal::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.kick_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.max_ball_height_){0}
  };
}

GameEvent_ChippedGoal::~GameEvent_ChippedGoal() {
  // @@protoc_insertion_point(destructor:GameEvent.ChippedGoal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_ChippedGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.kick_location_;
}

void GameEvent_ChippedGoal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_ChippedGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChippedGoal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.kick_location_ != nullptr);
      _impl_.kick_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_ball_height_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.max_ball_height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_ChippedGoal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 kick_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float max_ball_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_max_ball_height(&has_bits);
          _impl_.max_ball_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_ChippedGoal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChippedGoal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 kick_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::kick_location(this),
        _Internal::kick_location(this).GetCachedSize(), target, stream);
  }

  // optional float max_ball_height = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_max_ball_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChippedGoal)
  return target;
}

size_t GameEvent_ChippedGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChippedGoal)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 kick_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kick_location_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float max_ball_height = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_ChippedGoal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_ChippedGoal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_ChippedGoal::GetClassData() const { return &_class_data_; }


void GameEvent_ChippedGoal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_ChippedGoal*>(&to_msg);
  auto& from = static_cast<const GameEvent_ChippedGoal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChippedGoal)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_kick_location()->::Vector2::MergeFrom(
          from._internal_kick_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.max_ball_height_ = from._impl_.max_ball_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_ChippedGoal::CopyFrom(const GameEvent_ChippedGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChippedGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChippedGoal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_kick_location()) {
    if (!_impl_.kick_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_ChippedGoal::InternalSwap(GameEvent_ChippedGoal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.max_ball_height_)
      + sizeof(GameEvent_ChippedGoal::_impl_.max_ball_height_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_ChippedGoal, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_ChippedGoal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[4]);
}

// ===================================================================

class GameEvent_BotTooFastInStop::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotTooFastInStop>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotTooFastInStop* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotTooFastInStop::_Internal::location(const GameEvent_BotTooFastInStop* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotTooFastInStop::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotTooFastInStop)
}
GameEvent_BotTooFastInStop::GameEvent_BotTooFastInStop(const GameEvent_BotTooFastInStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotTooFastInStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.speed_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTooFastInStop)
}

inline void GameEvent_BotTooFastInStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.speed_){0}
  };
}

GameEvent_BotTooFastInStop::~GameEvent_BotTooFastInStop() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTooFastInStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotTooFastInStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotTooFastInStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotTooFastInStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTooFastInStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.speed_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotTooFastInStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotTooFastInStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTooFastInStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTooFastInStop)
  return target;
}

size_t GameEvent_BotTooFastInStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTooFastInStop)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotTooFastInStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotTooFastInStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotTooFastInStop::GetClassData() const { return &_class_data_; }


void GameEvent_BotTooFastInStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotTooFastInStop*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotTooFastInStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTooFastInStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotTooFastInStop::CopyFrom(const GameEvent_BotTooFastInStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTooFastInStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTooFastInStop::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTooFastInStop::InternalSwap(GameEvent_BotTooFastInStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.speed_)
      + sizeof(GameEvent_BotTooFastInStop::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotTooFastInStop, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotTooFastInStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[5]);
}

// ===================================================================

class GameEvent_DefenderTooCloseToKickPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_DefenderTooCloseToKickPoint>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_DefenderTooCloseToKickPoint* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_DefenderTooCloseToKickPoint::_Internal::location(const GameEvent_DefenderTooCloseToKickPoint* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_DefenderTooCloseToKickPoint::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderTooCloseToKickPoint)
}
GameEvent_DefenderTooCloseToKickPoint::GameEvent_DefenderTooCloseToKickPoint(const GameEvent_DefenderTooCloseToKickPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_DefenderTooCloseToKickPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderTooCloseToKickPoint)
}

inline void GameEvent_DefenderTooCloseToKickPoint::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.distance_){0}
  };
}

GameEvent_DefenderTooCloseToKickPoint::~GameEvent_DefenderTooCloseToKickPoint() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderTooCloseToKickPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_DefenderTooCloseToKickPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_DefenderTooCloseToKickPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_DefenderTooCloseToKickPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderTooCloseToKickPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_DefenderTooCloseToKickPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_DefenderTooCloseToKickPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderTooCloseToKickPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderTooCloseToKickPoint)
  return target;
}

size_t GameEvent_DefenderTooCloseToKickPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderTooCloseToKickPoint)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_DefenderTooCloseToKickPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_DefenderTooCloseToKickPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_DefenderTooCloseToKickPoint::GetClassData() const { return &_class_data_; }


void GameEvent_DefenderTooCloseToKickPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_DefenderTooCloseToKickPoint*>(&to_msg);
  auto& from = static_cast<const GameEvent_DefenderTooCloseToKickPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderTooCloseToKickPoint)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_DefenderTooCloseToKickPoint::CopyFrom(const GameEvent_DefenderTooCloseToKickPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderTooCloseToKickPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderTooCloseToKickPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderTooCloseToKickPoint::InternalSwap(GameEvent_DefenderTooCloseToKickPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.distance_)
      + sizeof(GameEvent_DefenderTooCloseToKickPoint::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderTooCloseToKickPoint, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_DefenderTooCloseToKickPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[6]);
}

// ===================================================================

class GameEvent_BotCrashDrawn::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotCrashDrawn>()._impl_._has_bits_);
  static void set_has_bot_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bot_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotCrashDrawn* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_speed_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_crash_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::Vector2&
GameEvent_BotCrashDrawn::_Internal::location(const GameEvent_BotCrashDrawn* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotCrashDrawn::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotCrashDrawn)
}
GameEvent_BotCrashDrawn::GameEvent_BotCrashDrawn(const GameEvent_BotCrashDrawn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotCrashDrawn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.bot_yellow_){}
    , decltype(_impl_.bot_blue_){}
    , decltype(_impl_.crash_speed_){}
    , decltype(_impl_.speed_diff_){}
    , decltype(_impl_.crash_angle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.bot_yellow_, &from._impl_.bot_yellow_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crash_angle_) -
    reinterpret_cast<char*>(&_impl_.bot_yellow_)) + sizeof(_impl_.crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashDrawn)
}

inline void GameEvent_BotCrashDrawn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.bot_yellow_){0u}
    , decltype(_impl_.bot_blue_){0u}
    , decltype(_impl_.crash_speed_){0}
    , decltype(_impl_.speed_diff_){0}
    , decltype(_impl_.crash_angle_){0}
  };
}

GameEvent_BotCrashDrawn::~GameEvent_BotCrashDrawn() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashDrawn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotCrashDrawn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotCrashDrawn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotCrashDrawn::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashDrawn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.bot_yellow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crash_angle_) -
        reinterpret_cast<char*>(&_impl_.bot_yellow_)) + sizeof(_impl_.crash_angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotCrashDrawn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 bot_yellow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bot_yellow(&has_bits);
          _impl_.bot_yellow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 bot_blue = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_bot_blue(&has_bits);
          _impl_.bot_blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float crash_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_crash_speed(&has_bits);
          _impl_.crash_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_diff = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_speed_diff(&has_bits);
          _impl_.speed_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float crash_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_crash_angle(&has_bits);
          _impl_.crash_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotCrashDrawn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashDrawn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 bot_yellow = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bot_yellow(), target);
  }

  // optional uint32 bot_blue = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_bot_blue(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float crash_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_crash_speed(), target);
  }

  // optional float speed_diff = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_speed_diff(), target);
  }

  // optional float crash_angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_crash_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashDrawn)
  return target;
}

size_t GameEvent_BotCrashDrawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashDrawn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional uint32 bot_yellow = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bot_yellow());
    }

    // optional uint32 bot_blue = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bot_blue());
    }

    // optional float crash_speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotCrashDrawn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotCrashDrawn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotCrashDrawn::GetClassData() const { return &_class_data_; }


void GameEvent_BotCrashDrawn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotCrashDrawn*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotCrashDrawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashDrawn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bot_yellow_ = from._impl_.bot_yellow_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bot_blue_ = from._impl_.bot_blue_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.crash_speed_ = from._impl_.crash_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.speed_diff_ = from._impl_.speed_diff_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.crash_angle_ = from._impl_.crash_angle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotCrashDrawn::CopyFrom(const GameEvent_BotCrashDrawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashDrawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashDrawn::IsInitialized() const {
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashDrawn::InternalSwap(GameEvent_BotCrashDrawn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.crash_angle_)
      + sizeof(GameEvent_BotCrashDrawn::_impl_.crash_angle_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashDrawn, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotCrashDrawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[7]);
}

// ===================================================================

class GameEvent_BotCrashUnique::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotCrashUnique>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_violator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotCrashUnique* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_crash_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_speed_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_crash_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotCrashUnique::_Internal::location(const GameEvent_BotCrashUnique* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotCrashUnique::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotCrashUnique)
}
GameEvent_BotCrashUnique::GameEvent_BotCrashUnique(const GameEvent_BotCrashUnique& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotCrashUnique* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.violator_){}
    , decltype(_impl_.victim_){}
    , decltype(_impl_.crash_speed_){}
    , decltype(_impl_.speed_diff_){}
    , decltype(_impl_.crash_angle_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.crash_angle_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.crash_angle_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotCrashUnique)
}

inline void GameEvent_BotCrashUnique::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.violator_){0u}
    , decltype(_impl_.victim_){0u}
    , decltype(_impl_.crash_speed_){0}
    , decltype(_impl_.speed_diff_){0}
    , decltype(_impl_.crash_angle_){0}
  };
}

GameEvent_BotCrashUnique::~GameEvent_BotCrashUnique() {
  // @@protoc_insertion_point(destructor:GameEvent.BotCrashUnique)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotCrashUnique::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotCrashUnique::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotCrashUnique::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotCrashUnique)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.crash_angle_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.crash_angle_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotCrashUnique::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 violator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_violator(&has_bits);
          _impl_.violator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_victim(&has_bits);
          _impl_.victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float crash_speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_crash_speed(&has_bits);
          _impl_.crash_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float speed_diff = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_speed_diff(&has_bits);
          _impl_.speed_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float crash_angle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_crash_angle(&has_bits);
          _impl_.crash_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotCrashUnique::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotCrashUnique)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_victim(), target);
  }

  // optional .Vector2 location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float crash_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_crash_speed(), target);
  }

  // optional float speed_diff = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_speed_diff(), target);
  }

  // optional float crash_angle = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_crash_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotCrashUnique)
  return target;
}

size_t GameEvent_BotCrashUnique::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotCrashUnique)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000007cu) {
    // optional uint32 violator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_violator());
    }

    // optional uint32 victim = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim());
    }

    // optional float crash_speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float speed_diff = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float crash_angle = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotCrashUnique::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotCrashUnique::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotCrashUnique::GetClassData() const { return &_class_data_; }


void GameEvent_BotCrashUnique::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotCrashUnique*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotCrashUnique&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotCrashUnique)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.violator_ = from._impl_.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_ = from._impl_.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.crash_speed_ = from._impl_.crash_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.speed_diff_ = from._impl_.speed_diff_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.crash_angle_ = from._impl_.crash_angle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotCrashUnique::CopyFrom(const GameEvent_BotCrashUnique& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotCrashUnique)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotCrashUnique::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotCrashUnique::InternalSwap(GameEvent_BotCrashUnique* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.crash_angle_)
      + sizeof(GameEvent_BotCrashUnique::_impl_.crash_angle_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotCrashUnique, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotCrashUnique::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[8]);
}

// ===================================================================

class GameEvent_BotPushedBot::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotPushedBot>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_violator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotPushedBot* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pushed_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotPushedBot::_Internal::location(const GameEvent_BotPushedBot* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotPushedBot::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotPushedBot)
}
GameEvent_BotPushedBot::GameEvent_BotPushedBot(const GameEvent_BotPushedBot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotPushedBot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.violator_){}
    , decltype(_impl_.victim_){}
    , decltype(_impl_.pushed_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pushed_distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.pushed_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotPushedBot)
}

inline void GameEvent_BotPushedBot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.violator_){0u}
    , decltype(_impl_.victim_){0u}
    , decltype(_impl_.pushed_distance_){0}
  };
}

GameEvent_BotPushedBot::~GameEvent_BotPushedBot() {
  // @@protoc_insertion_point(destructor:GameEvent.BotPushedBot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotPushedBot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotPushedBot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotPushedBot::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotPushedBot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pushed_distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.pushed_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotPushedBot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 violator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_violator(&has_bits);
          _impl_.violator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_victim(&has_bits);
          _impl_.victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float pushed_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_pushed_distance(&has_bits);
          _impl_.pushed_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotPushedBot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotPushedBot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 violator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_violator(), target);
  }

  // optional uint32 victim = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_victim(), target);
  }

  // optional .Vector2 location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float pushed_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_pushed_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotPushedBot)
  return target;
}

size_t GameEvent_BotPushedBot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotPushedBot)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 violator = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_violator());
    }

    // optional uint32 victim = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim());
    }

    // optional float pushed_distance = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotPushedBot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotPushedBot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotPushedBot::GetClassData() const { return &_class_data_; }


void GameEvent_BotPushedBot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotPushedBot*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotPushedBot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotPushedBot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.violator_ = from._impl_.violator_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_ = from._impl_.victim_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pushed_distance_ = from._impl_.pushed_distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotPushedBot::CopyFrom(const GameEvent_BotPushedBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotPushedBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotPushedBot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotPushedBot::InternalSwap(GameEvent_BotPushedBot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.pushed_distance_)
      + sizeof(GameEvent_BotPushedBot::_impl_.pushed_distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotPushedBot, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotPushedBot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[9]);
}

// ===================================================================

class GameEvent_BotTippedOver::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotTippedOver>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_BotTippedOver* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& ball_location(const GameEvent_BotTippedOver* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_BotTippedOver::_Internal::location(const GameEvent_BotTippedOver* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_BotTippedOver::_Internal::ball_location(const GameEvent_BotTippedOver* msg) {
  return *msg->_impl_.ball_location_;
}
void GameEvent_BotTippedOver::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotTippedOver::clear_ball_location() {
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotTippedOver)
}
GameEvent_BotTippedOver::GameEvent_BotTippedOver(const GameEvent_BotTippedOver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotTippedOver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_ball_location()) {
    _this->_impl_.ball_location_ = new ::Vector2(*from._impl_.ball_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotTippedOver)
}

inline void GameEvent_BotTippedOver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_BotTippedOver::~GameEvent_BotTippedOver() {
  // @@protoc_insertion_point(destructor:GameEvent.BotTippedOver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotTippedOver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.ball_location_;
}

void GameEvent_BotTippedOver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotTippedOver::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotTippedOver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotTippedOver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotTippedOver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotTippedOver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 ball_location = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ball_location(this),
        _Internal::ball_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotTippedOver)
  return target;
}

size_t GameEvent_BotTippedOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotTippedOver)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 ball_location = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ball_location_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotTippedOver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotTippedOver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotTippedOver::GetClassData() const { return &_class_data_; }


void GameEvent_BotTippedOver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotTippedOver*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotTippedOver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotTippedOver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ball_location()->::Vector2::MergeFrom(
          from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotTippedOver::CopyFrom(const GameEvent_BotTippedOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotTippedOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotTippedOver::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!_impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotTippedOver::InternalSwap(GameEvent_BotTippedOver* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.by_bot_)
      + sizeof(GameEvent_BotTippedOver::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotTippedOver, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotTippedOver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[10]);
}

// ===================================================================

class GameEvent_DefenderInDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_DefenderInDefenseArea>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_DefenderInDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_DefenderInDefenseArea::_Internal::location(const GameEvent_DefenderInDefenseArea* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_DefenderInDefenseArea::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderInDefenseArea)
}
GameEvent_DefenderInDefenseArea::GameEvent_DefenderInDefenseArea(const GameEvent_DefenderInDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_DefenderInDefenseArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseArea)
}

inline void GameEvent_DefenderInDefenseArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.distance_){0}
  };
}

GameEvent_DefenderInDefenseArea::~GameEvent_DefenderInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_DefenderInDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_DefenderInDefenseArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_DefenderInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_DefenderInDefenseArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_DefenderInDefenseArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseArea)
  return target;
}

size_t GameEvent_DefenderInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_DefenderInDefenseArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_DefenderInDefenseArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_DefenderInDefenseArea::GetClassData() const { return &_class_data_; }


void GameEvent_DefenderInDefenseArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_DefenderInDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_DefenderInDefenseArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_DefenderInDefenseArea::CopyFrom(const GameEvent_DefenderInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseArea::InternalSwap(GameEvent_DefenderInDefenseArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.distance_)
      + sizeof(GameEvent_DefenderInDefenseArea::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_DefenderInDefenseArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[11]);
}

// ===================================================================

class GameEvent_DefenderInDefenseAreaPartially::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_DefenderInDefenseAreaPartially>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_DefenderInDefenseAreaPartially* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& ball_location(const GameEvent_DefenderInDefenseAreaPartially* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_DefenderInDefenseAreaPartially::_Internal::location(const GameEvent_DefenderInDefenseAreaPartially* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_DefenderInDefenseAreaPartially::_Internal::ball_location(const GameEvent_DefenderInDefenseAreaPartially* msg) {
  return *msg->_impl_.ball_location_;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_DefenderInDefenseAreaPartially::clear_ball_location() {
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.DefenderInDefenseAreaPartially)
}
GameEvent_DefenderInDefenseAreaPartially::GameEvent_DefenderInDefenseAreaPartially(const GameEvent_DefenderInDefenseAreaPartially& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_DefenderInDefenseAreaPartially* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_ball_location()) {
    _this->_impl_.ball_location_ = new ::Vector2(*from._impl_.ball_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.DefenderInDefenseAreaPartially)
}

inline void GameEvent_DefenderInDefenseAreaPartially::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.distance_){0}
  };
}

GameEvent_DefenderInDefenseAreaPartially::~GameEvent_DefenderInDefenseAreaPartially() {
  // @@protoc_insertion_point(destructor:GameEvent.DefenderInDefenseAreaPartially)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_DefenderInDefenseAreaPartially::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.ball_location_;
}

void GameEvent_DefenderInDefenseAreaPartially::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_DefenderInDefenseAreaPartially::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.DefenderInDefenseAreaPartially)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_DefenderInDefenseAreaPartially::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_DefenderInDefenseAreaPartially::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.DefenderInDefenseAreaPartially)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional .Vector2 ball_location = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ball_location(this),
        _Internal::ball_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.DefenderInDefenseAreaPartially)
  return target;
}

size_t GameEvent_DefenderInDefenseAreaPartially::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.DefenderInDefenseAreaPartially)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 ball_location = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ball_location_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_DefenderInDefenseAreaPartially::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_DefenderInDefenseAreaPartially::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_DefenderInDefenseAreaPartially::GetClassData() const { return &_class_data_; }


void GameEvent_DefenderInDefenseAreaPartially::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_DefenderInDefenseAreaPartially*>(&to_msg);
  auto& from = static_cast<const GameEvent_DefenderInDefenseAreaPartially&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.DefenderInDefenseAreaPartially)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ball_location()->::Vector2::MergeFrom(
          from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_DefenderInDefenseAreaPartially::CopyFrom(const GameEvent_DefenderInDefenseAreaPartially& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.DefenderInDefenseAreaPartially)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_DefenderInDefenseAreaPartially::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!_impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_DefenderInDefenseAreaPartially::InternalSwap(GameEvent_DefenderInDefenseAreaPartially* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.distance_)
      + sizeof(GameEvent_DefenderInDefenseAreaPartially::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_DefenderInDefenseAreaPartially, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_DefenderInDefenseAreaPartially::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[12]);
}

// ===================================================================

class GameEvent_AttackerTouchedBallInDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerTouchedBallInDefenseArea>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_AttackerTouchedBallInDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerTouchedBallInDefenseArea::_Internal::location(const GameEvent_AttackerTouchedBallInDefenseArea* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_AttackerTouchedBallInDefenseArea::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}
GameEvent_AttackerTouchedBallInDefenseArea::GameEvent_AttackerTouchedBallInDefenseArea(const GameEvent_AttackerTouchedBallInDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_AttackerTouchedBallInDefenseArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedBallInDefenseArea)
}

inline void GameEvent_AttackerTouchedBallInDefenseArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.distance_){0}
  };
}

GameEvent_AttackerTouchedBallInDefenseArea::~GameEvent_AttackerTouchedBallInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedBallInDefenseArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_AttackerTouchedBallInDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_AttackerTouchedBallInDefenseArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_AttackerTouchedBallInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedBallInDefenseArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerTouchedBallInDefenseArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_AttackerTouchedBallInDefenseArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedBallInDefenseArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedBallInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedBallInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedBallInDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_AttackerTouchedBallInDefenseArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_AttackerTouchedBallInDefenseArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_AttackerTouchedBallInDefenseArea::GetClassData() const { return &_class_data_; }


void GameEvent_AttackerTouchedBallInDefenseArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerTouchedBallInDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerTouchedBallInDefenseArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerTouchedBallInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedBallInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedBallInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedBallInDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedBallInDefenseArea::InternalSwap(GameEvent_AttackerTouchedBallInDefenseArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.distance_)
      + sizeof(GameEvent_AttackerTouchedBallInDefenseArea::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedBallInDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerTouchedBallInDefenseArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[13]);
}

// ===================================================================

class GameEvent_BotKickedBallTooFast::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotKickedBallTooFast>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotKickedBallTooFast* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_initial_ball_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_chipped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotKickedBallTooFast::_Internal::location(const GameEvent_BotKickedBallTooFast* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotKickedBallTooFast::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotKickedBallTooFast)
}
GameEvent_BotKickedBallTooFast::GameEvent_BotKickedBallTooFast(const GameEvent_BotKickedBallTooFast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotKickedBallTooFast* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.initial_ball_speed_){}
    , decltype(_impl_.chipped_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.chipped_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.chipped_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotKickedBallTooFast)
}

inline void GameEvent_BotKickedBallTooFast::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.initial_ball_speed_){0}
    , decltype(_impl_.chipped_){false}
  };
}

GameEvent_BotKickedBallTooFast::~GameEvent_BotKickedBallTooFast() {
  // @@protoc_insertion_point(destructor:GameEvent.BotKickedBallTooFast)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotKickedBallTooFast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotKickedBallTooFast::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotKickedBallTooFast::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotKickedBallTooFast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.chipped_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.chipped_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotKickedBallTooFast::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float initial_ball_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_initial_ball_speed(&has_bits);
          _impl_.initial_ball_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool chipped = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_chipped(&has_bits);
          _impl_.chipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotKickedBallTooFast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotKickedBallTooFast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float initial_ball_speed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_initial_ball_speed(), target);
  }

  // optional bool chipped = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_chipped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotKickedBallTooFast)
  return target;
}

size_t GameEvent_BotKickedBallTooFast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotKickedBallTooFast)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float initial_ball_speed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional bool chipped = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotKickedBallTooFast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotKickedBallTooFast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotKickedBallTooFast::GetClassData() const { return &_class_data_; }


void GameEvent_BotKickedBallTooFast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotKickedBallTooFast*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotKickedBallTooFast&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotKickedBallTooFast)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.initial_ball_speed_ = from._impl_.initial_ball_speed_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.chipped_ = from._impl_.chipped_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotKickedBallTooFast::CopyFrom(const GameEvent_BotKickedBallTooFast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotKickedBallTooFast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotKickedBallTooFast::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotKickedBallTooFast::InternalSwap(GameEvent_BotKickedBallTooFast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.chipped_)
      + sizeof(GameEvent_BotKickedBallTooFast::_impl_.chipped_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotKickedBallTooFast, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotKickedBallTooFast::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[14]);
}

// ===================================================================

class GameEvent_BotDribbledBallTooFar::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotDribbledBallTooFar>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& start(const GameEvent_BotDribbledBallTooFar* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& end(const GameEvent_BotDribbledBallTooFar* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_BotDribbledBallTooFar::_Internal::start(const GameEvent_BotDribbledBallTooFar* msg) {
  return *msg->_impl_.start_;
}
const ::Vector2&
GameEvent_BotDribbledBallTooFar::_Internal::end(const GameEvent_BotDribbledBallTooFar* msg) {
  return *msg->_impl_.end_;
}
void GameEvent_BotDribbledBallTooFar::clear_start() {
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_BotDribbledBallTooFar::clear_end() {
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotDribbledBallTooFar)
}
GameEvent_BotDribbledBallTooFar::GameEvent_BotDribbledBallTooFar(const GameEvent_BotDribbledBallTooFar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotDribbledBallTooFar* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    _this->_impl_.start_ = new ::Vector2(*from._impl_.start_);
  }
  if (from._internal_has_end()) {
    _this->_impl_.end_ = new ::Vector2(*from._impl_.end_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotDribbledBallTooFar)
}

inline void GameEvent_BotDribbledBallTooFar::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.start_){nullptr}
    , decltype(_impl_.end_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_BotDribbledBallTooFar::~GameEvent_BotDribbledBallTooFar() {
  // @@protoc_insertion_point(destructor:GameEvent.BotDribbledBallTooFar)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotDribbledBallTooFar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.start_;
  if (this != internal_default_instance()) delete _impl_.end_;
}

void GameEvent_BotDribbledBallTooFar::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotDribbledBallTooFar::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotDribbledBallTooFar)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.start_ != nullptr);
      _impl_.start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.end_ != nullptr);
      _impl_.end_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotDribbledBallTooFar::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 end = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotDribbledBallTooFar::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotDribbledBallTooFar)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 start = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::start(this),
        _Internal::start(this).GetCachedSize(), target, stream);
  }

  // optional .Vector2 end = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::end(this),
        _Internal::end(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotDribbledBallTooFar)
  return target;
}

size_t GameEvent_BotDribbledBallTooFar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotDribbledBallTooFar)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 start = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_);
    }

    // optional .Vector2 end = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_);
    }

  }
  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotDribbledBallTooFar::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotDribbledBallTooFar::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotDribbledBallTooFar::GetClassData() const { return &_class_data_; }


void GameEvent_BotDribbledBallTooFar::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotDribbledBallTooFar*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotDribbledBallTooFar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotDribbledBallTooFar)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start()->::Vector2::MergeFrom(
          from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end()->::Vector2::MergeFrom(
          from._internal_end());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotDribbledBallTooFar::CopyFrom(const GameEvent_BotDribbledBallTooFar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotDribbledBallTooFar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotDribbledBallTooFar::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_start()) {
    if (!_impl_.start_->IsInitialized()) return false;
  }
  if (_internal_has_end()) {
    if (!_impl_.end_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotDribbledBallTooFar::InternalSwap(GameEvent_BotDribbledBallTooFar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.by_bot_)
      + sizeof(GameEvent_BotDribbledBallTooFar::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotDribbledBallTooFar, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotDribbledBallTooFar::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[15]);
}

// ===================================================================

class GameEvent_AttackerTouchedOpponentInDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerTouchedOpponentInDefenseArea>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_victim(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_AttackerTouchedOpponentInDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerTouchedOpponentInDefenseArea::_Internal::location(const GameEvent_AttackerTouchedOpponentInDefenseArea* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_AttackerTouchedOpponentInDefenseArea::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}
GameEvent_AttackerTouchedOpponentInDefenseArea::GameEvent_AttackerTouchedOpponentInDefenseArea(const GameEvent_AttackerTouchedOpponentInDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_AttackerTouchedOpponentInDefenseArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.victim_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.victim_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.victim_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
}

inline void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.victim_){0u}
  };
}

GameEvent_AttackerTouchedOpponentInDefenseArea::~GameEvent_AttackerTouchedOpponentInDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_AttackerTouchedOpponentInDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.victim_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.victim_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 victim = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_victim(&has_bits);
          _impl_.victim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_AttackerTouchedOpponentInDefenseArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional uint32 victim = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_victim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTouchedOpponentInDefenseArea)
  return target;
}

size_t GameEvent_AttackerTouchedOpponentInDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional uint32 victim = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_victim());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_AttackerTouchedOpponentInDefenseArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_AttackerTouchedOpponentInDefenseArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_AttackerTouchedOpponentInDefenseArea::GetClassData() const { return &_class_data_; }


void GameEvent_AttackerTouchedOpponentInDefenseArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerTouchedOpponentInDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerTouchedOpponentInDefenseArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.victim_ = from._impl_.victim_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::CopyFrom(const GameEvent_AttackerTouchedOpponentInDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTouchedOpponentInDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTouchedOpponentInDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTouchedOpponentInDefenseArea::InternalSwap(GameEvent_AttackerTouchedOpponentInDefenseArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.victim_)
      + sizeof(GameEvent_AttackerTouchedOpponentInDefenseArea::_impl_.victim_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTouchedOpponentInDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerTouchedOpponentInDefenseArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[16]);
}

// ===================================================================

class GameEvent_AttackerDoubleTouchedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerDoubleTouchedBall>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_AttackerDoubleTouchedBall* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerDoubleTouchedBall::_Internal::location(const GameEvent_AttackerDoubleTouchedBall* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_AttackerDoubleTouchedBall::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerDoubleTouchedBall)
}
GameEvent_AttackerDoubleTouchedBall::GameEvent_AttackerDoubleTouchedBall(const GameEvent_AttackerDoubleTouchedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_AttackerDoubleTouchedBall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerDoubleTouchedBall)
}

inline void GameEvent_AttackerDoubleTouchedBall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_AttackerDoubleTouchedBall::~GameEvent_AttackerDoubleTouchedBall() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerDoubleTouchedBall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_AttackerDoubleTouchedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_AttackerDoubleTouchedBall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_AttackerDoubleTouchedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerDoubleTouchedBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerDoubleTouchedBall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_AttackerDoubleTouchedBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerDoubleTouchedBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerDoubleTouchedBall)
  return target;
}

size_t GameEvent_AttackerDoubleTouchedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerDoubleTouchedBall)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_AttackerDoubleTouchedBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_AttackerDoubleTouchedBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_AttackerDoubleTouchedBall::GetClassData() const { return &_class_data_; }


void GameEvent_AttackerDoubleTouchedBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerDoubleTouchedBall*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerDoubleTouchedBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerDoubleTouchedBall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerDoubleTouchedBall::CopyFrom(const GameEvent_AttackerDoubleTouchedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerDoubleTouchedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerDoubleTouchedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerDoubleTouchedBall::InternalSwap(GameEvent_AttackerDoubleTouchedBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.by_bot_)
      + sizeof(GameEvent_AttackerDoubleTouchedBall::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerDoubleTouchedBall, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerDoubleTouchedBall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[17]);
}

// ===================================================================

class GameEvent_AttackerTooCloseToDefenseArea::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_AttackerTooCloseToDefenseArea>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& location(const GameEvent_AttackerTooCloseToDefenseArea* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Vector2& ball_location(const GameEvent_AttackerTooCloseToDefenseArea* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::Vector2&
GameEvent_AttackerTooCloseToDefenseArea::_Internal::location(const GameEvent_AttackerTooCloseToDefenseArea* msg) {
  return *msg->_impl_.location_;
}
const ::Vector2&
GameEvent_AttackerTooCloseToDefenseArea::_Internal::ball_location(const GameEvent_AttackerTooCloseToDefenseArea* msg) {
  return *msg->_impl_.ball_location_;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GameEvent_AttackerTooCloseToDefenseArea::clear_ball_location() {
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}
GameEvent_AttackerTooCloseToDefenseArea::GameEvent_AttackerTooCloseToDefenseArea(const GameEvent_AttackerTooCloseToDefenseArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_AttackerTooCloseToDefenseArea* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  if (from._internal_has_ball_location()) {
    _this->_impl_.ball_location_ = new ::Vector2(*from._impl_.ball_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.AttackerTooCloseToDefenseArea)
}

inline void GameEvent_AttackerTooCloseToDefenseArea::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.distance_){0}
  };
}

GameEvent_AttackerTooCloseToDefenseArea::~GameEvent_AttackerTooCloseToDefenseArea() {
  // @@protoc_insertion_point(destructor:GameEvent.AttackerTooCloseToDefenseArea)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_AttackerTooCloseToDefenseArea::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.ball_location_;
}

void GameEvent_AttackerTooCloseToDefenseArea::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_AttackerTooCloseToDefenseArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.AttackerTooCloseToDefenseArea)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ball_location_ != nullptr);
      _impl_.ball_location_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_AttackerTooCloseToDefenseArea::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_AttackerTooCloseToDefenseArea::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.AttackerTooCloseToDefenseArea)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional .Vector2 ball_location = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::ball_location(this),
        _Internal::ball_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.AttackerTooCloseToDefenseArea)
  return target;
}

size_t GameEvent_AttackerTooCloseToDefenseArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.AttackerTooCloseToDefenseArea)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional .Vector2 ball_location = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ball_location_);
    }

  }
  if (cached_has_bits & 0x00000018u) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_AttackerTooCloseToDefenseArea::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_AttackerTooCloseToDefenseArea::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_AttackerTooCloseToDefenseArea::GetClassData() const { return &_class_data_; }


void GameEvent_AttackerTooCloseToDefenseArea::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_AttackerTooCloseToDefenseArea*>(&to_msg);
  auto& from = static_cast<const GameEvent_AttackerTooCloseToDefenseArea&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ball_location()->::Vector2::MergeFrom(
          from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_AttackerTooCloseToDefenseArea::CopyFrom(const GameEvent_AttackerTooCloseToDefenseArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.AttackerTooCloseToDefenseArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_AttackerTooCloseToDefenseArea::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  if (_internal_has_ball_location()) {
    if (!_impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_AttackerTooCloseToDefenseArea::InternalSwap(GameEvent_AttackerTooCloseToDefenseArea* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.distance_)
      + sizeof(GameEvent_AttackerTooCloseToDefenseArea::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_AttackerTooCloseToDefenseArea, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_AttackerTooCloseToDefenseArea::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[18]);
}

// ===================================================================

class GameEvent_BotHeldBallDeliberately::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotHeldBallDeliberately>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotHeldBallDeliberately* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotHeldBallDeliberately::_Internal::location(const GameEvent_BotHeldBallDeliberately* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotHeldBallDeliberately::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotHeldBallDeliberately)
}
GameEvent_BotHeldBallDeliberately::GameEvent_BotHeldBallDeliberately(const GameEvent_BotHeldBallDeliberately& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotHeldBallDeliberately* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotHeldBallDeliberately)
}

inline void GameEvent_BotHeldBallDeliberately::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
    , decltype(_impl_.duration_){0}
  };
}

GameEvent_BotHeldBallDeliberately::~GameEvent_BotHeldBallDeliberately() {
  // @@protoc_insertion_point(destructor:GameEvent.BotHeldBallDeliberately)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotHeldBallDeliberately::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotHeldBallDeliberately::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotHeldBallDeliberately::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotHeldBallDeliberately)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotHeldBallDeliberately::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotHeldBallDeliberately::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotHeldBallDeliberately)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotHeldBallDeliberately)
  return target;
}

size_t GameEvent_BotHeldBallDeliberately::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotHeldBallDeliberately)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional uint32 by_bot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotHeldBallDeliberately::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotHeldBallDeliberately::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotHeldBallDeliberately::GetClassData() const { return &_class_data_; }


void GameEvent_BotHeldBallDeliberately::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotHeldBallDeliberately*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotHeldBallDeliberately&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotHeldBallDeliberately)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotHeldBallDeliberately::CopyFrom(const GameEvent_BotHeldBallDeliberately& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotHeldBallDeliberately)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotHeldBallDeliberately::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotHeldBallDeliberately::InternalSwap(GameEvent_BotHeldBallDeliberately* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.duration_)
      + sizeof(GameEvent_BotHeldBallDeliberately::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotHeldBallDeliberately, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotHeldBallDeliberately::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[19]);
}

// ===================================================================

class GameEvent_BotInterferedPlacement::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotInterferedPlacement>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_by_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Vector2& location(const GameEvent_BotInterferedPlacement* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BotInterferedPlacement::_Internal::location(const GameEvent_BotInterferedPlacement* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BotInterferedPlacement::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotInterferedPlacement)
}
GameEvent_BotInterferedPlacement::GameEvent_BotInterferedPlacement(const GameEvent_BotInterferedPlacement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotInterferedPlacement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.by_bot_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.by_bot_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotInterferedPlacement)
}

inline void GameEvent_BotInterferedPlacement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.by_bot_){0u}
  };
}

GameEvent_BotInterferedPlacement::~GameEvent_BotInterferedPlacement() {
  // @@protoc_insertion_point(destructor:GameEvent.BotInterferedPlacement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotInterferedPlacement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BotInterferedPlacement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotInterferedPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotInterferedPlacement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.by_bot_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.by_bot_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotInterferedPlacement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 by_bot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_by_bot(&has_bits);
          _impl_.by_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotInterferedPlacement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotInterferedPlacement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_by_bot(), target);
  }

  // optional .Vector2 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotInterferedPlacement)
  return target;
}

size_t GameEvent_BotInterferedPlacement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotInterferedPlacement)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // optional uint32 by_bot = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_by_bot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotInterferedPlacement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotInterferedPlacement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotInterferedPlacement::GetClassData() const { return &_class_data_; }


void GameEvent_BotInterferedPlacement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotInterferedPlacement*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotInterferedPlacement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotInterferedPlacement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.by_bot_ = from._impl_.by_bot_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotInterferedPlacement::CopyFrom(const GameEvent_BotInterferedPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotInterferedPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotInterferedPlacement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BotInterferedPlacement::InternalSwap(GameEvent_BotInterferedPlacement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.by_bot_)
      + sizeof(GameEvent_BotInterferedPlacement::_impl_.by_bot_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BotInterferedPlacement, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotInterferedPlacement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[20]);
}

// ===================================================================

class GameEvent_MultipleCards::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_MultipleCards>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultipleCards::GameEvent_MultipleCards(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultipleCards)
}
GameEvent_MultipleCards::GameEvent_MultipleCards(const GameEvent_MultipleCards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_MultipleCards* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleCards)
}

inline void GameEvent_MultipleCards::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_MultipleCards::~GameEvent_MultipleCards() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleCards)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_MultipleCards::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_MultipleCards::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_MultipleCards::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleCards)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_MultipleCards::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_MultipleCards::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleCards)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleCards)
  return target;
}

size_t GameEvent_MultipleCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleCards)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_MultipleCards::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_MultipleCards::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_MultipleCards::GetClassData() const { return &_class_data_; }


void GameEvent_MultipleCards::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_MultipleCards*>(&to_msg);
  auto& from = static_cast<const GameEvent_MultipleCards&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleCards)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _this->_internal_set_by_team(from._internal_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_MultipleCards::CopyFrom(const GameEvent_MultipleCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleCards::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_MultipleCards::InternalSwap(GameEvent_MultipleCards* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_MultipleCards::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[21]);
}

// ===================================================================

class GameEvent_MultipleFouls::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_MultipleFouls>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultipleFouls::GameEvent_MultipleFouls(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultipleFouls)
}
GameEvent_MultipleFouls::GameEvent_MultipleFouls(const GameEvent_MultipleFouls& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_MultipleFouls* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caused_game_events_){from._impl_.caused_game_events_}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultipleFouls)
}

inline void GameEvent_MultipleFouls::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.caused_game_events_){arena}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_MultipleFouls::~GameEvent_MultipleFouls() {
  // @@protoc_insertion_point(destructor:GameEvent.MultipleFouls)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_MultipleFouls::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.caused_game_events_.~RepeatedPtrField();
}

void GameEvent_MultipleFouls::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_MultipleFouls::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultipleFouls)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.caused_game_events_.Clear();
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_MultipleFouls::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .GameEvent caused_game_events = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_caused_game_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_MultipleFouls::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultipleFouls)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // repeated .GameEvent caused_game_events = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_caused_game_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_caused_game_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultipleFouls)
  return target;
}

size_t GameEvent_MultipleFouls::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultipleFouls)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameEvent caused_game_events = 2;
  total_size += 1UL * this->_internal_caused_game_events_size();
  for (const auto& msg : this->_impl_.caused_game_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_MultipleFouls::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_MultipleFouls::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_MultipleFouls::GetClassData() const { return &_class_data_; }


void GameEvent_MultipleFouls::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_MultipleFouls*>(&to_msg);
  auto& from = static_cast<const GameEvent_MultipleFouls&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultipleFouls)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.caused_game_events_.MergeFrom(from._impl_.caused_game_events_);
  if (from._internal_has_by_team()) {
    _this->_internal_set_by_team(from._internal_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_MultipleFouls::CopyFrom(const GameEvent_MultipleFouls& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultipleFouls)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultipleFouls::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.caused_game_events_))
    return false;
  return true;
}

void GameEvent_MultipleFouls::InternalSwap(GameEvent_MultipleFouls* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.caused_game_events_.InternalSwap(&other->_impl_.caused_game_events_);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_MultipleFouls::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[22]);
}

// ===================================================================

class GameEvent_MultiplePlacementFailures::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_MultiplePlacementFailures>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.MultiplePlacementFailures)
}
GameEvent_MultiplePlacementFailures::GameEvent_MultiplePlacementFailures(const GameEvent_MultiplePlacementFailures& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_MultiplePlacementFailures* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.MultiplePlacementFailures)
}

inline void GameEvent_MultiplePlacementFailures::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_MultiplePlacementFailures::~GameEvent_MultiplePlacementFailures() {
  // @@protoc_insertion_point(destructor:GameEvent.MultiplePlacementFailures)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_MultiplePlacementFailures::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_MultiplePlacementFailures::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_MultiplePlacementFailures::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.MultiplePlacementFailures)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_MultiplePlacementFailures::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_MultiplePlacementFailures::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.MultiplePlacementFailures)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.MultiplePlacementFailures)
  return target;
}

size_t GameEvent_MultiplePlacementFailures::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.MultiplePlacementFailures)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_MultiplePlacementFailures::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_MultiplePlacementFailures::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_MultiplePlacementFailures::GetClassData() const { return &_class_data_; }


void GameEvent_MultiplePlacementFailures::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_MultiplePlacementFailures*>(&to_msg);
  auto& from = static_cast<const GameEvent_MultiplePlacementFailures&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.MultiplePlacementFailures)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _this->_internal_set_by_team(from._internal_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_MultiplePlacementFailures::CopyFrom(const GameEvent_MultiplePlacementFailures& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.MultiplePlacementFailures)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_MultiplePlacementFailures::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_MultiplePlacementFailures::InternalSwap(GameEvent_MultiplePlacementFailures* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_MultiplePlacementFailures::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[23]);
}

// ===================================================================

class GameEvent_KickTimeout::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_KickTimeout>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_KickTimeout* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_KickTimeout::_Internal::location(const GameEvent_KickTimeout* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_KickTimeout::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_KickTimeout::GameEvent_KickTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.KickTimeout)
}
GameEvent_KickTimeout::GameEvent_KickTimeout(const GameEvent_KickTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_KickTimeout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.time_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KickTimeout)
}

inline void GameEvent_KickTimeout::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.time_){0}
  };
}

GameEvent_KickTimeout::~GameEvent_KickTimeout() {
  // @@protoc_insertion_point(destructor:GameEvent.KickTimeout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_KickTimeout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_KickTimeout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_KickTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KickTimeout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.time_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_KickTimeout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_KickTimeout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KickTimeout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KickTimeout)
  return target;
}

size_t GameEvent_KickTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KickTimeout)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // optional float time = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_KickTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_KickTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_KickTimeout::GetClassData() const { return &_class_data_; }


void GameEvent_KickTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_KickTimeout*>(&to_msg);
  auto& from = static_cast<const GameEvent_KickTimeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KickTimeout)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_KickTimeout::CopyFrom(const GameEvent_KickTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KickTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KickTimeout::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KickTimeout::InternalSwap(GameEvent_KickTimeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.time_)
      + sizeof(GameEvent_KickTimeout::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_KickTimeout, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_KickTimeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[24]);
}

// ===================================================================

class GameEvent_NoProgressInGame::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_NoProgressInGame>()._impl_._has_bits_);
  static const ::Vector2& location(const GameEvent_NoProgressInGame* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Vector2&
GameEvent_NoProgressInGame::_Internal::location(const GameEvent_NoProgressInGame* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_NoProgressInGame::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.NoProgressInGame)
}
GameEvent_NoProgressInGame::GameEvent_NoProgressInGame(const GameEvent_NoProgressInGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_NoProgressInGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  _this->_impl_.time_ = from._impl_.time_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.NoProgressInGame)
}

inline void GameEvent_NoProgressInGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.time_){0}
  };
}

GameEvent_NoProgressInGame::~GameEvent_NoProgressInGame() {
  // @@protoc_insertion_point(destructor:GameEvent.NoProgressInGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_NoProgressInGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_NoProgressInGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_NoProgressInGame::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.NoProgressInGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_.time_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_NoProgressInGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .Vector2 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_time(&has_bits);
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_NoProgressInGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.NoProgressInGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .Vector2 location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.NoProgressInGame)
  return target;
}

size_t GameEvent_NoProgressInGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.NoProgressInGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .Vector2 location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // optional float time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_NoProgressInGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_NoProgressInGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_NoProgressInGame::GetClassData() const { return &_class_data_; }


void GameEvent_NoProgressInGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_NoProgressInGame*>(&to_msg);
  auto& from = static_cast<const GameEvent_NoProgressInGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.NoProgressInGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_ = from._impl_.time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_NoProgressInGame::CopyFrom(const GameEvent_NoProgressInGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.NoProgressInGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_NoProgressInGame::IsInitialized() const {
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_NoProgressInGame::InternalSwap(GameEvent_NoProgressInGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.time_)
      + sizeof(GameEvent_NoProgressInGame::_impl_.time_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_NoProgressInGame, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_NoProgressInGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[25]);
}

// ===================================================================

class GameEvent_PlacementFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_PlacementFailed>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_remaining_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_PlacementFailed::GameEvent_PlacementFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PlacementFailed)
}
GameEvent_PlacementFailed::GameEvent_PlacementFailed(const GameEvent_PlacementFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_PlacementFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.remaining_distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.remaining_distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.remaining_distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementFailed)
}

inline void GameEvent_PlacementFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.remaining_distance_){0}
  };
}

GameEvent_PlacementFailed::~GameEvent_PlacementFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_PlacementFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_PlacementFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_PlacementFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.remaining_distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.remaining_distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_PlacementFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float remaining_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_remaining_distance(&has_bits);
          _impl_.remaining_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_PlacementFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional float remaining_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_remaining_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementFailed)
  return target;
}

size_t GameEvent_PlacementFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementFailed)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float remaining_distance = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_PlacementFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_PlacementFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_PlacementFailed::GetClassData() const { return &_class_data_; }


void GameEvent_PlacementFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_PlacementFailed*>(&to_msg);
  auto& from = static_cast<const GameEvent_PlacementFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.remaining_distance_ = from._impl_.remaining_distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_PlacementFailed::CopyFrom(const GameEvent_PlacementFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementFailed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_PlacementFailed::InternalSwap(GameEvent_PlacementFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.remaining_distance_)
      + sizeof(GameEvent_PlacementFailed::_impl_.remaining_distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PlacementFailed, _impl_.by_team_)>(
          reinterpret_cast<char*>(&_impl_.by_team_),
          reinterpret_cast<char*>(&other->_impl_.by_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_PlacementFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[26]);
}

// ===================================================================

class GameEvent_UnsportingBehaviorMinor::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_UnsportingBehaviorMinor>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.UnsportingBehaviorMinor)
}
GameEvent_UnsportingBehaviorMinor::GameEvent_UnsportingBehaviorMinor(const GameEvent_UnsportingBehaviorMinor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_UnsportingBehaviorMinor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMinor)
}

inline void GameEvent_UnsportingBehaviorMinor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.by_team_){0}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameEvent_UnsportingBehaviorMinor::~GameEvent_UnsportingBehaviorMinor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMinor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_UnsportingBehaviorMinor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void GameEvent_UnsportingBehaviorMinor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_UnsportingBehaviorMinor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMinor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_UnsportingBehaviorMinor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "GameEvent.UnsportingBehaviorMinor.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_UnsportingBehaviorMinor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMinor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMinor.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMinor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMinor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (_internal_has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (_internal_has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMinor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMinor)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_UnsportingBehaviorMinor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_UnsportingBehaviorMinor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_UnsportingBehaviorMinor::GetClassData() const { return &_class_data_; }


void GameEvent_UnsportingBehaviorMinor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_UnsportingBehaviorMinor*>(&to_msg);
  auto& from = static_cast<const GameEvent_UnsportingBehaviorMinor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMinor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_UnsportingBehaviorMinor::CopyFrom(const GameEvent_UnsportingBehaviorMinor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMinor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMinor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMinor::InternalSwap(GameEvent_UnsportingBehaviorMinor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_UnsportingBehaviorMinor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[27]);
}

// ===================================================================

class GameEvent_UnsportingBehaviorMajor::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_UnsportingBehaviorMajor>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.UnsportingBehaviorMajor)
}
GameEvent_UnsportingBehaviorMajor::GameEvent_UnsportingBehaviorMajor(const GameEvent_UnsportingBehaviorMajor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_UnsportingBehaviorMajor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_reason()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.UnsportingBehaviorMajor)
}

inline void GameEvent_UnsportingBehaviorMajor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.reason_){}
    , decltype(_impl_.by_team_){0}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameEvent_UnsportingBehaviorMajor::~GameEvent_UnsportingBehaviorMajor() {
  // @@protoc_insertion_point(destructor:GameEvent.UnsportingBehaviorMajor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_UnsportingBehaviorMajor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void GameEvent_UnsportingBehaviorMajor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_UnsportingBehaviorMajor::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.UnsportingBehaviorMajor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.reason_.ClearNonDefaultToEmpty();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_UnsportingBehaviorMajor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "GameEvent.UnsportingBehaviorMajor.reason");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_UnsportingBehaviorMajor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.UnsportingBehaviorMajor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // required string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.UnsportingBehaviorMajor.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.UnsportingBehaviorMajor)
  return target;
}

size_t GameEvent_UnsportingBehaviorMajor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (_internal_has_reason()) {
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (_internal_has_by_team()) {
    // required .Team by_team = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }

  return total_size;
}
size_t GameEvent_UnsportingBehaviorMajor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.UnsportingBehaviorMajor)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string reason = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());

    // required .Team by_team = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_UnsportingBehaviorMajor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_UnsportingBehaviorMajor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_UnsportingBehaviorMajor::GetClassData() const { return &_class_data_; }


void GameEvent_UnsportingBehaviorMajor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_UnsportingBehaviorMajor*>(&to_msg);
  auto& from = static_cast<const GameEvent_UnsportingBehaviorMajor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.UnsportingBehaviorMajor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_reason(from._internal_reason());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_UnsportingBehaviorMajor::CopyFrom(const GameEvent_UnsportingBehaviorMajor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.UnsportingBehaviorMajor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_UnsportingBehaviorMajor::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_UnsportingBehaviorMajor::InternalSwap(GameEvent_UnsportingBehaviorMajor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_UnsportingBehaviorMajor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[28]);
}

// ===================================================================

class GameEvent_KeeperHeldBall::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_KeeperHeldBall>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_KeeperHeldBall* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_KeeperHeldBall::_Internal::location(const GameEvent_KeeperHeldBall* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_KeeperHeldBall::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.KeeperHeldBall)
}
GameEvent_KeeperHeldBall::GameEvent_KeeperHeldBall(const GameEvent_KeeperHeldBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_KeeperHeldBall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.duration_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.duration_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.KeeperHeldBall)
}

inline void GameEvent_KeeperHeldBall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.duration_){0}
  };
}

GameEvent_KeeperHeldBall::~GameEvent_KeeperHeldBall() {
  // @@protoc_insertion_point(destructor:GameEvent.KeeperHeldBall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_KeeperHeldBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_KeeperHeldBall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_KeeperHeldBall::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.KeeperHeldBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.duration_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_KeeperHeldBall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_KeeperHeldBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.KeeperHeldBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.KeeperHeldBall)
  return target;
}

size_t GameEvent_KeeperHeldBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.KeeperHeldBall)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  // optional float duration = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_KeeperHeldBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_KeeperHeldBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_KeeperHeldBall::GetClassData() const { return &_class_data_; }


void GameEvent_KeeperHeldBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_KeeperHeldBall*>(&to_msg);
  auto& from = static_cast<const GameEvent_KeeperHeldBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.KeeperHeldBall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_KeeperHeldBall::CopyFrom(const GameEvent_KeeperHeldBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.KeeperHeldBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_KeeperHeldBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_KeeperHeldBall::InternalSwap(GameEvent_KeeperHeldBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.duration_)
      + sizeof(GameEvent_KeeperHeldBall::_impl_.duration_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_KeeperHeldBall, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_KeeperHeldBall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[29]);
}

// ===================================================================

class GameEvent_PlacementSucceeded::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_PlacementSucceeded>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_precision(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PlacementSucceeded)
}
GameEvent_PlacementSucceeded::GameEvent_PlacementSucceeded(const GameEvent_PlacementSucceeded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_PlacementSucceeded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.time_taken_){}
    , decltype(_impl_.precision_){}
    , decltype(_impl_.distance_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.PlacementSucceeded)
}

inline void GameEvent_PlacementSucceeded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.time_taken_){0}
    , decltype(_impl_.precision_){0}
    , decltype(_impl_.distance_){0}
  };
}

GameEvent_PlacementSucceeded::~GameEvent_PlacementSucceeded() {
  // @@protoc_insertion_point(destructor:GameEvent.PlacementSucceeded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_PlacementSucceeded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_PlacementSucceeded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_PlacementSucceeded::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PlacementSucceeded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.distance_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.distance_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_PlacementSucceeded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float time_taken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_time_taken(&has_bits);
          _impl_.time_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float precision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_precision(&has_bits);
          _impl_.precision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_PlacementSucceeded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PlacementSucceeded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional float time_taken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_time_taken(), target);
  }

  // optional float precision = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_precision(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PlacementSucceeded)
  return target;
}

size_t GameEvent_PlacementSucceeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PlacementSucceeded)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional float time_taken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float precision = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_PlacementSucceeded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_PlacementSucceeded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_PlacementSucceeded::GetClassData() const { return &_class_data_; }


void GameEvent_PlacementSucceeded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_PlacementSucceeded*>(&to_msg);
  auto& from = static_cast<const GameEvent_PlacementSucceeded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PlacementSucceeded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.time_taken_ = from._impl_.time_taken_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.precision_ = from._impl_.precision_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_PlacementSucceeded::CopyFrom(const GameEvent_PlacementSucceeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PlacementSucceeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PlacementSucceeded::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_PlacementSucceeded::InternalSwap(GameEvent_PlacementSucceeded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.distance_)
      + sizeof(GameEvent_PlacementSucceeded::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PlacementSucceeded, _impl_.by_team_)>(
          reinterpret_cast<char*>(&_impl_.by_team_),
          reinterpret_cast<char*>(&other->_impl_.by_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_PlacementSucceeded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[30]);
}

// ===================================================================

class GameEvent_Prepared::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_Prepared>()._impl_._has_bits_);
  static void set_has_time_taken(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameEvent_Prepared::GameEvent_Prepared(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.Prepared)
}
GameEvent_Prepared::GameEvent_Prepared(const GameEvent_Prepared& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_Prepared* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_taken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.time_taken_ = from._impl_.time_taken_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.Prepared)
}

inline void GameEvent_Prepared::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_taken_){0}
  };
}

GameEvent_Prepared::~GameEvent_Prepared() {
  // @@protoc_insertion_point(destructor:GameEvent.Prepared)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_Prepared::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_Prepared::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_Prepared::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.Prepared)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_taken_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_Prepared::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float time_taken = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_time_taken(&has_bits);
          _impl_.time_taken_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_Prepared::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.Prepared)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float time_taken = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_time_taken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.Prepared)
  return target;
}

size_t GameEvent_Prepared::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.Prepared)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float time_taken = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_Prepared::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_Prepared::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_Prepared::GetClassData() const { return &_class_data_; }


void GameEvent_Prepared::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_Prepared*>(&to_msg);
  auto& from = static_cast<const GameEvent_Prepared&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.Prepared)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_taken()) {
    _this->_internal_set_time_taken(from._internal_time_taken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_Prepared::CopyFrom(const GameEvent_Prepared& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.Prepared)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_Prepared::IsInitialized() const {
  return true;
}

void GameEvent_Prepared::InternalSwap(GameEvent_Prepared* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.time_taken_, other->_impl_.time_taken_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_Prepared::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[31]);
}

// ===================================================================

class GameEvent_BotSubstitution::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BotSubstitution>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_BotSubstitution::GameEvent_BotSubstitution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BotSubstitution)
}
GameEvent_BotSubstitution::GameEvent_BotSubstitution(const GameEvent_BotSubstitution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BotSubstitution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.BotSubstitution)
}

inline void GameEvent_BotSubstitution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_BotSubstitution::~GameEvent_BotSubstitution() {
  // @@protoc_insertion_point(destructor:GameEvent.BotSubstitution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BotSubstitution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_BotSubstitution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BotSubstitution::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BotSubstitution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BotSubstitution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BotSubstitution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BotSubstitution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BotSubstitution)
  return target;
}

size_t GameEvent_BotSubstitution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BotSubstitution)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BotSubstitution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BotSubstitution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BotSubstitution::GetClassData() const { return &_class_data_; }


void GameEvent_BotSubstitution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BotSubstitution*>(&to_msg);
  auto& from = static_cast<const GameEvent_BotSubstitution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BotSubstitution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _this->_internal_set_by_team(from._internal_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BotSubstitution::CopyFrom(const GameEvent_BotSubstitution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BotSubstitution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BotSubstitution::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_BotSubstitution::InternalSwap(GameEvent_BotSubstitution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BotSubstitution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[32]);
}

// ===================================================================

class GameEvent_ChallengeFlag::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_ChallengeFlag>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.ChallengeFlag)
}
GameEvent_ChallengeFlag::GameEvent_ChallengeFlag(const GameEvent_ChallengeFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_ChallengeFlag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.ChallengeFlag)
}

inline void GameEvent_ChallengeFlag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_ChallengeFlag::~GameEvent_ChallengeFlag() {
  // @@protoc_insertion_point(destructor:GameEvent.ChallengeFlag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_ChallengeFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_ChallengeFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_ChallengeFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.ChallengeFlag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_ChallengeFlag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_ChallengeFlag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.ChallengeFlag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.ChallengeFlag)
  return target;
}

size_t GameEvent_ChallengeFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.ChallengeFlag)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_ChallengeFlag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_ChallengeFlag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_ChallengeFlag::GetClassData() const { return &_class_data_; }


void GameEvent_ChallengeFlag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_ChallengeFlag*>(&to_msg);
  auto& from = static_cast<const GameEvent_ChallengeFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.ChallengeFlag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _this->_internal_set_by_team(from._internal_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_ChallengeFlag::CopyFrom(const GameEvent_ChallengeFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.ChallengeFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_ChallengeFlag::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_ChallengeFlag::InternalSwap(GameEvent_ChallengeFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_ChallengeFlag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[33]);
}

// ===================================================================

class GameEvent_EmergencyStop::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_EmergencyStop>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

GameEvent_EmergencyStop::GameEvent_EmergencyStop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.EmergencyStop)
}
GameEvent_EmergencyStop::GameEvent_EmergencyStop(const GameEvent_EmergencyStop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_EmergencyStop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.EmergencyStop)
}

inline void GameEvent_EmergencyStop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_EmergencyStop::~GameEvent_EmergencyStop() {
  // @@protoc_insertion_point(destructor:GameEvent.EmergencyStop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_EmergencyStop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameEvent_EmergencyStop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_EmergencyStop::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.EmergencyStop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_EmergencyStop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_EmergencyStop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.EmergencyStop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.EmergencyStop)
  return target;
}

size_t GameEvent_EmergencyStop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.EmergencyStop)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_EmergencyStop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_EmergencyStop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_EmergencyStop::GetClassData() const { return &_class_data_; }


void GameEvent_EmergencyStop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_EmergencyStop*>(&to_msg);
  auto& from = static_cast<const GameEvent_EmergencyStop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.EmergencyStop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_by_team()) {
    _this->_internal_set_by_team(from._internal_by_team());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_EmergencyStop::CopyFrom(const GameEvent_EmergencyStop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.EmergencyStop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_EmergencyStop::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GameEvent_EmergencyStop::InternalSwap(GameEvent_EmergencyStop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.by_team_, other->_impl_.by_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_EmergencyStop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[34]);
}

// ===================================================================

class GameEvent_TooManyRobots::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_TooManyRobots>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_robots_allowed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_robots_on_field(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& ball_location(const GameEvent_TooManyRobots* msg);
  static void set_has_ball_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_TooManyRobots::_Internal::ball_location(const GameEvent_TooManyRobots* msg) {
  return *msg->_impl_.ball_location_;
}
void GameEvent_TooManyRobots::clear_ball_location() {
  if (_impl_.ball_location_ != nullptr) _impl_.ball_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.TooManyRobots)
}
GameEvent_TooManyRobots::GameEvent_TooManyRobots(const GameEvent_TooManyRobots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_TooManyRobots* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){}
    , decltype(_impl_.num_robots_allowed_){}
    , decltype(_impl_.num_robots_on_field_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball_location()) {
    _this->_impl_.ball_location_ = new ::Vector2(*from._impl_.ball_location_);
  }
  ::memcpy(&_impl_.by_team_, &from._impl_.by_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_robots_on_field_) -
    reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.num_robots_on_field_));
  // @@protoc_insertion_point(copy_constructor:GameEvent.TooManyRobots)
}

inline void GameEvent_TooManyRobots::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ball_location_){nullptr}
    , decltype(_impl_.by_team_){0}
    , decltype(_impl_.num_robots_allowed_){0}
    , decltype(_impl_.num_robots_on_field_){0}
  };
}

GameEvent_TooManyRobots::~GameEvent_TooManyRobots() {
  // @@protoc_insertion_point(destructor:GameEvent.TooManyRobots)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_TooManyRobots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ball_location_;
}

void GameEvent_TooManyRobots::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_TooManyRobots::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.TooManyRobots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ball_location_ != nullptr);
    _impl_.ball_location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.by_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_robots_on_field_) -
        reinterpret_cast<char*>(&_impl_.by_team_)) + sizeof(_impl_.num_robots_on_field_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_TooManyRobots::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_robots_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_robots_allowed(&has_bits);
          _impl_.num_robots_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_robots_on_field = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_robots_on_field(&has_bits);
          _impl_.num_robots_on_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 ball_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_TooManyRobots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.TooManyRobots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional int32 num_robots_allowed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_robots_allowed(), target);
  }

  // optional int32 num_robots_on_field = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_robots_on_field(), target);
  }

  // optional .Vector2 ball_location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ball_location(this),
        _Internal::ball_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.TooManyRobots)
  return target;
}

size_t GameEvent_TooManyRobots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.TooManyRobots)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 ball_location = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ball_location_);
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional int32 num_robots_allowed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_robots_allowed());
    }

    // optional int32 num_robots_on_field = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_robots_on_field());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_TooManyRobots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_TooManyRobots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_TooManyRobots::GetClassData() const { return &_class_data_; }


void GameEvent_TooManyRobots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_TooManyRobots*>(&to_msg);
  auto& from = static_cast<const GameEvent_TooManyRobots&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.TooManyRobots)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ball_location()->::Vector2::MergeFrom(
          from._internal_ball_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_robots_allowed_ = from._impl_.num_robots_allowed_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.num_robots_on_field_ = from._impl_.num_robots_on_field_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_TooManyRobots::CopyFrom(const GameEvent_TooManyRobots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.TooManyRobots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_TooManyRobots::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ball_location()) {
    if (!_impl_.ball_location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_TooManyRobots::InternalSwap(GameEvent_TooManyRobots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.num_robots_on_field_)
      + sizeof(GameEvent_TooManyRobots::_impl_.num_robots_on_field_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_TooManyRobots, _impl_.ball_location_)>(
          reinterpret_cast<char*>(&_impl_.ball_location_),
          reinterpret_cast<char*>(&other->_impl_.ball_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_TooManyRobots::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[35]);
}

// ===================================================================

class GameEvent_BoundaryCrossing::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_BoundaryCrossing>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_BoundaryCrossing* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_BoundaryCrossing::_Internal::location(const GameEvent_BoundaryCrossing* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_BoundaryCrossing::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.BoundaryCrossing)
}
GameEvent_BoundaryCrossing::GameEvent_BoundaryCrossing(const GameEvent_BoundaryCrossing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_BoundaryCrossing* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.BoundaryCrossing)
}

inline void GameEvent_BoundaryCrossing::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_BoundaryCrossing::~GameEvent_BoundaryCrossing() {
  // @@protoc_insertion_point(destructor:GameEvent.BoundaryCrossing)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_BoundaryCrossing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_BoundaryCrossing::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_BoundaryCrossing::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.BoundaryCrossing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_BoundaryCrossing::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_BoundaryCrossing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.BoundaryCrossing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.BoundaryCrossing)
  return target;
}

size_t GameEvent_BoundaryCrossing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.BoundaryCrossing)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_BoundaryCrossing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_BoundaryCrossing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_BoundaryCrossing::GetClassData() const { return &_class_data_; }


void GameEvent_BoundaryCrossing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_BoundaryCrossing*>(&to_msg);
  auto& from = static_cast<const GameEvent_BoundaryCrossing&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.BoundaryCrossing)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_BoundaryCrossing::CopyFrom(const GameEvent_BoundaryCrossing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.BoundaryCrossing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_BoundaryCrossing::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_BoundaryCrossing::InternalSwap(GameEvent_BoundaryCrossing* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.by_team_)
      + sizeof(GameEvent_BoundaryCrossing::_impl_.by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_BoundaryCrossing, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_BoundaryCrossing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[36]);
}

// ===================================================================

class GameEvent_PenaltyKickFailed::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent_PenaltyKickFailed>()._impl_._has_bits_);
  static void set_has_by_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2& location(const GameEvent_PenaltyKickFailed* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::Vector2&
GameEvent_PenaltyKickFailed::_Internal::location(const GameEvent_PenaltyKickFailed* msg) {
  return *msg->_impl_.location_;
}
void GameEvent_PenaltyKickFailed::clear_location() {
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent.PenaltyKickFailed)
}
GameEvent_PenaltyKickFailed::GameEvent_PenaltyKickFailed(const GameEvent_PenaltyKickFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent_PenaltyKickFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    _this->_impl_.location_ = new ::Vector2(*from._impl_.location_);
  }
  _this->_impl_.by_team_ = from._impl_.by_team_;
  // @@protoc_insertion_point(copy_constructor:GameEvent.PenaltyKickFailed)
}

inline void GameEvent_PenaltyKickFailed::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.by_team_){0}
  };
}

GameEvent_PenaltyKickFailed::~GameEvent_PenaltyKickFailed() {
  // @@protoc_insertion_point(destructor:GameEvent.PenaltyKickFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent_PenaltyKickFailed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
}

void GameEvent_PenaltyKickFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent_PenaltyKickFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent.PenaltyKickFailed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  _impl_.by_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent_PenaltyKickFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Team by_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Team_IsValid(val))) {
            _internal_set_by_team(static_cast<::Team>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent_PenaltyKickFailed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent.PenaltyKickFailed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Team by_team = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_by_team(), target);
  }

  // optional .Vector2 location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent.PenaltyKickFailed)
  return target;
}

size_t GameEvent_PenaltyKickFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent.PenaltyKickFailed)
  size_t total_size = 0;

  // required .Team by_team = 1;
  if (_internal_has_by_team()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_by_team());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent_PenaltyKickFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent_PenaltyKickFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent_PenaltyKickFailed::GetClassData() const { return &_class_data_; }


void GameEvent_PenaltyKickFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent_PenaltyKickFailed*>(&to_msg);
  auto& from = static_cast<const GameEvent_PenaltyKickFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent.PenaltyKickFailed)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::Vector2::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.by_team_ = from._impl_.by_team_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent_PenaltyKickFailed::CopyFrom(const GameEvent_PenaltyKickFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent.PenaltyKickFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent_PenaltyKickFailed::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_location()) {
    if (!_impl_.location_->IsInitialized()) return false;
  }
  return true;
}

void GameEvent_PenaltyKickFailed::InternalSwap(GameEvent_PenaltyKickFailed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.by_team_)
      + sizeof(GameEvent_PenaltyKickFailed::_impl_.by_team_)
      - PROTOBUF_FIELD_OFFSET(GameEvent_PenaltyKickFailed, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent_PenaltyKickFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[37]);
}

// ===================================================================

class GameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEvent>()._impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::GameEvent_BallLeftField& ball_left_field_touch_line(const GameEvent* msg);
  static const ::GameEvent_BallLeftField& ball_left_field_goal_line(const GameEvent* msg);
  static const ::GameEvent_AimlessKick& aimless_kick(const GameEvent* msg);
  static const ::GameEvent_AttackerTooCloseToDefenseArea& attacker_too_close_to_defense_area(const GameEvent* msg);
  static const ::GameEvent_DefenderInDefenseArea& defender_in_defense_area(const GameEvent* msg);
  static const ::GameEvent_BoundaryCrossing& boundary_crossing(const GameEvent* msg);
  static const ::GameEvent_KeeperHeldBall& keeper_held_ball(const GameEvent* msg);
  static const ::GameEvent_BotDribbledBallTooFar& bot_dribbled_ball_too_far(const GameEvent* msg);
  static const ::GameEvent_BotPushedBot& bot_pushed_bot(const GameEvent* msg);
  static const ::GameEvent_BotHeldBallDeliberately& bot_held_ball_deliberately(const GameEvent* msg);
  static const ::GameEvent_BotTippedOver& bot_tipped_over(const GameEvent* msg);
  static const ::GameEvent_AttackerTouchedBallInDefenseArea& attacker_touched_ball_in_defense_area(const GameEvent* msg);
  static const ::GameEvent_BotKickedBallTooFast& bot_kicked_ball_too_fast(const GameEvent* msg);
  static const ::GameEvent_BotCrashUnique& bot_crash_unique(const GameEvent* msg);
  static const ::GameEvent_BotCrashDrawn& bot_crash_drawn(const GameEvent* msg);
  static const ::GameEvent_DefenderTooCloseToKickPoint& defender_too_close_to_kick_point(const GameEvent* msg);
  static const ::GameEvent_BotTooFastInStop& bot_too_fast_in_stop(const GameEvent* msg);
  static const ::GameEvent_BotInterferedPlacement& bot_interfered_placement(const GameEvent* msg);
  static const ::GameEvent_Goal& possible_goal(const GameEvent* msg);
  static const ::GameEvent_Goal& goal(const GameEvent* msg);
  static const ::GameEvent_Goal& invalid_goal(const GameEvent* msg);
  static const ::GameEvent_AttackerDoubleTouchedBall& attacker_double_touched_ball(const GameEvent* msg);
  static const ::GameEvent_PlacementSucceeded& placement_succeeded(const GameEvent* msg);
  static const ::GameEvent_PenaltyKickFailed& penalty_kick_failed(const GameEvent* msg);
  static const ::GameEvent_NoProgressInGame& no_progress_in_game(const GameEvent* msg);
  static const ::GameEvent_PlacementFailed& placement_failed(const GameEvent* msg);
  static const ::GameEvent_MultipleCards& multiple_cards(const GameEvent* msg);
  static const ::GameEvent_MultipleFouls& multiple_fouls(const GameEvent* msg);
  static const ::GameEvent_BotSubstitution& bot_substitution(const GameEvent* msg);
  static const ::GameEvent_TooManyRobots& too_many_robots(const GameEvent* msg);
  static const ::GameEvent_ChallengeFlag& challenge_flag(const GameEvent* msg);
  static const ::GameEvent_EmergencyStop& emergency_stop(const GameEvent* msg);
  static const ::GameEvent_UnsportingBehaviorMinor& unsporting_behavior_minor(const GameEvent* msg);
  static const ::GameEvent_UnsportingBehaviorMajor& unsporting_behavior_major(const GameEvent* msg);
  static const ::GameEvent_Prepared& prepared(const GameEvent* msg);
  static const ::GameEvent_IndirectGoal& indirect_goal(const GameEvent* msg);
  static const ::GameEvent_ChippedGoal& chipped_goal(const GameEvent* msg);
  static const ::GameEvent_KickTimeout& kick_timeout(const GameEvent* msg);
  static const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area(const GameEvent* msg);
  static const ::GameEvent_AttackerTouchedOpponentInDefenseArea& attacker_touched_opponent_in_defense_area_skipped(const GameEvent* msg);
  static const ::GameEvent_BotCrashUnique& bot_crash_unique_skipped(const GameEvent* msg);
  static const ::GameEvent_BotPushedBot& bot_pushed_bot_skipped(const GameEvent* msg);
  static const ::GameEvent_DefenderInDefenseAreaPartially& defender_in_defense_area_partially(const GameEvent* msg);
  static const ::GameEvent_MultiplePlacementFailures& multiple_placement_failures(const GameEvent* msg);
};

const ::GameEvent_BallLeftField&
GameEvent::_Internal::ball_left_field_touch_line(const GameEvent* msg) {
  return *msg->_impl_.event_.ball_left_field_touch_line_;
}
const ::GameEvent_BallLeftField&
GameEvent::_Internal::ball_left_field_goal_line(const GameEvent* msg) {
  return *msg->_impl_.event_.ball_left_field_goal_line_;
}
const ::GameEvent_AimlessKick&
GameEvent::_Internal::aimless_kick(const GameEvent* msg) {
  return *msg->_impl_.event_.aimless_kick_;
}
const ::GameEvent_AttackerTooCloseToDefenseArea&
GameEvent::_Internal::attacker_too_close_to_defense_area(const GameEvent* msg) {
  return *msg->_impl_.event_.attacker_too_close_to_defense_area_;
}
const ::GameEvent_DefenderInDefenseArea&
GameEvent::_Internal::defender_in_defense_area(const GameEvent* msg) {
  return *msg->_impl_.event_.defender_in_defense_area_;
}
const ::GameEvent_BoundaryCrossing&
GameEvent::_Internal::boundary_crossing(const GameEvent* msg) {
  return *msg->_impl_.event_.boundary_crossing_;
}
const ::GameEvent_KeeperHeldBall&
GameEvent::_Internal::keeper_held_ball(const GameEvent* msg) {
  return *msg->_impl_.event_.keeper_held_ball_;
}
const ::GameEvent_BotDribbledBallTooFar&
GameEvent::_Internal::bot_dribbled_ball_too_far(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_dribbled_ball_too_far_;
}
const ::GameEvent_BotPushedBot&
GameEvent::_Internal::bot_pushed_bot(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_pushed_bot_;
}
const ::GameEvent_BotHeldBallDeliberately&
GameEvent::_Internal::bot_held_ball_deliberately(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_held_ball_deliberately_;
}
const ::GameEvent_BotTippedOver&
GameEvent::_Internal::bot_tipped_over(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_tipped_over_;
}
const ::GameEvent_AttackerTouchedBallInDefenseArea&
GameEvent::_Internal::attacker_touched_ball_in_defense_area(const GameEvent* msg) {
  return *msg->_impl_.event_.attacker_touched_ball_in_defense_area_;
}
const ::GameEvent_BotKickedBallTooFast&
GameEvent::_Internal::bot_kicked_ball_too_fast(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_kicked_ball_too_fast_;
}
const ::GameEvent_BotCrashUnique&
GameEvent::_Internal::bot_crash_unique(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_crash_unique_;
}
const ::GameEvent_BotCrashDrawn&
GameEvent::_Internal::bot_crash_drawn(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_crash_drawn_;
}
const ::GameEvent_DefenderTooCloseToKickPoint&
GameEvent::_Internal::defender_too_close_to_kick_point(const GameEvent* msg) {
  return *msg->_impl_.event_.defender_too_close_to_kick_point_;
}
const ::GameEvent_BotTooFastInStop&
GameEvent::_Internal::bot_too_fast_in_stop(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_too_fast_in_stop_;
}
const ::GameEvent_BotInterferedPlacement&
GameEvent::_Internal::bot_interfered_placement(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_interfered_placement_;
}
const ::GameEvent_Goal&
GameEvent::_Internal::possible_goal(const GameEvent* msg) {
  return *msg->_impl_.event_.possible_goal_;
}
const ::GameEvent_Goal&
GameEvent::_Internal::goal(const GameEvent* msg) {
  return *msg->_impl_.event_.goal_;
}
const ::GameEvent_Goal&
GameEvent::_Internal::invalid_goal(const GameEvent* msg) {
  return *msg->_impl_.event_.invalid_goal_;
}
const ::GameEvent_AttackerDoubleTouchedBall&
GameEvent::_Internal::attacker_double_touched_ball(const GameEvent* msg) {
  return *msg->_impl_.event_.attacker_double_touched_ball_;
}
const ::GameEvent_PlacementSucceeded&
GameEvent::_Internal::placement_succeeded(const GameEvent* msg) {
  return *msg->_impl_.event_.placement_succeeded_;
}
const ::GameEvent_PenaltyKickFailed&
GameEvent::_Internal::penalty_kick_failed(const GameEvent* msg) {
  return *msg->_impl_.event_.penalty_kick_failed_;
}
const ::GameEvent_NoProgressInGame&
GameEvent::_Internal::no_progress_in_game(const GameEvent* msg) {
  return *msg->_impl_.event_.no_progress_in_game_;
}
const ::GameEvent_PlacementFailed&
GameEvent::_Internal::placement_failed(const GameEvent* msg) {
  return *msg->_impl_.event_.placement_failed_;
}
const ::GameEvent_MultipleCards&
GameEvent::_Internal::multiple_cards(const GameEvent* msg) {
  return *msg->_impl_.event_.multiple_cards_;
}
const ::GameEvent_MultipleFouls&
GameEvent::_Internal::multiple_fouls(const GameEvent* msg) {
  return *msg->_impl_.event_.multiple_fouls_;
}
const ::GameEvent_BotSubstitution&
GameEvent::_Internal::bot_substitution(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_substitution_;
}
const ::GameEvent_TooManyRobots&
GameEvent::_Internal::too_many_robots(const GameEvent* msg) {
  return *msg->_impl_.event_.too_many_robots_;
}
const ::GameEvent_ChallengeFlag&
GameEvent::_Internal::challenge_flag(const GameEvent* msg) {
  return *msg->_impl_.event_.challenge_flag_;
}
const ::GameEvent_EmergencyStop&
GameEvent::_Internal::emergency_stop(const GameEvent* msg) {
  return *msg->_impl_.event_.emergency_stop_;
}
const ::GameEvent_UnsportingBehaviorMinor&
GameEvent::_Internal::unsporting_behavior_minor(const GameEvent* msg) {
  return *msg->_impl_.event_.unsporting_behavior_minor_;
}
const ::GameEvent_UnsportingBehaviorMajor&
GameEvent::_Internal::unsporting_behavior_major(const GameEvent* msg) {
  return *msg->_impl_.event_.unsporting_behavior_major_;
}
const ::GameEvent_Prepared&
GameEvent::_Internal::prepared(const GameEvent* msg) {
  return *msg->_impl_.event_.prepared_;
}
const ::GameEvent_IndirectGoal&
GameEvent::_Internal::indirect_goal(const GameEvent* msg) {
  return *msg->_impl_.event_.indirect_goal_;
}
const ::GameEvent_ChippedGoal&
GameEvent::_Internal::chipped_goal(const GameEvent* msg) {
  return *msg->_impl_.event_.chipped_goal_;
}
const ::GameEvent_KickTimeout&
GameEvent::_Internal::kick_timeout(const GameEvent* msg) {
  return *msg->_impl_.event_.kick_timeout_;
}
const ::GameEvent_AttackerTouchedOpponentInDefenseArea&
GameEvent::_Internal::attacker_touched_opponent_in_defense_area(const GameEvent* msg) {
  return *msg->_impl_.event_.attacker_touched_opponent_in_defense_area_;
}
const ::GameEvent_AttackerTouchedOpponentInDefenseArea&
GameEvent::_Internal::attacker_touched_opponent_in_defense_area_skipped(const GameEvent* msg) {
  return *msg->_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
}
const ::GameEvent_BotCrashUnique&
GameEvent::_Internal::bot_crash_unique_skipped(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_crash_unique_skipped_;
}
const ::GameEvent_BotPushedBot&
GameEvent::_Internal::bot_pushed_bot_skipped(const GameEvent* msg) {
  return *msg->_impl_.event_.bot_pushed_bot_skipped_;
}
const ::GameEvent_DefenderInDefenseAreaPartially&
GameEvent::_Internal::defender_in_defense_area_partially(const GameEvent* msg) {
  return *msg->_impl_.event_.defender_in_defense_area_partially_;
}
const ::GameEvent_MultiplePlacementFailures&
GameEvent::_Internal::multiple_placement_failures(const GameEvent* msg) {
  return *msg->_impl_.event_.multiple_placement_failures_;
}
void GameEvent::set_allocated_ball_left_field_touch_line(::GameEvent_BallLeftField* ball_left_field_touch_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ball_left_field_touch_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ball_left_field_touch_line);
    if (message_arena != submessage_arena) {
      ball_left_field_touch_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_left_field_touch_line, submessage_arena);
    }
    set_has_ball_left_field_touch_line();
    _impl_.event_.ball_left_field_touch_line_ = ball_left_field_touch_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_touch_line)
}
void GameEvent::set_allocated_ball_left_field_goal_line(::GameEvent_BallLeftField* ball_left_field_goal_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (ball_left_field_goal_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ball_left_field_goal_line);
    if (message_arena != submessage_arena) {
      ball_left_field_goal_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_left_field_goal_line, submessage_arena);
    }
    set_has_ball_left_field_goal_line();
    _impl_.event_.ball_left_field_goal_line_ = ball_left_field_goal_line;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.ball_left_field_goal_line)
}
void GameEvent::set_allocated_aimless_kick(::GameEvent_AimlessKick* aimless_kick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (aimless_kick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aimless_kick);
    if (message_arena != submessage_arena) {
      aimless_kick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aimless_kick, submessage_arena);
    }
    set_has_aimless_kick();
    _impl_.event_.aimless_kick_ = aimless_kick;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.aimless_kick)
}
void GameEvent::set_allocated_attacker_too_close_to_defense_area(::GameEvent_AttackerTooCloseToDefenseArea* attacker_too_close_to_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (attacker_too_close_to_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attacker_too_close_to_defense_area);
    if (message_arena != submessage_arena) {
      attacker_too_close_to_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_too_close_to_defense_area, submessage_arena);
    }
    set_has_attacker_too_close_to_defense_area();
    _impl_.event_.attacker_too_close_to_defense_area_ = attacker_too_close_to_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_too_close_to_defense_area)
}
void GameEvent::set_allocated_defender_in_defense_area(::GameEvent_DefenderInDefenseArea* defender_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (defender_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defender_in_defense_area);
    if (message_arena != submessage_arena) {
      defender_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender_in_defense_area, submessage_arena);
    }
    set_has_defender_in_defense_area();
    _impl_.event_.defender_in_defense_area_ = defender_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area)
}
void GameEvent::set_allocated_boundary_crossing(::GameEvent_BoundaryCrossing* boundary_crossing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (boundary_crossing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundary_crossing);
    if (message_arena != submessage_arena) {
      boundary_crossing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundary_crossing, submessage_arena);
    }
    set_has_boundary_crossing();
    _impl_.event_.boundary_crossing_ = boundary_crossing;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.boundary_crossing)
}
void GameEvent::set_allocated_keeper_held_ball(::GameEvent_KeeperHeldBall* keeper_held_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (keeper_held_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(keeper_held_ball);
    if (message_arena != submessage_arena) {
      keeper_held_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keeper_held_ball, submessage_arena);
    }
    set_has_keeper_held_ball();
    _impl_.event_.keeper_held_ball_ = keeper_held_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.keeper_held_ball)
}
void GameEvent::set_allocated_bot_dribbled_ball_too_far(::GameEvent_BotDribbledBallTooFar* bot_dribbled_ball_too_far) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_dribbled_ball_too_far) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_dribbled_ball_too_far);
    if (message_arena != submessage_arena) {
      bot_dribbled_ball_too_far = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_dribbled_ball_too_far, submessage_arena);
    }
    set_has_bot_dribbled_ball_too_far();
    _impl_.event_.bot_dribbled_ball_too_far_ = bot_dribbled_ball_too_far;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_dribbled_ball_too_far)
}
void GameEvent::set_allocated_bot_pushed_bot(::GameEvent_BotPushedBot* bot_pushed_bot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_pushed_bot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_pushed_bot);
    if (message_arena != submessage_arena) {
      bot_pushed_bot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot, submessage_arena);
    }
    set_has_bot_pushed_bot();
    _impl_.event_.bot_pushed_bot_ = bot_pushed_bot;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot)
}
void GameEvent::set_allocated_bot_held_ball_deliberately(::GameEvent_BotHeldBallDeliberately* bot_held_ball_deliberately) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_held_ball_deliberately) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_held_ball_deliberately);
    if (message_arena != submessage_arena) {
      bot_held_ball_deliberately = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_held_ball_deliberately, submessage_arena);
    }
    set_has_bot_held_ball_deliberately();
    _impl_.event_.bot_held_ball_deliberately_ = bot_held_ball_deliberately;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_held_ball_deliberately)
}
void GameEvent::set_allocated_bot_tipped_over(::GameEvent_BotTippedOver* bot_tipped_over) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_tipped_over) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_tipped_over);
    if (message_arena != submessage_arena) {
      bot_tipped_over = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_tipped_over, submessage_arena);
    }
    set_has_bot_tipped_over();
    _impl_.event_.bot_tipped_over_ = bot_tipped_over;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_tipped_over)
}
void GameEvent::set_allocated_attacker_touched_ball_in_defense_area(::GameEvent_AttackerTouchedBallInDefenseArea* attacker_touched_ball_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (attacker_touched_ball_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attacker_touched_ball_in_defense_area);
    if (message_arena != submessage_arena) {
      attacker_touched_ball_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_ball_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_ball_in_defense_area();
    _impl_.event_.attacker_touched_ball_in_defense_area_ = attacker_touched_ball_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_ball_in_defense_area)
}
void GameEvent::set_allocated_bot_kicked_ball_too_fast(::GameEvent_BotKickedBallTooFast* bot_kicked_ball_too_fast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_kicked_ball_too_fast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_kicked_ball_too_fast);
    if (message_arena != submessage_arena) {
      bot_kicked_ball_too_fast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_kicked_ball_too_fast, submessage_arena);
    }
    set_has_bot_kicked_ball_too_fast();
    _impl_.event_.bot_kicked_ball_too_fast_ = bot_kicked_ball_too_fast;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_kicked_ball_too_fast)
}
void GameEvent::set_allocated_bot_crash_unique(::GameEvent_BotCrashUnique* bot_crash_unique) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_crash_unique) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_crash_unique);
    if (message_arena != submessage_arena) {
      bot_crash_unique = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_unique, submessage_arena);
    }
    set_has_bot_crash_unique();
    _impl_.event_.bot_crash_unique_ = bot_crash_unique;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique)
}
void GameEvent::set_allocated_bot_crash_drawn(::GameEvent_BotCrashDrawn* bot_crash_drawn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_crash_drawn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_crash_drawn);
    if (message_arena != submessage_arena) {
      bot_crash_drawn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_drawn, submessage_arena);
    }
    set_has_bot_crash_drawn();
    _impl_.event_.bot_crash_drawn_ = bot_crash_drawn;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_drawn)
}
void GameEvent::set_allocated_defender_too_close_to_kick_point(::GameEvent_DefenderTooCloseToKickPoint* defender_too_close_to_kick_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (defender_too_close_to_kick_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defender_too_close_to_kick_point);
    if (message_arena != submessage_arena) {
      defender_too_close_to_kick_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender_too_close_to_kick_point, submessage_arena);
    }
    set_has_defender_too_close_to_kick_point();
    _impl_.event_.defender_too_close_to_kick_point_ = defender_too_close_to_kick_point;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_too_close_to_kick_point)
}
void GameEvent::set_allocated_bot_too_fast_in_stop(::GameEvent_BotTooFastInStop* bot_too_fast_in_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_too_fast_in_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_too_fast_in_stop);
    if (message_arena != submessage_arena) {
      bot_too_fast_in_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_too_fast_in_stop, submessage_arena);
    }
    set_has_bot_too_fast_in_stop();
    _impl_.event_.bot_too_fast_in_stop_ = bot_too_fast_in_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_too_fast_in_stop)
}
void GameEvent::set_allocated_bot_interfered_placement(::GameEvent_BotInterferedPlacement* bot_interfered_placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_interfered_placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_interfered_placement);
    if (message_arena != submessage_arena) {
      bot_interfered_placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_interfered_placement, submessage_arena);
    }
    set_has_bot_interfered_placement();
    _impl_.event_.bot_interfered_placement_ = bot_interfered_placement;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_interfered_placement)
}
void GameEvent::set_allocated_possible_goal(::GameEvent_Goal* possible_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (possible_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(possible_goal);
    if (message_arena != submessage_arena) {
      possible_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, possible_goal, submessage_arena);
    }
    set_has_possible_goal();
    _impl_.event_.possible_goal_ = possible_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.possible_goal)
}
void GameEvent::set_allocated_goal(::GameEvent_Goal* goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(goal);
    if (message_arena != submessage_arena) {
      goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    set_has_goal();
    _impl_.event_.goal_ = goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.goal)
}
void GameEvent::set_allocated_invalid_goal(::GameEvent_Goal* invalid_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (invalid_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(invalid_goal);
    if (message_arena != submessage_arena) {
      invalid_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invalid_goal, submessage_arena);
    }
    set_has_invalid_goal();
    _impl_.event_.invalid_goal_ = invalid_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.invalid_goal)
}
void GameEvent::set_allocated_attacker_double_touched_ball(::GameEvent_AttackerDoubleTouchedBall* attacker_double_touched_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (attacker_double_touched_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attacker_double_touched_ball);
    if (message_arena != submessage_arena) {
      attacker_double_touched_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_double_touched_ball, submessage_arena);
    }
    set_has_attacker_double_touched_ball();
    _impl_.event_.attacker_double_touched_ball_ = attacker_double_touched_ball;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_double_touched_ball)
}
void GameEvent::set_allocated_placement_succeeded(::GameEvent_PlacementSucceeded* placement_succeeded) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (placement_succeeded) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(placement_succeeded);
    if (message_arena != submessage_arena) {
      placement_succeeded = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_succeeded, submessage_arena);
    }
    set_has_placement_succeeded();
    _impl_.event_.placement_succeeded_ = placement_succeeded;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_succeeded)
}
void GameEvent::set_allocated_penalty_kick_failed(::GameEvent_PenaltyKickFailed* penalty_kick_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (penalty_kick_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(penalty_kick_failed);
    if (message_arena != submessage_arena) {
      penalty_kick_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, penalty_kick_failed, submessage_arena);
    }
    set_has_penalty_kick_failed();
    _impl_.event_.penalty_kick_failed_ = penalty_kick_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.penalty_kick_failed)
}
void GameEvent::set_allocated_no_progress_in_game(::GameEvent_NoProgressInGame* no_progress_in_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (no_progress_in_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(no_progress_in_game);
    if (message_arena != submessage_arena) {
      no_progress_in_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, no_progress_in_game, submessage_arena);
    }
    set_has_no_progress_in_game();
    _impl_.event_.no_progress_in_game_ = no_progress_in_game;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.no_progress_in_game)
}
void GameEvent::set_allocated_placement_failed(::GameEvent_PlacementFailed* placement_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (placement_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(placement_failed);
    if (message_arena != submessage_arena) {
      placement_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_failed, submessage_arena);
    }
    set_has_placement_failed();
    _impl_.event_.placement_failed_ = placement_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.placement_failed)
}
void GameEvent::set_allocated_multiple_cards(::GameEvent_MultipleCards* multiple_cards) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (multiple_cards) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multiple_cards);
    if (message_arena != submessage_arena) {
      multiple_cards = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_cards, submessage_arena);
    }
    set_has_multiple_cards();
    _impl_.event_.multiple_cards_ = multiple_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_cards)
}
void GameEvent::set_allocated_multiple_fouls(::GameEvent_MultipleFouls* multiple_fouls) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (multiple_fouls) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multiple_fouls);
    if (message_arena != submessage_arena) {
      multiple_fouls = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_fouls, submessage_arena);
    }
    set_has_multiple_fouls();
    _impl_.event_.multiple_fouls_ = multiple_fouls;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_fouls)
}
void GameEvent::set_allocated_bot_substitution(::GameEvent_BotSubstitution* bot_substitution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_substitution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_substitution);
    if (message_arena != submessage_arena) {
      bot_substitution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_substitution, submessage_arena);
    }
    set_has_bot_substitution();
    _impl_.event_.bot_substitution_ = bot_substitution;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_substitution)
}
void GameEvent::set_allocated_too_many_robots(::GameEvent_TooManyRobots* too_many_robots) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (too_many_robots) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(too_many_robots);
    if (message_arena != submessage_arena) {
      too_many_robots = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, too_many_robots, submessage_arena);
    }
    set_has_too_many_robots();
    _impl_.event_.too_many_robots_ = too_many_robots;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.too_many_robots)
}
void GameEvent::set_allocated_challenge_flag(::GameEvent_ChallengeFlag* challenge_flag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (challenge_flag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(challenge_flag);
    if (message_arena != submessage_arena) {
      challenge_flag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_flag, submessage_arena);
    }
    set_has_challenge_flag();
    _impl_.event_.challenge_flag_ = challenge_flag;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.challenge_flag)
}
void GameEvent::set_allocated_emergency_stop(::GameEvent_EmergencyStop* emergency_stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (emergency_stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(emergency_stop);
    if (message_arena != submessage_arena) {
      emergency_stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emergency_stop, submessage_arena);
    }
    set_has_emergency_stop();
    _impl_.event_.emergency_stop_ = emergency_stop;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.emergency_stop)
}
void GameEvent::set_allocated_unsporting_behavior_minor(::GameEvent_UnsportingBehaviorMinor* unsporting_behavior_minor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (unsporting_behavior_minor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unsporting_behavior_minor);
    if (message_arena != submessage_arena) {
      unsporting_behavior_minor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsporting_behavior_minor, submessage_arena);
    }
    set_has_unsporting_behavior_minor();
    _impl_.event_.unsporting_behavior_minor_ = unsporting_behavior_minor;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_minor)
}
void GameEvent::set_allocated_unsporting_behavior_major(::GameEvent_UnsportingBehaviorMajor* unsporting_behavior_major) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (unsporting_behavior_major) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(unsporting_behavior_major);
    if (message_arena != submessage_arena) {
      unsporting_behavior_major = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsporting_behavior_major, submessage_arena);
    }
    set_has_unsporting_behavior_major();
    _impl_.event_.unsporting_behavior_major_ = unsporting_behavior_major;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.unsporting_behavior_major)
}
void GameEvent::set_allocated_prepared(::GameEvent_Prepared* prepared) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (prepared) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prepared);
    if (message_arena != submessage_arena) {
      prepared = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prepared, submessage_arena);
    }
    set_has_prepared();
    _impl_.event_.prepared_ = prepared;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.prepared)
}
void GameEvent::set_allocated_indirect_goal(::GameEvent_IndirectGoal* indirect_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (indirect_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(indirect_goal);
    if (message_arena != submessage_arena) {
      indirect_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indirect_goal, submessage_arena);
    }
    set_has_indirect_goal();
    _impl_.event_.indirect_goal_ = indirect_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.indirect_goal)
}
void GameEvent::set_allocated_chipped_goal(::GameEvent_ChippedGoal* chipped_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (chipped_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chipped_goal);
    if (message_arena != submessage_arena) {
      chipped_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chipped_goal, submessage_arena);
    }
    set_has_chipped_goal();
    _impl_.event_.chipped_goal_ = chipped_goal;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.chipped_goal)
}
void GameEvent::set_allocated_kick_timeout(::GameEvent_KickTimeout* kick_timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (kick_timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kick_timeout);
    if (message_arena != submessage_arena) {
      kick_timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kick_timeout, submessage_arena);
    }
    set_has_kick_timeout();
    _impl_.event_.kick_timeout_ = kick_timeout;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.kick_timeout)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (attacker_touched_opponent_in_defense_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attacker_touched_opponent_in_defense_area);
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area();
    _impl_.event_.attacker_touched_opponent_in_defense_area_ = attacker_touched_opponent_in_defense_area;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area)
}
void GameEvent::set_allocated_attacker_touched_opponent_in_defense_area_skipped(::GameEvent_AttackerTouchedOpponentInDefenseArea* attacker_touched_opponent_in_defense_area_skipped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (attacker_touched_opponent_in_defense_area_skipped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(attacker_touched_opponent_in_defense_area_skipped);
    if (message_arena != submessage_arena) {
      attacker_touched_opponent_in_defense_area_skipped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_touched_opponent_in_defense_area_skipped, submessage_arena);
    }
    set_has_attacker_touched_opponent_in_defense_area_skipped();
    _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_ = attacker_touched_opponent_in_defense_area_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.attacker_touched_opponent_in_defense_area_skipped)
}
void GameEvent::set_allocated_bot_crash_unique_skipped(::GameEvent_BotCrashUnique* bot_crash_unique_skipped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_crash_unique_skipped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_crash_unique_skipped);
    if (message_arena != submessage_arena) {
      bot_crash_unique_skipped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_crash_unique_skipped, submessage_arena);
    }
    set_has_bot_crash_unique_skipped();
    _impl_.event_.bot_crash_unique_skipped_ = bot_crash_unique_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_crash_unique_skipped)
}
void GameEvent::set_allocated_bot_pushed_bot_skipped(::GameEvent_BotPushedBot* bot_pushed_bot_skipped) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (bot_pushed_bot_skipped) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bot_pushed_bot_skipped);
    if (message_arena != submessage_arena) {
      bot_pushed_bot_skipped = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bot_pushed_bot_skipped, submessage_arena);
    }
    set_has_bot_pushed_bot_skipped();
    _impl_.event_.bot_pushed_bot_skipped_ = bot_pushed_bot_skipped;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.bot_pushed_bot_skipped)
}
void GameEvent::set_allocated_defender_in_defense_area_partially(::GameEvent_DefenderInDefenseAreaPartially* defender_in_defense_area_partially) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (defender_in_defense_area_partially) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defender_in_defense_area_partially);
    if (message_arena != submessage_arena) {
      defender_in_defense_area_partially = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defender_in_defense_area_partially, submessage_arena);
    }
    set_has_defender_in_defense_area_partially();
    _impl_.event_.defender_in_defense_area_partially_ = defender_in_defense_area_partially;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.defender_in_defense_area_partially)
}
void GameEvent::set_allocated_multiple_placement_failures(::GameEvent_MultiplePlacementFailures* multiple_placement_failures) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_event();
  if (multiple_placement_failures) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multiple_placement_failures);
    if (message_arena != submessage_arena) {
      multiple_placement_failures = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multiple_placement_failures, submessage_arena);
    }
    set_has_multiple_placement_failures();
    _impl_.event_.multiple_placement_failures_ = multiple_placement_failures;
  }
  // @@protoc_insertion_point(field_set_allocated:GameEvent.multiple_placement_failures)
}
GameEvent::GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEvent)
}
GameEvent::GameEvent(const GameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){from._impl_.origin_}
    , decltype(_impl_.type_){}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  clear_has_event();
  switch (from.event_case()) {
    case kBallLeftFieldTouchLine: {
      _this->_internal_mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(
          from._internal_ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      _this->_internal_mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(
          from._internal_ball_left_field_goal_line());
      break;
    }
    case kAimlessKick: {
      _this->_internal_mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(
          from._internal_aimless_kick());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      _this->_internal_mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(
          from._internal_attacker_too_close_to_defense_area());
      break;
    }
    case kDefenderInDefenseArea: {
      _this->_internal_mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(
          from._internal_defender_in_defense_area());
      break;
    }
    case kBoundaryCrossing: {
      _this->_internal_mutable_boundary_crossing()->::GameEvent_BoundaryCrossing::MergeFrom(
          from._internal_boundary_crossing());
      break;
    }
    case kKeeperHeldBall: {
      _this->_internal_mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(
          from._internal_keeper_held_ball());
      break;
    }
    case kBotDribbledBallTooFar: {
      _this->_internal_mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(
          from._internal_bot_dribbled_ball_too_far());
      break;
    }
    case kBotPushedBot: {
      _this->_internal_mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(
          from._internal_bot_pushed_bot());
      break;
    }
    case kBotHeldBallDeliberately: {
      _this->_internal_mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(
          from._internal_bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      _this->_internal_mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(
          from._internal_bot_tipped_over());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      _this->_internal_mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(
          from._internal_attacker_touched_ball_in_defense_area());
      break;
    }
    case kBotKickedBallTooFast: {
      _this->_internal_mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(
          from._internal_bot_kicked_ball_too_fast());
      break;
    }
    case kBotCrashUnique: {
      _this->_internal_mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(
          from._internal_bot_crash_unique());
      break;
    }
    case kBotCrashDrawn: {
      _this->_internal_mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(
          from._internal_bot_crash_drawn());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      _this->_internal_mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(
          from._internal_defender_too_close_to_kick_point());
      break;
    }
    case kBotTooFastInStop: {
      _this->_internal_mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(
          from._internal_bot_too_fast_in_stop());
      break;
    }
    case kBotInterferedPlacement: {
      _this->_internal_mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(
          from._internal_bot_interfered_placement());
      break;
    }
    case kPossibleGoal: {
      _this->_internal_mutable_possible_goal()->::GameEvent_Goal::MergeFrom(
          from._internal_possible_goal());
      break;
    }
    case kGoal: {
      _this->_internal_mutable_goal()->::GameEvent_Goal::MergeFrom(
          from._internal_goal());
      break;
    }
    case kInvalidGoal: {
      _this->_internal_mutable_invalid_goal()->::GameEvent_Goal::MergeFrom(
          from._internal_invalid_goal());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      _this->_internal_mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(
          from._internal_attacker_double_touched_ball());
      break;
    }
    case kPlacementSucceeded: {
      _this->_internal_mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(
          from._internal_placement_succeeded());
      break;
    }
    case kPenaltyKickFailed: {
      _this->_internal_mutable_penalty_kick_failed()->::GameEvent_PenaltyKickFailed::MergeFrom(
          from._internal_penalty_kick_failed());
      break;
    }
    case kNoProgressInGame: {
      _this->_internal_mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(
          from._internal_no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      _this->_internal_mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(
          from._internal_placement_failed());
      break;
    }
    case kMultipleCards: {
      _this->_internal_mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(
          from._internal_multiple_cards());
      break;
    }
    case kMultipleFouls: {
      _this->_internal_mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(
          from._internal_multiple_fouls());
      break;
    }
    case kBotSubstitution: {
      _this->_internal_mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(
          from._internal_bot_substitution());
      break;
    }
    case kTooManyRobots: {
      _this->_internal_mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(
          from._internal_too_many_robots());
      break;
    }
    case kChallengeFlag: {
      _this->_internal_mutable_challenge_flag()->::GameEvent_ChallengeFlag::MergeFrom(
          from._internal_challenge_flag());
      break;
    }
    case kEmergencyStop: {
      _this->_internal_mutable_emergency_stop()->::GameEvent_EmergencyStop::MergeFrom(
          from._internal_emergency_stop());
      break;
    }
    case kUnsportingBehaviorMinor: {
      _this->_internal_mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(
          from._internal_unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      _this->_internal_mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(
          from._internal_unsporting_behavior_major());
      break;
    }
    case kPrepared: {
      _this->_internal_mutable_prepared()->::GameEvent_Prepared::MergeFrom(
          from._internal_prepared());
      break;
    }
    case kIndirectGoal: {
      _this->_internal_mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(
          from._internal_indirect_goal());
      break;
    }
    case kChippedGoal: {
      _this->_internal_mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(
          from._internal_chipped_goal());
      break;
    }
    case kKickTimeout: {
      _this->_internal_mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(
          from._internal_kick_timeout());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      _this->_internal_mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(
          from._internal_attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      _this->_internal_mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(
          from._internal_attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotCrashUniqueSkipped: {
      _this->_internal_mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(
          from._internal_bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBotSkipped: {
      _this->_internal_mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(
          from._internal_bot_pushed_bot_skipped());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      _this->_internal_mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(
          from._internal_defender_in_defense_area_partially());
      break;
    }
    case kMultiplePlacementFailures: {
      _this->_internal_mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(
          from._internal_multiple_placement_failures());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:GameEvent)
}

inline void GameEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){arena}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.event_){}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_event();
}

GameEvent::~GameEvent() {
  // @@protoc_insertion_point(destructor:GameEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.origin_.~RepeatedPtrField();
  if (has_event()) {
    clear_event();
  }
}

void GameEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:GameEvent)
  switch (event_case()) {
    case kBallLeftFieldTouchLine: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ball_left_field_touch_line_;
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.ball_left_field_goal_line_;
      }
      break;
    }
    case kAimlessKick: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.aimless_kick_;
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.attacker_too_close_to_defense_area_;
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.defender_in_defense_area_;
      }
      break;
    }
    case kBoundaryCrossing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.boundary_crossing_;
      }
      break;
    }
    case kKeeperHeldBall: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.keeper_held_ball_;
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_dribbled_ball_too_far_;
      }
      break;
    }
    case kBotPushedBot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_pushed_bot_;
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_held_ball_deliberately_;
      }
      break;
    }
    case kBotTippedOver: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_tipped_over_;
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.attacker_touched_ball_in_defense_area_;
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_kicked_ball_too_fast_;
      }
      break;
    }
    case kBotCrashUnique: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_crash_unique_;
      }
      break;
    }
    case kBotCrashDrawn: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_crash_drawn_;
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.defender_too_close_to_kick_point_;
      }
      break;
    }
    case kBotTooFastInStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_too_fast_in_stop_;
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_interfered_placement_;
      }
      break;
    }
    case kPossibleGoal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.possible_goal_;
      }
      break;
    }
    case kGoal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.goal_;
      }
      break;
    }
    case kInvalidGoal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.invalid_goal_;
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.attacker_double_touched_ball_;
      }
      break;
    }
    case kPlacementSucceeded: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.placement_succeeded_;
      }
      break;
    }
    case kPenaltyKickFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.penalty_kick_failed_;
      }
      break;
    }
    case kNoProgressInGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.no_progress_in_game_;
      }
      break;
    }
    case kPlacementFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.placement_failed_;
      }
      break;
    }
    case kMultipleCards: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.multiple_cards_;
      }
      break;
    }
    case kMultipleFouls: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.multiple_fouls_;
      }
      break;
    }
    case kBotSubstitution: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_substitution_;
      }
      break;
    }
    case kTooManyRobots: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.too_many_robots_;
      }
      break;
    }
    case kChallengeFlag: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.challenge_flag_;
      }
      break;
    }
    case kEmergencyStop: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.emergency_stop_;
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.unsporting_behavior_minor_;
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.unsporting_behavior_major_;
      }
      break;
    }
    case kPrepared: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.prepared_;
      }
      break;
    }
    case kIndirectGoal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.indirect_goal_;
      }
      break;
    }
    case kChippedGoal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.chipped_goal_;
      }
      break;
    }
    case kKickTimeout: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.kick_timeout_;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.attacker_touched_opponent_in_defense_area_;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.attacker_touched_opponent_in_defense_area_skipped_;
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_crash_unique_skipped_;
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.bot_pushed_bot_skipped_;
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.defender_in_defense_area_partially_;
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.event_.multiple_placement_failures_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}


void GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.origin_.Clear();
  _impl_.type_ = 0;
  clear_event();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .GameEvent.Prepared prepared = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prepared(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.NoProgressInGame no_progress_in_game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_no_progress_in_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.PlacementFailed placement_failed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_failed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.PlacementSucceeded placement_succeeded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_placement_succeeded(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_left_field_touch_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_left_field_goal_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.Goal goal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_indirect_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_chipped_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.AimlessKick aimless_kick = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_aimless_kick(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_keeper_held_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_double_touched_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_ball_in_defense_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_opponent_in_defense_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_dribbled_ball_too_far(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_kicked_ball_too_fast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_too_close_to_defense_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_interfered_placement(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_drawn(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotCrashUnique bot_crash_unique = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_unique(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_crash_unique_skipped(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotPushedBot bot_pushed_bot = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_pushed_bot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_pushed_bot_skipped(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_held_ball_deliberately(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotTippedOver bot_tipped_over = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_tipped_over(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_too_fast_in_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender_too_close_to_kick_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender_in_defense_area_partially(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_defender_in_defense_area(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.MultipleCards multiple_cards = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_cards(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_placement_failures(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.MultipleFouls multiple_fouls = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_fouls(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsporting_behavior_minor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsporting_behavior_major(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BotSubstitution bot_substitution = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_substitution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.TooManyRobots too_many_robots = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_too_many_robots(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.Goal possible_goal = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_possible_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GameEvent.Type type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GameEvent_Type_IsValid(val))) {
            _internal_set_type(static_cast<::GameEvent_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated string origin = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_origin();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "GameEvent.origin");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacker_touched_opponent_in_defense_area_skipped(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.BoundaryCrossing boundary_crossing = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundary_crossing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.Goal invalid_goal = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_invalid_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_penalty_kick_failed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.ChallengeFlag challenge_flag = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_challenge_flag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .GameEvent.EmergencyStop emergency_stop = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_emergency_stop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (event_case()) {
    case kPrepared: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::prepared(this),
          _Internal::prepared(this).GetCachedSize(), target, stream);
      break;
    }
    case kNoProgressInGame: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::no_progress_in_game(this),
          _Internal::no_progress_in_game(this).GetCachedSize(), target, stream);
      break;
    }
    case kPlacementFailed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::placement_failed(this),
          _Internal::placement_failed(this).GetCachedSize(), target, stream);
      break;
    }
    case kPlacementSucceeded: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::placement_succeeded(this),
          _Internal::placement_succeeded(this).GetCachedSize(), target, stream);
      break;
    }
    case kBallLeftFieldTouchLine: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::ball_left_field_touch_line(this),
          _Internal::ball_left_field_touch_line(this).GetCachedSize(), target, stream);
      break;
    }
    case kBallLeftFieldGoalLine: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::ball_left_field_goal_line(this),
          _Internal::ball_left_field_goal_line(this).GetCachedSize(), target, stream);
      break;
    }
    case kGoal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::goal(this),
          _Internal::goal(this).GetCachedSize(), target, stream);
      break;
    }
    case kIndirectGoal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::indirect_goal(this),
          _Internal::indirect_goal(this).GetCachedSize(), target, stream);
      break;
    }
    case kChippedGoal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::chipped_goal(this),
          _Internal::chipped_goal(this).GetCachedSize(), target, stream);
      break;
    }
    case kAimlessKick: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::aimless_kick(this),
          _Internal::aimless_kick(this).GetCachedSize(), target, stream);
      break;
    }
    case kKickTimeout: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::kick_timeout(this),
          _Internal::kick_timeout(this).GetCachedSize(), target, stream);
      break;
    }
    case kKeeperHeldBall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::keeper_held_ball(this),
          _Internal::keeper_held_ball(this).GetCachedSize(), target, stream);
      break;
    }
    case kAttackerDoubleTouchedBall: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::attacker_double_touched_ball(this),
          _Internal::attacker_double_touched_ball(this).GetCachedSize(), target, stream);
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::attacker_touched_ball_in_defense_area(this),
          _Internal::attacker_touched_ball_in_defense_area(this).GetCachedSize(), target, stream);
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::attacker_touched_opponent_in_defense_area(this),
          _Internal::attacker_touched_opponent_in_defense_area(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotDribbledBallTooFar: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::bot_dribbled_ball_too_far(this),
          _Internal::bot_dribbled_ball_too_far(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotKickedBallTooFast: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::bot_kicked_ball_too_fast(this),
          _Internal::bot_kicked_ball_too_fast(this).GetCachedSize(), target, stream);
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, _Internal::attacker_too_close_to_defense_area(this),
          _Internal::attacker_too_close_to_defense_area(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotInterferedPlacement: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, _Internal::bot_interfered_placement(this),
          _Internal::bot_interfered_placement(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotCrashDrawn: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, _Internal::bot_crash_drawn(this),
          _Internal::bot_crash_drawn(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotCrashUnique: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, _Internal::bot_crash_unique(this),
          _Internal::bot_crash_unique(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotCrashUniqueSkipped: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, _Internal::bot_crash_unique_skipped(this),
          _Internal::bot_crash_unique_skipped(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotPushedBot: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, _Internal::bot_pushed_bot(this),
          _Internal::bot_pushed_bot(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotPushedBotSkipped: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, _Internal::bot_pushed_bot_skipped(this),
          _Internal::bot_pushed_bot_skipped(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotHeldBallDeliberately: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, _Internal::bot_held_ball_deliberately(this),
          _Internal::bot_held_ball_deliberately(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotTippedOver: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(27, _Internal::bot_tipped_over(this),
          _Internal::bot_tipped_over(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotTooFastInStop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(28, _Internal::bot_too_fast_in_stop(this),
          _Internal::bot_too_fast_in_stop(this).GetCachedSize(), target, stream);
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(29, _Internal::defender_too_close_to_kick_point(this),
          _Internal::defender_too_close_to_kick_point(this).GetCachedSize(), target, stream);
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(30, _Internal::defender_in_defense_area_partially(this),
          _Internal::defender_in_defense_area_partially(this).GetCachedSize(), target, stream);
      break;
    }
    case kDefenderInDefenseArea: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(31, _Internal::defender_in_defense_area(this),
          _Internal::defender_in_defense_area(this).GetCachedSize(), target, stream);
      break;
    }
    case kMultipleCards: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(32, _Internal::multiple_cards(this),
          _Internal::multiple_cards(this).GetCachedSize(), target, stream);
      break;
    }
    case kMultiplePlacementFailures: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(33, _Internal::multiple_placement_failures(this),
          _Internal::multiple_placement_failures(this).GetCachedSize(), target, stream);
      break;
    }
    case kMultipleFouls: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(34, _Internal::multiple_fouls(this),
          _Internal::multiple_fouls(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnsportingBehaviorMinor: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(35, _Internal::unsporting_behavior_minor(this),
          _Internal::unsporting_behavior_minor(this).GetCachedSize(), target, stream);
      break;
    }
    case kUnsportingBehaviorMajor: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(36, _Internal::unsporting_behavior_major(this),
          _Internal::unsporting_behavior_major(this).GetCachedSize(), target, stream);
      break;
    }
    case kBotSubstitution: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(37, _Internal::bot_substitution(this),
          _Internal::bot_substitution(this).GetCachedSize(), target, stream);
      break;
    }
    case kTooManyRobots: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(38, _Internal::too_many_robots(this),
          _Internal::too_many_robots(this).GetCachedSize(), target, stream);
      break;
    }
    case kPossibleGoal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(39, _Internal::possible_goal(this),
          _Internal::possible_goal(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _impl_._has_bits_[0];
  // optional .GameEvent.Type type = 40;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      40, this->_internal_type(), target);
  }

  // repeated string origin = 41;
  for (int i = 0, n = this->_internal_origin_size(); i < n; i++) {
    const auto& s = this->_internal_origin(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "GameEvent.origin");
    target = stream->WriteString(41, s, target);
  }

  switch (event_case()) {
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(42, _Internal::attacker_touched_opponent_in_defense_area_skipped(this),
          _Internal::attacker_touched_opponent_in_defense_area_skipped(this).GetCachedSize(), target, stream);
      break;
    }
    case kBoundaryCrossing: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(43, _Internal::boundary_crossing(this),
          _Internal::boundary_crossing(this).GetCachedSize(), target, stream);
      break;
    }
    case kInvalidGoal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(44, _Internal::invalid_goal(this),
          _Internal::invalid_goal(this).GetCachedSize(), target, stream);
      break;
    }
    case kPenaltyKickFailed: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(45, _Internal::penalty_kick_failed(this),
          _Internal::penalty_kick_failed(this).GetCachedSize(), target, stream);
      break;
    }
    case kChallengeFlag: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(46, _Internal::challenge_flag(this),
          _Internal::challenge_flag(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmergencyStop: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(47, _Internal::emergency_stop(this),
          _Internal::emergency_stop(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEvent)
  return target;
}

size_t GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string origin = 41;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.origin_.size());
  for (int i = 0, n = _impl_.origin_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.origin_.Get(i));
  }

  // optional .GameEvent.Type type = 40;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (event_case()) {
    // .GameEvent.BallLeftField ball_left_field_touch_line = 6;
    case kBallLeftFieldTouchLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ball_left_field_touch_line_);
      break;
    }
    // .GameEvent.BallLeftField ball_left_field_goal_line = 7;
    case kBallLeftFieldGoalLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.ball_left_field_goal_line_);
      break;
    }
    // .GameEvent.AimlessKick aimless_kick = 11;
    case kAimlessKick: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.aimless_kick_);
      break;
    }
    // .GameEvent.AttackerTooCloseToDefenseArea attacker_too_close_to_defense_area = 19;
    case kAttackerTooCloseToDefenseArea: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.attacker_too_close_to_defense_area_);
      break;
    }
    // .GameEvent.DefenderInDefenseArea defender_in_defense_area = 31;
    case kDefenderInDefenseArea: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.defender_in_defense_area_);
      break;
    }
    // .GameEvent.BoundaryCrossing boundary_crossing = 43;
    case kBoundaryCrossing: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.boundary_crossing_);
      break;
    }
    // .GameEvent.KeeperHeldBall keeper_held_ball = 13;
    case kKeeperHeldBall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.keeper_held_ball_);
      break;
    }
    // .GameEvent.BotDribbledBallTooFar bot_dribbled_ball_too_far = 17;
    case kBotDribbledBallTooFar: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_dribbled_ball_too_far_);
      break;
    }
    // .GameEvent.BotPushedBot bot_pushed_bot = 24;
    case kBotPushedBot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_pushed_bot_);
      break;
    }
    // .GameEvent.BotHeldBallDeliberately bot_held_ball_deliberately = 26;
    case kBotHeldBallDeliberately: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_held_ball_deliberately_);
      break;
    }
    // .GameEvent.BotTippedOver bot_tipped_over = 27;
    case kBotTippedOver: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_tipped_over_);
      break;
    }
    // .GameEvent.AttackerTouchedBallInDefenseArea attacker_touched_ball_in_defense_area = 15;
    case kAttackerTouchedBallInDefenseArea: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.attacker_touched_ball_in_defense_area_);
      break;
    }
    // .GameEvent.BotKickedBallTooFast bot_kicked_ball_too_fast = 18;
    case kBotKickedBallTooFast: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_kicked_ball_too_fast_);
      break;
    }
    // .GameEvent.BotCrashUnique bot_crash_unique = 22;
    case kBotCrashUnique: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_crash_unique_);
      break;
    }
    // .GameEvent.BotCrashDrawn bot_crash_drawn = 21;
    case kBotCrashDrawn: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_crash_drawn_);
      break;
    }
    // .GameEvent.DefenderTooCloseToKickPoint defender_too_close_to_kick_point = 29;
    case kDefenderTooCloseToKickPoint: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.defender_too_close_to_kick_point_);
      break;
    }
    // .GameEvent.BotTooFastInStop bot_too_fast_in_stop = 28;
    case kBotTooFastInStop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_too_fast_in_stop_);
      break;
    }
    // .GameEvent.BotInterferedPlacement bot_interfered_placement = 20;
    case kBotInterferedPlacement: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_interfered_placement_);
      break;
    }
    // .GameEvent.Goal possible_goal = 39;
    case kPossibleGoal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.possible_goal_);
      break;
    }
    // .GameEvent.Goal goal = 8;
    case kGoal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.goal_);
      break;
    }
    // .GameEvent.Goal invalid_goal = 44;
    case kInvalidGoal: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.invalid_goal_);
      break;
    }
    // .GameEvent.AttackerDoubleTouchedBall attacker_double_touched_ball = 14;
    case kAttackerDoubleTouchedBall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.attacker_double_touched_ball_);
      break;
    }
    // .GameEvent.PlacementSucceeded placement_succeeded = 5;
    case kPlacementSucceeded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.placement_succeeded_);
      break;
    }
    // .GameEvent.PenaltyKickFailed penalty_kick_failed = 45;
    case kPenaltyKickFailed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.penalty_kick_failed_);
      break;
    }
    // .GameEvent.NoProgressInGame no_progress_in_game = 2;
    case kNoProgressInGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.no_progress_in_game_);
      break;
    }
    // .GameEvent.PlacementFailed placement_failed = 3;
    case kPlacementFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.placement_failed_);
      break;
    }
    // .GameEvent.MultipleCards multiple_cards = 32;
    case kMultipleCards: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.multiple_cards_);
      break;
    }
    // .GameEvent.MultipleFouls multiple_fouls = 34;
    case kMultipleFouls: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.multiple_fouls_);
      break;
    }
    // .GameEvent.BotSubstitution bot_substitution = 37;
    case kBotSubstitution: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_substitution_);
      break;
    }
    // .GameEvent.TooManyRobots too_many_robots = 38;
    case kTooManyRobots: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.too_many_robots_);
      break;
    }
    // .GameEvent.ChallengeFlag challenge_flag = 46;
    case kChallengeFlag: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.challenge_flag_);
      break;
    }
    // .GameEvent.EmergencyStop emergency_stop = 47;
    case kEmergencyStop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.emergency_stop_);
      break;
    }
    // .GameEvent.UnsportingBehaviorMinor unsporting_behavior_minor = 35;
    case kUnsportingBehaviorMinor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.unsporting_behavior_minor_);
      break;
    }
    // .GameEvent.UnsportingBehaviorMajor unsporting_behavior_major = 36;
    case kUnsportingBehaviorMajor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.unsporting_behavior_major_);
      break;
    }
    // .GameEvent.Prepared prepared = 1 [deprecated = true];
    case kPrepared: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.prepared_);
      break;
    }
    // .GameEvent.IndirectGoal indirect_goal = 9 [deprecated = true];
    case kIndirectGoal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.indirect_goal_);
      break;
    }
    // .GameEvent.ChippedGoal chipped_goal = 10 [deprecated = true];
    case kChippedGoal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.chipped_goal_);
      break;
    }
    // .GameEvent.KickTimeout kick_timeout = 12 [deprecated = true];
    case kKickTimeout: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.kick_timeout_);
      break;
    }
    // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area = 16 [deprecated = true];
    case kAttackerTouchedOpponentInDefenseArea: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.attacker_touched_opponent_in_defense_area_);
      break;
    }
    // .GameEvent.AttackerTouchedOpponentInDefenseArea attacker_touched_opponent_in_defense_area_skipped = 42 [deprecated = true];
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_);
      break;
    }
    // .GameEvent.BotCrashUnique bot_crash_unique_skipped = 23 [deprecated = true];
    case kBotCrashUniqueSkipped: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_crash_unique_skipped_);
      break;
    }
    // .GameEvent.BotPushedBot bot_pushed_bot_skipped = 25 [deprecated = true];
    case kBotPushedBotSkipped: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.bot_pushed_bot_skipped_);
      break;
    }
    // .GameEvent.DefenderInDefenseAreaPartially defender_in_defense_area_partially = 30 [deprecated = true];
    case kDefenderInDefenseAreaPartially: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.defender_in_defense_area_partially_);
      break;
    }
    // .GameEvent.MultiplePlacementFailures multiple_placement_failures = 33 [deprecated = true];
    case kMultiplePlacementFailures: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.event_.multiple_placement_failures_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEvent::GetClassData() const { return &_class_data_; }


void GameEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEvent*>(&to_msg);
  auto& from = static_cast<const GameEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.origin_.MergeFrom(from._impl_.origin_);
  if (from._internal_has_type()) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.event_case()) {
    case kBallLeftFieldTouchLine: {
      _this->_internal_mutable_ball_left_field_touch_line()->::GameEvent_BallLeftField::MergeFrom(
          from._internal_ball_left_field_touch_line());
      break;
    }
    case kBallLeftFieldGoalLine: {
      _this->_internal_mutable_ball_left_field_goal_line()->::GameEvent_BallLeftField::MergeFrom(
          from._internal_ball_left_field_goal_line());
      break;
    }
    case kAimlessKick: {
      _this->_internal_mutable_aimless_kick()->::GameEvent_AimlessKick::MergeFrom(
          from._internal_aimless_kick());
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      _this->_internal_mutable_attacker_too_close_to_defense_area()->::GameEvent_AttackerTooCloseToDefenseArea::MergeFrom(
          from._internal_attacker_too_close_to_defense_area());
      break;
    }
    case kDefenderInDefenseArea: {
      _this->_internal_mutable_defender_in_defense_area()->::GameEvent_DefenderInDefenseArea::MergeFrom(
          from._internal_defender_in_defense_area());
      break;
    }
    case kBoundaryCrossing: {
      _this->_internal_mutable_boundary_crossing()->::GameEvent_BoundaryCrossing::MergeFrom(
          from._internal_boundary_crossing());
      break;
    }
    case kKeeperHeldBall: {
      _this->_internal_mutable_keeper_held_ball()->::GameEvent_KeeperHeldBall::MergeFrom(
          from._internal_keeper_held_ball());
      break;
    }
    case kBotDribbledBallTooFar: {
      _this->_internal_mutable_bot_dribbled_ball_too_far()->::GameEvent_BotDribbledBallTooFar::MergeFrom(
          from._internal_bot_dribbled_ball_too_far());
      break;
    }
    case kBotPushedBot: {
      _this->_internal_mutable_bot_pushed_bot()->::GameEvent_BotPushedBot::MergeFrom(
          from._internal_bot_pushed_bot());
      break;
    }
    case kBotHeldBallDeliberately: {
      _this->_internal_mutable_bot_held_ball_deliberately()->::GameEvent_BotHeldBallDeliberately::MergeFrom(
          from._internal_bot_held_ball_deliberately());
      break;
    }
    case kBotTippedOver: {
      _this->_internal_mutable_bot_tipped_over()->::GameEvent_BotTippedOver::MergeFrom(
          from._internal_bot_tipped_over());
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      _this->_internal_mutable_attacker_touched_ball_in_defense_area()->::GameEvent_AttackerTouchedBallInDefenseArea::MergeFrom(
          from._internal_attacker_touched_ball_in_defense_area());
      break;
    }
    case kBotKickedBallTooFast: {
      _this->_internal_mutable_bot_kicked_ball_too_fast()->::GameEvent_BotKickedBallTooFast::MergeFrom(
          from._internal_bot_kicked_ball_too_fast());
      break;
    }
    case kBotCrashUnique: {
      _this->_internal_mutable_bot_crash_unique()->::GameEvent_BotCrashUnique::MergeFrom(
          from._internal_bot_crash_unique());
      break;
    }
    case kBotCrashDrawn: {
      _this->_internal_mutable_bot_crash_drawn()->::GameEvent_BotCrashDrawn::MergeFrom(
          from._internal_bot_crash_drawn());
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      _this->_internal_mutable_defender_too_close_to_kick_point()->::GameEvent_DefenderTooCloseToKickPoint::MergeFrom(
          from._internal_defender_too_close_to_kick_point());
      break;
    }
    case kBotTooFastInStop: {
      _this->_internal_mutable_bot_too_fast_in_stop()->::GameEvent_BotTooFastInStop::MergeFrom(
          from._internal_bot_too_fast_in_stop());
      break;
    }
    case kBotInterferedPlacement: {
      _this->_internal_mutable_bot_interfered_placement()->::GameEvent_BotInterferedPlacement::MergeFrom(
          from._internal_bot_interfered_placement());
      break;
    }
    case kPossibleGoal: {
      _this->_internal_mutable_possible_goal()->::GameEvent_Goal::MergeFrom(
          from._internal_possible_goal());
      break;
    }
    case kGoal: {
      _this->_internal_mutable_goal()->::GameEvent_Goal::MergeFrom(
          from._internal_goal());
      break;
    }
    case kInvalidGoal: {
      _this->_internal_mutable_invalid_goal()->::GameEvent_Goal::MergeFrom(
          from._internal_invalid_goal());
      break;
    }
    case kAttackerDoubleTouchedBall: {
      _this->_internal_mutable_attacker_double_touched_ball()->::GameEvent_AttackerDoubleTouchedBall::MergeFrom(
          from._internal_attacker_double_touched_ball());
      break;
    }
    case kPlacementSucceeded: {
      _this->_internal_mutable_placement_succeeded()->::GameEvent_PlacementSucceeded::MergeFrom(
          from._internal_placement_succeeded());
      break;
    }
    case kPenaltyKickFailed: {
      _this->_internal_mutable_penalty_kick_failed()->::GameEvent_PenaltyKickFailed::MergeFrom(
          from._internal_penalty_kick_failed());
      break;
    }
    case kNoProgressInGame: {
      _this->_internal_mutable_no_progress_in_game()->::GameEvent_NoProgressInGame::MergeFrom(
          from._internal_no_progress_in_game());
      break;
    }
    case kPlacementFailed: {
      _this->_internal_mutable_placement_failed()->::GameEvent_PlacementFailed::MergeFrom(
          from._internal_placement_failed());
      break;
    }
    case kMultipleCards: {
      _this->_internal_mutable_multiple_cards()->::GameEvent_MultipleCards::MergeFrom(
          from._internal_multiple_cards());
      break;
    }
    case kMultipleFouls: {
      _this->_internal_mutable_multiple_fouls()->::GameEvent_MultipleFouls::MergeFrom(
          from._internal_multiple_fouls());
      break;
    }
    case kBotSubstitution: {
      _this->_internal_mutable_bot_substitution()->::GameEvent_BotSubstitution::MergeFrom(
          from._internal_bot_substitution());
      break;
    }
    case kTooManyRobots: {
      _this->_internal_mutable_too_many_robots()->::GameEvent_TooManyRobots::MergeFrom(
          from._internal_too_many_robots());
      break;
    }
    case kChallengeFlag: {
      _this->_internal_mutable_challenge_flag()->::GameEvent_ChallengeFlag::MergeFrom(
          from._internal_challenge_flag());
      break;
    }
    case kEmergencyStop: {
      _this->_internal_mutable_emergency_stop()->::GameEvent_EmergencyStop::MergeFrom(
          from._internal_emergency_stop());
      break;
    }
    case kUnsportingBehaviorMinor: {
      _this->_internal_mutable_unsporting_behavior_minor()->::GameEvent_UnsportingBehaviorMinor::MergeFrom(
          from._internal_unsporting_behavior_minor());
      break;
    }
    case kUnsportingBehaviorMajor: {
      _this->_internal_mutable_unsporting_behavior_major()->::GameEvent_UnsportingBehaviorMajor::MergeFrom(
          from._internal_unsporting_behavior_major());
      break;
    }
    case kPrepared: {
      _this->_internal_mutable_prepared()->::GameEvent_Prepared::MergeFrom(
          from._internal_prepared());
      break;
    }
    case kIndirectGoal: {
      _this->_internal_mutable_indirect_goal()->::GameEvent_IndirectGoal::MergeFrom(
          from._internal_indirect_goal());
      break;
    }
    case kChippedGoal: {
      _this->_internal_mutable_chipped_goal()->::GameEvent_ChippedGoal::MergeFrom(
          from._internal_chipped_goal());
      break;
    }
    case kKickTimeout: {
      _this->_internal_mutable_kick_timeout()->::GameEvent_KickTimeout::MergeFrom(
          from._internal_kick_timeout());
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      _this->_internal_mutable_attacker_touched_opponent_in_defense_area()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(
          from._internal_attacker_touched_opponent_in_defense_area());
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      _this->_internal_mutable_attacker_touched_opponent_in_defense_area_skipped()->::GameEvent_AttackerTouchedOpponentInDefenseArea::MergeFrom(
          from._internal_attacker_touched_opponent_in_defense_area_skipped());
      break;
    }
    case kBotCrashUniqueSkipped: {
      _this->_internal_mutable_bot_crash_unique_skipped()->::GameEvent_BotCrashUnique::MergeFrom(
          from._internal_bot_crash_unique_skipped());
      break;
    }
    case kBotPushedBotSkipped: {
      _this->_internal_mutable_bot_pushed_bot_skipped()->::GameEvent_BotPushedBot::MergeFrom(
          from._internal_bot_pushed_bot_skipped());
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      _this->_internal_mutable_defender_in_defense_area_partially()->::GameEvent_DefenderInDefenseAreaPartially::MergeFrom(
          from._internal_defender_in_defense_area_partially());
      break;
    }
    case kMultiplePlacementFailures: {
      _this->_internal_mutable_multiple_placement_failures()->::GameEvent_MultiplePlacementFailures::MergeFrom(
          from._internal_multiple_placement_failures());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEvent::CopyFrom(const GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEvent::IsInitialized() const {
  switch (event_case()) {
    case kBallLeftFieldTouchLine: {
      if (_internal_has_ball_left_field_touch_line()) {
        if (!_impl_.event_.ball_left_field_touch_line_->IsInitialized()) return false;
      }
      break;
    }
    case kBallLeftFieldGoalLine: {
      if (_internal_has_ball_left_field_goal_line()) {
        if (!_impl_.event_.ball_left_field_goal_line_->IsInitialized()) return false;
      }
      break;
    }
    case kAimlessKick: {
      if (_internal_has_aimless_kick()) {
        if (!_impl_.event_.aimless_kick_->IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTooCloseToDefenseArea: {
      if (_internal_has_attacker_too_close_to_defense_area()) {
        if (!_impl_.event_.attacker_too_close_to_defense_area_->IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseArea: {
      if (_internal_has_defender_in_defense_area()) {
        if (!_impl_.event_.defender_in_defense_area_->IsInitialized()) return false;
      }
      break;
    }
    case kBoundaryCrossing: {
      if (_internal_has_boundary_crossing()) {
        if (!_impl_.event_.boundary_crossing_->IsInitialized()) return false;
      }
      break;
    }
    case kKeeperHeldBall: {
      if (_internal_has_keeper_held_ball()) {
        if (!_impl_.event_.keeper_held_ball_->IsInitialized()) return false;
      }
      break;
    }
    case kBotDribbledBallTooFar: {
      if (_internal_has_bot_dribbled_ball_too_far()) {
        if (!_impl_.event_.bot_dribbled_ball_too_far_->IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBot: {
      if (_internal_has_bot_pushed_bot()) {
        if (!_impl_.event_.bot_pushed_bot_->IsInitialized()) return false;
      }
      break;
    }
    case kBotHeldBallDeliberately: {
      if (_internal_has_bot_held_ball_deliberately()) {
        if (!_impl_.event_.bot_held_ball_deliberately_->IsInitialized()) return false;
      }
      break;
    }
    case kBotTippedOver: {
      if (_internal_has_bot_tipped_over()) {
        if (!_impl_.event_.bot_tipped_over_->IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedBallInDefenseArea: {
      if (_internal_has_attacker_touched_ball_in_defense_area()) {
        if (!_impl_.event_.attacker_touched_ball_in_defense_area_->IsInitialized()) return false;
      }
      break;
    }
    case kBotKickedBallTooFast: {
      if (_internal_has_bot_kicked_ball_too_fast()) {
        if (!_impl_.event_.bot_kicked_ball_too_fast_->IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUnique: {
      if (_internal_has_bot_crash_unique()) {
        if (!_impl_.event_.bot_crash_unique_->IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashDrawn: {
      if (_internal_has_bot_crash_drawn()) {
        if (!_impl_.event_.bot_crash_drawn_->IsInitialized()) return false;
      }
      break;
    }
    case kDefenderTooCloseToKickPoint: {
      if (_internal_has_defender_too_close_to_kick_point()) {
        if (!_impl_.event_.defender_too_close_to_kick_point_->IsInitialized()) return false;
      }
      break;
    }
    case kBotTooFastInStop: {
      if (_internal_has_bot_too_fast_in_stop()) {
        if (!_impl_.event_.bot_too_fast_in_stop_->IsInitialized()) return false;
      }
      break;
    }
    case kBotInterferedPlacement: {
      if (_internal_has_bot_interfered_placement()) {
        if (!_impl_.event_.bot_interfered_placement_->IsInitialized()) return false;
      }
      break;
    }
    case kPossibleGoal: {
      if (_internal_has_possible_goal()) {
        if (!_impl_.event_.possible_goal_->IsInitialized()) return false;
      }
      break;
    }
    case kGoal: {
      if (_internal_has_goal()) {
        if (!_impl_.event_.goal_->IsInitialized()) return false;
      }
      break;
    }
    case kInvalidGoal: {
      if (_internal_has_invalid_goal()) {
        if (!_impl_.event_.invalid_goal_->IsInitialized()) return false;
      }
      break;
    }
    case kAttackerDoubleTouchedBall: {
      if (_internal_has_attacker_double_touched_ball()) {
        if (!_impl_.event_.attacker_double_touched_ball_->IsInitialized()) return false;
      }
      break;
    }
    case kPlacementSucceeded: {
      if (_internal_has_placement_succeeded()) {
        if (!_impl_.event_.placement_succeeded_->IsInitialized()) return false;
      }
      break;
    }
    case kPenaltyKickFailed: {
      if (_internal_has_penalty_kick_failed()) {
        if (!_impl_.event_.penalty_kick_failed_->IsInitialized()) return false;
      }
      break;
    }
    case kNoProgressInGame: {
      if (_internal_has_no_progress_in_game()) {
        if (!_impl_.event_.no_progress_in_game_->IsInitialized()) return false;
      }
      break;
    }
    case kPlacementFailed: {
      if (_internal_has_placement_failed()) {
        if (!_impl_.event_.placement_failed_->IsInitialized()) return false;
      }
      break;
    }
    case kMultipleCards: {
      if (_internal_has_multiple_cards()) {
        if (!_impl_.event_.multiple_cards_->IsInitialized()) return false;
      }
      break;
    }
    case kMultipleFouls: {
      if (_internal_has_multiple_fouls()) {
        if (!_impl_.event_.multiple_fouls_->IsInitialized()) return false;
      }
      break;
    }
    case kBotSubstitution: {
      if (_internal_has_bot_substitution()) {
        if (!_impl_.event_.bot_substitution_->IsInitialized()) return false;
      }
      break;
    }
    case kTooManyRobots: {
      if (_internal_has_too_many_robots()) {
        if (!_impl_.event_.too_many_robots_->IsInitialized()) return false;
      }
      break;
    }
    case kChallengeFlag: {
      if (_internal_has_challenge_flag()) {
        if (!_impl_.event_.challenge_flag_->IsInitialized()) return false;
      }
      break;
    }
    case kEmergencyStop: {
      if (_internal_has_emergency_stop()) {
        if (!_impl_.event_.emergency_stop_->IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMinor: {
      if (_internal_has_unsporting_behavior_minor()) {
        if (!_impl_.event_.unsporting_behavior_minor_->IsInitialized()) return false;
      }
      break;
    }
    case kUnsportingBehaviorMajor: {
      if (_internal_has_unsporting_behavior_major()) {
        if (!_impl_.event_.unsporting_behavior_major_->IsInitialized()) return false;
      }
      break;
    }
    case kPrepared: {
      break;
    }
    case kIndirectGoal: {
      if (_internal_has_indirect_goal()) {
        if (!_impl_.event_.indirect_goal_->IsInitialized()) return false;
      }
      break;
    }
    case kChippedGoal: {
      if (_internal_has_chipped_goal()) {
        if (!_impl_.event_.chipped_goal_->IsInitialized()) return false;
      }
      break;
    }
    case kKickTimeout: {
      if (_internal_has_kick_timeout()) {
        if (!_impl_.event_.kick_timeout_->IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseArea: {
      if (_internal_has_attacker_touched_opponent_in_defense_area()) {
        if (!_impl_.event_.attacker_touched_opponent_in_defense_area_->IsInitialized()) return false;
      }
      break;
    }
    case kAttackerTouchedOpponentInDefenseAreaSkipped: {
      if (_internal_has_attacker_touched_opponent_in_defense_area_skipped()) {
        if (!_impl_.event_.attacker_touched_opponent_in_defense_area_skipped_->IsInitialized()) return false;
      }
      break;
    }
    case kBotCrashUniqueSkipped: {
      if (_internal_has_bot_crash_unique_skipped()) {
        if (!_impl_.event_.bot_crash_unique_skipped_->IsInitialized()) return false;
      }
      break;
    }
    case kBotPushedBotSkipped: {
      if (_internal_has_bot_pushed_bot_skipped()) {
        if (!_impl_.event_.bot_pushed_bot_skipped_->IsInitialized()) return false;
      }
      break;
    }
    case kDefenderInDefenseAreaPartially: {
      if (_internal_has_defender_in_defense_area_partially()) {
        if (!_impl_.event_.defender_in_defense_area_partially_->IsInitialized()) return false;
      }
      break;
    }
    case kMultiplePlacementFailures: {
      if (_internal_has_multiple_placement_failures()) {
        if (!_impl_.event_.multiple_placement_failures_->IsInitialized()) return false;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  return true;
}

void GameEvent::InternalSwap(GameEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.origin_.InternalSwap(&other->_impl_.origin_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_.event_, other->_impl_.event_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_getter, &descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto_once,
      file_level_metadata_ssl_5fgc_5fgame_5fevent_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::GameEvent_BallLeftField*
Arena::CreateMaybeMessage< ::GameEvent_BallLeftField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BallLeftField >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AimlessKick*
Arena::CreateMaybeMessage< ::GameEvent_AimlessKick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AimlessKick >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_Goal*
Arena::CreateMaybeMessage< ::GameEvent_Goal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_Goal >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_IndirectGoal*
Arena::CreateMaybeMessage< ::GameEvent_IndirectGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_IndirectGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_ChippedGoal*
Arena::CreateMaybeMessage< ::GameEvent_ChippedGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_ChippedGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotTooFastInStop*
Arena::CreateMaybeMessage< ::GameEvent_BotTooFastInStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotTooFastInStop >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_DefenderTooCloseToKickPoint*
Arena::CreateMaybeMessage< ::GameEvent_DefenderTooCloseToKickPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_DefenderTooCloseToKickPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotCrashDrawn*
Arena::CreateMaybeMessage< ::GameEvent_BotCrashDrawn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotCrashDrawn >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotCrashUnique*
Arena::CreateMaybeMessage< ::GameEvent_BotCrashUnique >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotCrashUnique >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotPushedBot*
Arena::CreateMaybeMessage< ::GameEvent_BotPushedBot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotPushedBot >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotTippedOver*
Arena::CreateMaybeMessage< ::GameEvent_BotTippedOver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotTippedOver >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_DefenderInDefenseArea*
Arena::CreateMaybeMessage< ::GameEvent_DefenderInDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_DefenderInDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_DefenderInDefenseAreaPartially*
Arena::CreateMaybeMessage< ::GameEvent_DefenderInDefenseAreaPartially >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_DefenderInDefenseAreaPartially >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerTouchedBallInDefenseArea*
Arena::CreateMaybeMessage< ::GameEvent_AttackerTouchedBallInDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerTouchedBallInDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotKickedBallTooFast*
Arena::CreateMaybeMessage< ::GameEvent_BotKickedBallTooFast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotKickedBallTooFast >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotDribbledBallTooFar*
Arena::CreateMaybeMessage< ::GameEvent_BotDribbledBallTooFar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotDribbledBallTooFar >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerTouchedOpponentInDefenseArea*
Arena::CreateMaybeMessage< ::GameEvent_AttackerTouchedOpponentInDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerTouchedOpponentInDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerDoubleTouchedBall*
Arena::CreateMaybeMessage< ::GameEvent_AttackerDoubleTouchedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerDoubleTouchedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_AttackerTooCloseToDefenseArea*
Arena::CreateMaybeMessage< ::GameEvent_AttackerTooCloseToDefenseArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_AttackerTooCloseToDefenseArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotHeldBallDeliberately*
Arena::CreateMaybeMessage< ::GameEvent_BotHeldBallDeliberately >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotHeldBallDeliberately >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotInterferedPlacement*
Arena::CreateMaybeMessage< ::GameEvent_BotInterferedPlacement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotInterferedPlacement >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_MultipleCards*
Arena::CreateMaybeMessage< ::GameEvent_MultipleCards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_MultipleCards >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_MultipleFouls*
Arena::CreateMaybeMessage< ::GameEvent_MultipleFouls >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_MultipleFouls >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_MultiplePlacementFailures*
Arena::CreateMaybeMessage< ::GameEvent_MultiplePlacementFailures >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_MultiplePlacementFailures >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_KickTimeout*
Arena::CreateMaybeMessage< ::GameEvent_KickTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_KickTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_NoProgressInGame*
Arena::CreateMaybeMessage< ::GameEvent_NoProgressInGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_NoProgressInGame >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_PlacementFailed*
Arena::CreateMaybeMessage< ::GameEvent_PlacementFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_PlacementFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_UnsportingBehaviorMinor*
Arena::CreateMaybeMessage< ::GameEvent_UnsportingBehaviorMinor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_UnsportingBehaviorMinor >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_UnsportingBehaviorMajor*
Arena::CreateMaybeMessage< ::GameEvent_UnsportingBehaviorMajor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_UnsportingBehaviorMajor >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_KeeperHeldBall*
Arena::CreateMaybeMessage< ::GameEvent_KeeperHeldBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_KeeperHeldBall >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_PlacementSucceeded*
Arena::CreateMaybeMessage< ::GameEvent_PlacementSucceeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_PlacementSucceeded >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_Prepared*
Arena::CreateMaybeMessage< ::GameEvent_Prepared >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_Prepared >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BotSubstitution*
Arena::CreateMaybeMessage< ::GameEvent_BotSubstitution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BotSubstitution >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_ChallengeFlag*
Arena::CreateMaybeMessage< ::GameEvent_ChallengeFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_ChallengeFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_EmergencyStop*
Arena::CreateMaybeMessage< ::GameEvent_EmergencyStop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_EmergencyStop >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_TooManyRobots*
Arena::CreateMaybeMessage< ::GameEvent_TooManyRobots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_TooManyRobots >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_BoundaryCrossing*
Arena::CreateMaybeMessage< ::GameEvent_BoundaryCrossing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_BoundaryCrossing >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent_PenaltyKickFailed*
Arena::CreateMaybeMessage< ::GameEvent_PenaltyKickFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent_PenaltyKickFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEvent*
Arena::CreateMaybeMessage< ::GameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEvent >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
