// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fvision_5fgeometry_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fvision_5fgeometry_2eproto;
class SSL_BallModelChipFixedLoss;
struct SSL_BallModelChipFixedLossDefaultTypeInternal;
extern SSL_BallModelChipFixedLossDefaultTypeInternal _SSL_BallModelChipFixedLoss_default_instance_;
class SSL_BallModelStraightTwoPhase;
struct SSL_BallModelStraightTwoPhaseDefaultTypeInternal;
extern SSL_BallModelStraightTwoPhaseDefaultTypeInternal _SSL_BallModelStraightTwoPhase_default_instance_;
class SSL_FieldCircularArc;
struct SSL_FieldCircularArcDefaultTypeInternal;
extern SSL_FieldCircularArcDefaultTypeInternal _SSL_FieldCircularArc_default_instance_;
class SSL_FieldLineSegment;
struct SSL_FieldLineSegmentDefaultTypeInternal;
extern SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;
class SSL_GeometryCameraCalibration;
struct SSL_GeometryCameraCalibrationDefaultTypeInternal;
extern SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryData;
struct SSL_GeometryDataDefaultTypeInternal;
extern SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
class SSL_GeometryFieldSize;
struct SSL_GeometryFieldSizeDefaultTypeInternal;
extern SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryModels;
struct SSL_GeometryModelsDefaultTypeInternal;
extern SSL_GeometryModelsDefaultTypeInternal _SSL_GeometryModels_default_instance_;
class Vector2f;
struct Vector2fDefaultTypeInternal;
extern Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SSL_BallModelChipFixedLoss* Arena::CreateMaybeMessage<::SSL_BallModelChipFixedLoss>(Arena*);
template<> ::SSL_BallModelStraightTwoPhase* Arena::CreateMaybeMessage<::SSL_BallModelStraightTwoPhase>(Arena*);
template<> ::SSL_FieldCircularArc* Arena::CreateMaybeMessage<::SSL_FieldCircularArc>(Arena*);
template<> ::SSL_FieldLineSegment* Arena::CreateMaybeMessage<::SSL_FieldLineSegment>(Arena*);
template<> ::SSL_GeometryCameraCalibration* Arena::CreateMaybeMessage<::SSL_GeometryCameraCalibration>(Arena*);
template<> ::SSL_GeometryData* Arena::CreateMaybeMessage<::SSL_GeometryData>(Arena*);
template<> ::SSL_GeometryFieldSize* Arena::CreateMaybeMessage<::SSL_GeometryFieldSize>(Arena*);
template<> ::SSL_GeometryModels* Arena::CreateMaybeMessage<::SSL_GeometryModels>(Arena*);
template<> ::Vector2f* Arena::CreateMaybeMessage<::Vector2f>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SSL_FieldShapeType : int {
  Undefined = 0,
  CenterCircle = 1,
  TopTouchLine = 2,
  BottomTouchLine = 3,
  LeftGoalLine = 4,
  RightGoalLine = 5,
  HalfwayLine = 6,
  CenterLine = 7,
  LeftPenaltyStretch = 8,
  RightPenaltyStretch = 9,
  LeftFieldLeftPenaltyStretch = 10,
  LeftFieldRightPenaltyStretch = 11,
  RightFieldLeftPenaltyStretch = 12,
  RightFieldRightPenaltyStretch = 13
};
bool SSL_FieldShapeType_IsValid(int value);
constexpr SSL_FieldShapeType SSL_FieldShapeType_MIN = Undefined;
constexpr SSL_FieldShapeType SSL_FieldShapeType_MAX = RightFieldRightPenaltyStretch;
constexpr int SSL_FieldShapeType_ARRAYSIZE = SSL_FieldShapeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_FieldShapeType_descriptor();
template<typename T>
inline const std::string& SSL_FieldShapeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SSL_FieldShapeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SSL_FieldShapeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SSL_FieldShapeType_descriptor(), enum_t_value);
}
inline bool SSL_FieldShapeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SSL_FieldShapeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SSL_FieldShapeType>(
    SSL_FieldShapeType_descriptor(), name, value);
}
// ===================================================================

class Vector2f final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector2f) */ {
 public:
  inline Vector2f() : Vector2f(nullptr) {}
  ~Vector2f() override;
  explicit PROTOBUF_CONSTEXPR Vector2f(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2f(const Vector2f& from);
  Vector2f(Vector2f&& from) noexcept
    : Vector2f() {
    *this = ::std::move(from);
  }

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2f& operator=(Vector2f&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2f& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2f* internal_default_instance() {
    return reinterpret_cast<const Vector2f*>(
               &_Vector2f_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2f& a, Vector2f& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2f* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2f* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2f* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2f>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2f& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2f& from) {
    Vector2f::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2f* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector2f";
  }
  protected:
  explicit Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vector2f)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_FieldLineSegment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_FieldLineSegment) */ {
 public:
  inline SSL_FieldLineSegment() : SSL_FieldLineSegment(nullptr) {}
  ~SSL_FieldLineSegment() override;
  explicit PROTOBUF_CONSTEXPR SSL_FieldLineSegment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_FieldLineSegment(const SSL_FieldLineSegment& from);
  SSL_FieldLineSegment(SSL_FieldLineSegment&& from) noexcept
    : SSL_FieldLineSegment() {
    *this = ::std::move(from);
  }

  inline SSL_FieldLineSegment& operator=(const SSL_FieldLineSegment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_FieldLineSegment& operator=(SSL_FieldLineSegment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_FieldLineSegment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_FieldLineSegment* internal_default_instance() {
    return reinterpret_cast<const SSL_FieldLineSegment*>(
               &_SSL_FieldLineSegment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SSL_FieldLineSegment& a, SSL_FieldLineSegment& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_FieldLineSegment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_FieldLineSegment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_FieldLineSegment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_FieldLineSegment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_FieldLineSegment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_FieldLineSegment& from) {
    SSL_FieldLineSegment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_FieldLineSegment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_FieldLineSegment";
  }
  protected:
  explicit SSL_FieldLineSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kP1FieldNumber = 2,
    kP2FieldNumber = 3,
    kThicknessFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Vector2f p1 = 2;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  const ::Vector2f& p1() const;
  PROTOBUF_NODISCARD ::Vector2f* release_p1();
  ::Vector2f* mutable_p1();
  void set_allocated_p1(::Vector2f* p1);
  private:
  const ::Vector2f& _internal_p1() const;
  ::Vector2f* _internal_mutable_p1();
  public:
  void unsafe_arena_set_allocated_p1(
      ::Vector2f* p1);
  ::Vector2f* unsafe_arena_release_p1();

  // required .Vector2f p2 = 3;
  bool has_p2() const;
  private:
  bool _internal_has_p2() const;
  public:
  void clear_p2();
  const ::Vector2f& p2() const;
  PROTOBUF_NODISCARD ::Vector2f* release_p2();
  ::Vector2f* mutable_p2();
  void set_allocated_p2(::Vector2f* p2);
  private:
  const ::Vector2f& _internal_p2() const;
  ::Vector2f* _internal_mutable_p2();
  public:
  void unsafe_arena_set_allocated_p2(
      ::Vector2f* p2);
  ::Vector2f* unsafe_arena_release_p2();

  // required float thickness = 4;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // optional .SSL_FieldShapeType type = 5;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::SSL_FieldShapeType type() const;
  void set_type(::SSL_FieldShapeType value);
  private:
  ::SSL_FieldShapeType _internal_type() const;
  void _internal_set_type(::SSL_FieldShapeType value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_FieldLineSegment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Vector2f* p1_;
    ::Vector2f* p2_;
    float thickness_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_FieldCircularArc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_FieldCircularArc) */ {
 public:
  inline SSL_FieldCircularArc() : SSL_FieldCircularArc(nullptr) {}
  ~SSL_FieldCircularArc() override;
  explicit PROTOBUF_CONSTEXPR SSL_FieldCircularArc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_FieldCircularArc(const SSL_FieldCircularArc& from);
  SSL_FieldCircularArc(SSL_FieldCircularArc&& from) noexcept
    : SSL_FieldCircularArc() {
    *this = ::std::move(from);
  }

  inline SSL_FieldCircularArc& operator=(const SSL_FieldCircularArc& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_FieldCircularArc& operator=(SSL_FieldCircularArc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_FieldCircularArc& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_FieldCircularArc* internal_default_instance() {
    return reinterpret_cast<const SSL_FieldCircularArc*>(
               &_SSL_FieldCircularArc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SSL_FieldCircularArc& a, SSL_FieldCircularArc& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_FieldCircularArc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_FieldCircularArc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_FieldCircularArc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_FieldCircularArc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_FieldCircularArc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_FieldCircularArc& from) {
    SSL_FieldCircularArc::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_FieldCircularArc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_FieldCircularArc";
  }
  protected:
  explicit SSL_FieldCircularArc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCenterFieldNumber = 2,
    kRadiusFieldNumber = 3,
    kA1FieldNumber = 4,
    kA2FieldNumber = 5,
    kThicknessFieldNumber = 6,
    kTypeFieldNumber = 7,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .Vector2f center = 2;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::Vector2f& center() const;
  PROTOBUF_NODISCARD ::Vector2f* release_center();
  ::Vector2f* mutable_center();
  void set_allocated_center(::Vector2f* center);
  private:
  const ::Vector2f& _internal_center() const;
  ::Vector2f* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::Vector2f* center);
  ::Vector2f* unsafe_arena_release_center();

  // required float radius = 3;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // required float a1 = 4;
  bool has_a1() const;
  private:
  bool _internal_has_a1() const;
  public:
  void clear_a1();
  float a1() const;
  void set_a1(float value);
  private:
  float _internal_a1() const;
  void _internal_set_a1(float value);
  public:

  // required float a2 = 5;
  bool has_a2() const;
  private:
  bool _internal_has_a2() const;
  public:
  void clear_a2();
  float a2() const;
  void set_a2(float value);
  private:
  float _internal_a2() const;
  void _internal_set_a2(float value);
  public:

  // required float thickness = 6;
  bool has_thickness() const;
  private:
  bool _internal_has_thickness() const;
  public:
  void clear_thickness();
  float thickness() const;
  void set_thickness(float value);
  private:
  float _internal_thickness() const;
  void _internal_set_thickness(float value);
  public:

  // optional .SSL_FieldShapeType type = 7;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::SSL_FieldShapeType type() const;
  void set_type(::SSL_FieldShapeType value);
  private:
  ::SSL_FieldShapeType _internal_type() const;
  void _internal_set_type(::SSL_FieldShapeType value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_FieldCircularArc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::Vector2f* center_;
    float radius_;
    float a1_;
    float a2_;
    float thickness_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryFieldSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryFieldSize) */ {
 public:
  inline SSL_GeometryFieldSize() : SSL_GeometryFieldSize(nullptr) {}
  ~SSL_GeometryFieldSize() override;
  explicit PROTOBUF_CONSTEXPR SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from);
  SSL_GeometryFieldSize(SSL_GeometryFieldSize&& from) noexcept
    : SSL_GeometryFieldSize() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryFieldSize& operator=(SSL_GeometryFieldSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryFieldSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryFieldSize* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryFieldSize*>(
               &_SSL_GeometryFieldSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SSL_GeometryFieldSize& a, SSL_GeometryFieldSize& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryFieldSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryFieldSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_GeometryFieldSize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryFieldSize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_GeometryFieldSize& from) {
    SSL_GeometryFieldSize::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryFieldSize* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryFieldSize";
  }
  protected:
  explicit SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldLinesFieldNumber = 6,
    kFieldArcsFieldNumber = 7,
    kFieldLengthFieldNumber = 1,
    kFieldWidthFieldNumber = 2,
    kGoalWidthFieldNumber = 3,
    kGoalDepthFieldNumber = 4,
    kBoundaryWidthFieldNumber = 5,
    kPenaltyAreaDepthFieldNumber = 8,
    kPenaltyAreaWidthFieldNumber = 9,
    kCenterCircleRadiusFieldNumber = 10,
    kLineThicknessFieldNumber = 11,
    kGoalCenterToPenaltyMarkFieldNumber = 12,
    kGoalHeightFieldNumber = 13,
    kBallRadiusFieldNumber = 14,
    kMaxRobotRadiusFieldNumber = 15,
  };
  // repeated .SSL_FieldLineSegment field_lines = 6;
  int field_lines_size() const;
  private:
  int _internal_field_lines_size() const;
  public:
  void clear_field_lines();
  ::SSL_FieldLineSegment* mutable_field_lines(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >*
      mutable_field_lines();
  private:
  const ::SSL_FieldLineSegment& _internal_field_lines(int index) const;
  ::SSL_FieldLineSegment* _internal_add_field_lines();
  public:
  const ::SSL_FieldLineSegment& field_lines(int index) const;
  ::SSL_FieldLineSegment* add_field_lines();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >&
      field_lines() const;

  // repeated .SSL_FieldCircularArc field_arcs = 7;
  int field_arcs_size() const;
  private:
  int _internal_field_arcs_size() const;
  public:
  void clear_field_arcs();
  ::SSL_FieldCircularArc* mutable_field_arcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCircularArc >*
      mutable_field_arcs();
  private:
  const ::SSL_FieldCircularArc& _internal_field_arcs(int index) const;
  ::SSL_FieldCircularArc* _internal_add_field_arcs();
  public:
  const ::SSL_FieldCircularArc& field_arcs(int index) const;
  ::SSL_FieldCircularArc* add_field_arcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCircularArc >&
      field_arcs() const;

  // required int32 field_length = 1;
  bool has_field_length() const;
  private:
  bool _internal_has_field_length() const;
  public:
  void clear_field_length();
  int32_t field_length() const;
  void set_field_length(int32_t value);
  private:
  int32_t _internal_field_length() const;
  void _internal_set_field_length(int32_t value);
  public:

  // required int32 field_width = 2;
  bool has_field_width() const;
  private:
  bool _internal_has_field_width() const;
  public:
  void clear_field_width();
  int32_t field_width() const;
  void set_field_width(int32_t value);
  private:
  int32_t _internal_field_width() const;
  void _internal_set_field_width(int32_t value);
  public:

  // required int32 goal_width = 3;
  bool has_goal_width() const;
  private:
  bool _internal_has_goal_width() const;
  public:
  void clear_goal_width();
  int32_t goal_width() const;
  void set_goal_width(int32_t value);
  private:
  int32_t _internal_goal_width() const;
  void _internal_set_goal_width(int32_t value);
  public:

  // required int32 goal_depth = 4;
  bool has_goal_depth() const;
  private:
  bool _internal_has_goal_depth() const;
  public:
  void clear_goal_depth();
  int32_t goal_depth() const;
  void set_goal_depth(int32_t value);
  private:
  int32_t _internal_goal_depth() const;
  void _internal_set_goal_depth(int32_t value);
  public:

  // required int32 boundary_width = 5;
  bool has_boundary_width() const;
  private:
  bool _internal_has_boundary_width() const;
  public:
  void clear_boundary_width();
  int32_t boundary_width() const;
  void set_boundary_width(int32_t value);
  private:
  int32_t _internal_boundary_width() const;
  void _internal_set_boundary_width(int32_t value);
  public:

  // optional int32 penalty_area_depth = 8;
  bool has_penalty_area_depth() const;
  private:
  bool _internal_has_penalty_area_depth() const;
  public:
  void clear_penalty_area_depth();
  int32_t penalty_area_depth() const;
  void set_penalty_area_depth(int32_t value);
  private:
  int32_t _internal_penalty_area_depth() const;
  void _internal_set_penalty_area_depth(int32_t value);
  public:

  // optional int32 penalty_area_width = 9;
  bool has_penalty_area_width() const;
  private:
  bool _internal_has_penalty_area_width() const;
  public:
  void clear_penalty_area_width();
  int32_t penalty_area_width() const;
  void set_penalty_area_width(int32_t value);
  private:
  int32_t _internal_penalty_area_width() const;
  void _internal_set_penalty_area_width(int32_t value);
  public:

  // optional int32 center_circle_radius = 10;
  bool has_center_circle_radius() const;
  private:
  bool _internal_has_center_circle_radius() const;
  public:
  void clear_center_circle_radius();
  int32_t center_circle_radius() const;
  void set_center_circle_radius(int32_t value);
  private:
  int32_t _internal_center_circle_radius() const;
  void _internal_set_center_circle_radius(int32_t value);
  public:

  // optional int32 line_thickness = 11;
  bool has_line_thickness() const;
  private:
  bool _internal_has_line_thickness() const;
  public:
  void clear_line_thickness();
  int32_t line_thickness() const;
  void set_line_thickness(int32_t value);
  private:
  int32_t _internal_line_thickness() const;
  void _internal_set_line_thickness(int32_t value);
  public:

  // optional int32 goal_center_to_penalty_mark = 12;
  bool has_goal_center_to_penalty_mark() const;
  private:
  bool _internal_has_goal_center_to_penalty_mark() const;
  public:
  void clear_goal_center_to_penalty_mark();
  int32_t goal_center_to_penalty_mark() const;
  void set_goal_center_to_penalty_mark(int32_t value);
  private:
  int32_t _internal_goal_center_to_penalty_mark() const;
  void _internal_set_goal_center_to_penalty_mark(int32_t value);
  public:

  // optional int32 goal_height = 13;
  bool has_goal_height() const;
  private:
  bool _internal_has_goal_height() const;
  public:
  void clear_goal_height();
  int32_t goal_height() const;
  void set_goal_height(int32_t value);
  private:
  int32_t _internal_goal_height() const;
  void _internal_set_goal_height(int32_t value);
  public:

  // optional float ball_radius = 14;
  bool has_ball_radius() const;
  private:
  bool _internal_has_ball_radius() const;
  public:
  void clear_ball_radius();
  float ball_radius() const;
  void set_ball_radius(float value);
  private:
  float _internal_ball_radius() const;
  void _internal_set_ball_radius(float value);
  public:

  // optional float max_robot_radius = 15;
  bool has_max_robot_radius() const;
  private:
  bool _internal_has_max_robot_radius() const;
  public:
  void clear_max_robot_radius();
  float max_robot_radius() const;
  void set_max_robot_radius(float value);
  private:
  float _internal_max_robot_radius() const;
  void _internal_set_max_robot_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_GeometryFieldSize)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment > field_lines_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCircularArc > field_arcs_;
    int32_t field_length_;
    int32_t field_width_;
    int32_t goal_width_;
    int32_t goal_depth_;
    int32_t boundary_width_;
    int32_t penalty_area_depth_;
    int32_t penalty_area_width_;
    int32_t center_circle_radius_;
    int32_t line_thickness_;
    int32_t goal_center_to_penalty_mark_;
    int32_t goal_height_;
    float ball_radius_;
    float max_robot_radius_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryCameraCalibration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryCameraCalibration) */ {
 public:
  inline SSL_GeometryCameraCalibration() : SSL_GeometryCameraCalibration(nullptr) {}
  ~SSL_GeometryCameraCalibration() override;
  explicit PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from);
  SSL_GeometryCameraCalibration(SSL_GeometryCameraCalibration&& from) noexcept
    : SSL_GeometryCameraCalibration() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryCameraCalibration& operator=(const SSL_GeometryCameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryCameraCalibration& operator=(SSL_GeometryCameraCalibration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryCameraCalibration& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryCameraCalibration* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryCameraCalibration*>(
               &_SSL_GeometryCameraCalibration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SSL_GeometryCameraCalibration& a, SSL_GeometryCameraCalibration& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryCameraCalibration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryCameraCalibration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryCameraCalibration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_GeometryCameraCalibration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryCameraCalibration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_GeometryCameraCalibration& from) {
    SSL_GeometryCameraCalibration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryCameraCalibration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryCameraCalibration";
  }
  protected:
  explicit SSL_GeometryCameraCalibration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kFocalLengthFieldNumber = 2,
    kPrincipalPointXFieldNumber = 3,
    kPrincipalPointYFieldNumber = 4,
    kDistortionFieldNumber = 5,
    kQ0FieldNumber = 6,
    kQ1FieldNumber = 7,
    kQ2FieldNumber = 8,
    kQ3FieldNumber = 9,
    kTxFieldNumber = 10,
    kTyFieldNumber = 11,
    kTzFieldNumber = 12,
    kDerivedCameraWorldTxFieldNumber = 13,
    kDerivedCameraWorldTyFieldNumber = 14,
    kDerivedCameraWorldTzFieldNumber = 15,
    kPixelImageWidthFieldNumber = 16,
    kPixelImageHeightFieldNumber = 17,
  };
  // required uint32 camera_id = 1;
  bool has_camera_id() const;
  private:
  bool _internal_has_camera_id() const;
  public:
  void clear_camera_id();
  uint32_t camera_id() const;
  void set_camera_id(uint32_t value);
  private:
  uint32_t _internal_camera_id() const;
  void _internal_set_camera_id(uint32_t value);
  public:

  // required float focal_length = 2;
  bool has_focal_length() const;
  private:
  bool _internal_has_focal_length() const;
  public:
  void clear_focal_length();
  float focal_length() const;
  void set_focal_length(float value);
  private:
  float _internal_focal_length() const;
  void _internal_set_focal_length(float value);
  public:

  // required float principal_point_x = 3;
  bool has_principal_point_x() const;
  private:
  bool _internal_has_principal_point_x() const;
  public:
  void clear_principal_point_x();
  float principal_point_x() const;
  void set_principal_point_x(float value);
  private:
  float _internal_principal_point_x() const;
  void _internal_set_principal_point_x(float value);
  public:

  // required float principal_point_y = 4;
  bool has_principal_point_y() const;
  private:
  bool _internal_has_principal_point_y() const;
  public:
  void clear_principal_point_y();
  float principal_point_y() const;
  void set_principal_point_y(float value);
  private:
  float _internal_principal_point_y() const;
  void _internal_set_principal_point_y(float value);
  public:

  // required float distortion = 5;
  bool has_distortion() const;
  private:
  bool _internal_has_distortion() const;
  public:
  void clear_distortion();
  float distortion() const;
  void set_distortion(float value);
  private:
  float _internal_distortion() const;
  void _internal_set_distortion(float value);
  public:

  // required float q0 = 6;
  bool has_q0() const;
  private:
  bool _internal_has_q0() const;
  public:
  void clear_q0();
  float q0() const;
  void set_q0(float value);
  private:
  float _internal_q0() const;
  void _internal_set_q0(float value);
  public:

  // required float q1 = 7;
  bool has_q1() const;
  private:
  bool _internal_has_q1() const;
  public:
  void clear_q1();
  float q1() const;
  void set_q1(float value);
  private:
  float _internal_q1() const;
  void _internal_set_q1(float value);
  public:

  // required float q2 = 8;
  bool has_q2() const;
  private:
  bool _internal_has_q2() const;
  public:
  void clear_q2();
  float q2() const;
  void set_q2(float value);
  private:
  float _internal_q2() const;
  void _internal_set_q2(float value);
  public:

  // required float q3 = 9;
  bool has_q3() const;
  private:
  bool _internal_has_q3() const;
  public:
  void clear_q3();
  float q3() const;
  void set_q3(float value);
  private:
  float _internal_q3() const;
  void _internal_set_q3(float value);
  public:

  // required float tx = 10;
  bool has_tx() const;
  private:
  bool _internal_has_tx() const;
  public:
  void clear_tx();
  float tx() const;
  void set_tx(float value);
  private:
  float _internal_tx() const;
  void _internal_set_tx(float value);
  public:

  // required float ty = 11;
  bool has_ty() const;
  private:
  bool _internal_has_ty() const;
  public:
  void clear_ty();
  float ty() const;
  void set_ty(float value);
  private:
  float _internal_ty() const;
  void _internal_set_ty(float value);
  public:

  // required float tz = 12;
  bool has_tz() const;
  private:
  bool _internal_has_tz() const;
  public:
  void clear_tz();
  float tz() const;
  void set_tz(float value);
  private:
  float _internal_tz() const;
  void _internal_set_tz(float value);
  public:

  // optional float derived_camera_world_tx = 13;
  bool has_derived_camera_world_tx() const;
  private:
  bool _internal_has_derived_camera_world_tx() const;
  public:
  void clear_derived_camera_world_tx();
  float derived_camera_world_tx() const;
  void set_derived_camera_world_tx(float value);
  private:
  float _internal_derived_camera_world_tx() const;
  void _internal_set_derived_camera_world_tx(float value);
  public:

  // optional float derived_camera_world_ty = 14;
  bool has_derived_camera_world_ty() const;
  private:
  bool _internal_has_derived_camera_world_ty() const;
  public:
  void clear_derived_camera_world_ty();
  float derived_camera_world_ty() const;
  void set_derived_camera_world_ty(float value);
  private:
  float _internal_derived_camera_world_ty() const;
  void _internal_set_derived_camera_world_ty(float value);
  public:

  // optional float derived_camera_world_tz = 15;
  bool has_derived_camera_world_tz() const;
  private:
  bool _internal_has_derived_camera_world_tz() const;
  public:
  void clear_derived_camera_world_tz();
  float derived_camera_world_tz() const;
  void set_derived_camera_world_tz(float value);
  private:
  float _internal_derived_camera_world_tz() const;
  void _internal_set_derived_camera_world_tz(float value);
  public:

  // optional uint32 pixel_image_width = 16;
  bool has_pixel_image_width() const;
  private:
  bool _internal_has_pixel_image_width() const;
  public:
  void clear_pixel_image_width();
  uint32_t pixel_image_width() const;
  void set_pixel_image_width(uint32_t value);
  private:
  uint32_t _internal_pixel_image_width() const;
  void _internal_set_pixel_image_width(uint32_t value);
  public:

  // optional uint32 pixel_image_height = 17;
  bool has_pixel_image_height() const;
  private:
  bool _internal_has_pixel_image_height() const;
  public:
  void clear_pixel_image_height();
  uint32_t pixel_image_height() const;
  void set_pixel_image_height(uint32_t value);
  private:
  uint32_t _internal_pixel_image_height() const;
  void _internal_set_pixel_image_height(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_GeometryCameraCalibration)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t camera_id_;
    float focal_length_;
    float principal_point_x_;
    float principal_point_y_;
    float distortion_;
    float q0_;
    float q1_;
    float q2_;
    float q3_;
    float tx_;
    float ty_;
    float tz_;
    float derived_camera_world_tx_;
    float derived_camera_world_ty_;
    float derived_camera_world_tz_;
    uint32_t pixel_image_width_;
    uint32_t pixel_image_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_BallModelStraightTwoPhase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_BallModelStraightTwoPhase) */ {
 public:
  inline SSL_BallModelStraightTwoPhase() : SSL_BallModelStraightTwoPhase(nullptr) {}
  ~SSL_BallModelStraightTwoPhase() override;
  explicit PROTOBUF_CONSTEXPR SSL_BallModelStraightTwoPhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_BallModelStraightTwoPhase(const SSL_BallModelStraightTwoPhase& from);
  SSL_BallModelStraightTwoPhase(SSL_BallModelStraightTwoPhase&& from) noexcept
    : SSL_BallModelStraightTwoPhase() {
    *this = ::std::move(from);
  }

  inline SSL_BallModelStraightTwoPhase& operator=(const SSL_BallModelStraightTwoPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_BallModelStraightTwoPhase& operator=(SSL_BallModelStraightTwoPhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_BallModelStraightTwoPhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_BallModelStraightTwoPhase* internal_default_instance() {
    return reinterpret_cast<const SSL_BallModelStraightTwoPhase*>(
               &_SSL_BallModelStraightTwoPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SSL_BallModelStraightTwoPhase& a, SSL_BallModelStraightTwoPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_BallModelStraightTwoPhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_BallModelStraightTwoPhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_BallModelStraightTwoPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_BallModelStraightTwoPhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_BallModelStraightTwoPhase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_BallModelStraightTwoPhase& from) {
    SSL_BallModelStraightTwoPhase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_BallModelStraightTwoPhase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_BallModelStraightTwoPhase";
  }
  protected:
  explicit SSL_BallModelStraightTwoPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccSlideFieldNumber = 1,
    kAccRollFieldNumber = 2,
    kKSwitchFieldNumber = 3,
  };
  // required double acc_slide = 1;
  bool has_acc_slide() const;
  private:
  bool _internal_has_acc_slide() const;
  public:
  void clear_acc_slide();
  double acc_slide() const;
  void set_acc_slide(double value);
  private:
  double _internal_acc_slide() const;
  void _internal_set_acc_slide(double value);
  public:

  // required double acc_roll = 2;
  bool has_acc_roll() const;
  private:
  bool _internal_has_acc_roll() const;
  public:
  void clear_acc_roll();
  double acc_roll() const;
  void set_acc_roll(double value);
  private:
  double _internal_acc_roll() const;
  void _internal_set_acc_roll(double value);
  public:

  // required double k_switch = 3;
  bool has_k_switch() const;
  private:
  bool _internal_has_k_switch() const;
  public:
  void clear_k_switch();
  double k_switch() const;
  void set_k_switch(double value);
  private:
  double _internal_k_switch() const;
  void _internal_set_k_switch(double value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_BallModelStraightTwoPhase)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double acc_slide_;
    double acc_roll_;
    double k_switch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_BallModelChipFixedLoss final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_BallModelChipFixedLoss) */ {
 public:
  inline SSL_BallModelChipFixedLoss() : SSL_BallModelChipFixedLoss(nullptr) {}
  ~SSL_BallModelChipFixedLoss() override;
  explicit PROTOBUF_CONSTEXPR SSL_BallModelChipFixedLoss(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_BallModelChipFixedLoss(const SSL_BallModelChipFixedLoss& from);
  SSL_BallModelChipFixedLoss(SSL_BallModelChipFixedLoss&& from) noexcept
    : SSL_BallModelChipFixedLoss() {
    *this = ::std::move(from);
  }

  inline SSL_BallModelChipFixedLoss& operator=(const SSL_BallModelChipFixedLoss& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_BallModelChipFixedLoss& operator=(SSL_BallModelChipFixedLoss&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_BallModelChipFixedLoss& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_BallModelChipFixedLoss* internal_default_instance() {
    return reinterpret_cast<const SSL_BallModelChipFixedLoss*>(
               &_SSL_BallModelChipFixedLoss_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SSL_BallModelChipFixedLoss& a, SSL_BallModelChipFixedLoss& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_BallModelChipFixedLoss* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_BallModelChipFixedLoss* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_BallModelChipFixedLoss* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_BallModelChipFixedLoss>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_BallModelChipFixedLoss& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_BallModelChipFixedLoss& from) {
    SSL_BallModelChipFixedLoss::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_BallModelChipFixedLoss* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_BallModelChipFixedLoss";
  }
  protected:
  explicit SSL_BallModelChipFixedLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDampingXyFirstHopFieldNumber = 1,
    kDampingXyOtherHopsFieldNumber = 2,
    kDampingZFieldNumber = 3,
  };
  // required double damping_xy_first_hop = 1;
  bool has_damping_xy_first_hop() const;
  private:
  bool _internal_has_damping_xy_first_hop() const;
  public:
  void clear_damping_xy_first_hop();
  double damping_xy_first_hop() const;
  void set_damping_xy_first_hop(double value);
  private:
  double _internal_damping_xy_first_hop() const;
  void _internal_set_damping_xy_first_hop(double value);
  public:

  // required double damping_xy_other_hops = 2;
  bool has_damping_xy_other_hops() const;
  private:
  bool _internal_has_damping_xy_other_hops() const;
  public:
  void clear_damping_xy_other_hops();
  double damping_xy_other_hops() const;
  void set_damping_xy_other_hops(double value);
  private:
  double _internal_damping_xy_other_hops() const;
  void _internal_set_damping_xy_other_hops(double value);
  public:

  // required double damping_z = 3;
  bool has_damping_z() const;
  private:
  bool _internal_has_damping_z() const;
  public:
  void clear_damping_z();
  double damping_z() const;
  void set_damping_z(double value);
  private:
  double _internal_damping_z() const;
  void _internal_set_damping_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:SSL_BallModelChipFixedLoss)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double damping_xy_first_hop_;
    double damping_xy_other_hops_;
    double damping_z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryModels final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryModels) */ {
 public:
  inline SSL_GeometryModels() : SSL_GeometryModels(nullptr) {}
  ~SSL_GeometryModels() override;
  explicit PROTOBUF_CONSTEXPR SSL_GeometryModels(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_GeometryModels(const SSL_GeometryModels& from);
  SSL_GeometryModels(SSL_GeometryModels&& from) noexcept
    : SSL_GeometryModels() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryModels& operator=(const SSL_GeometryModels& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryModels& operator=(SSL_GeometryModels&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryModels& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryModels* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryModels*>(
               &_SSL_GeometryModels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SSL_GeometryModels& a, SSL_GeometryModels& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryModels* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryModels* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryModels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_GeometryModels>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryModels& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_GeometryModels& from) {
    SSL_GeometryModels::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryModels* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryModels";
  }
  protected:
  explicit SSL_GeometryModels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStraightTwoPhaseFieldNumber = 1,
    kChipFixedLossFieldNumber = 2,
  };
  // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
  bool has_straight_two_phase() const;
  private:
  bool _internal_has_straight_two_phase() const;
  public:
  void clear_straight_two_phase();
  const ::SSL_BallModelStraightTwoPhase& straight_two_phase() const;
  PROTOBUF_NODISCARD ::SSL_BallModelStraightTwoPhase* release_straight_two_phase();
  ::SSL_BallModelStraightTwoPhase* mutable_straight_two_phase();
  void set_allocated_straight_two_phase(::SSL_BallModelStraightTwoPhase* straight_two_phase);
  private:
  const ::SSL_BallModelStraightTwoPhase& _internal_straight_two_phase() const;
  ::SSL_BallModelStraightTwoPhase* _internal_mutable_straight_two_phase();
  public:
  void unsafe_arena_set_allocated_straight_two_phase(
      ::SSL_BallModelStraightTwoPhase* straight_two_phase);
  ::SSL_BallModelStraightTwoPhase* unsafe_arena_release_straight_two_phase();

  // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
  bool has_chip_fixed_loss() const;
  private:
  bool _internal_has_chip_fixed_loss() const;
  public:
  void clear_chip_fixed_loss();
  const ::SSL_BallModelChipFixedLoss& chip_fixed_loss() const;
  PROTOBUF_NODISCARD ::SSL_BallModelChipFixedLoss* release_chip_fixed_loss();
  ::SSL_BallModelChipFixedLoss* mutable_chip_fixed_loss();
  void set_allocated_chip_fixed_loss(::SSL_BallModelChipFixedLoss* chip_fixed_loss);
  private:
  const ::SSL_BallModelChipFixedLoss& _internal_chip_fixed_loss() const;
  ::SSL_BallModelChipFixedLoss* _internal_mutable_chip_fixed_loss();
  public:
  void unsafe_arena_set_allocated_chip_fixed_loss(
      ::SSL_BallModelChipFixedLoss* chip_fixed_loss);
  ::SSL_BallModelChipFixedLoss* unsafe_arena_release_chip_fixed_loss();

  // @@protoc_insertion_point(class_scope:SSL_GeometryModels)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SSL_BallModelStraightTwoPhase* straight_two_phase_;
    ::SSL_BallModelChipFixedLoss* chip_fixed_loss_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class SSL_GeometryData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryData) */ {
 public:
  inline SSL_GeometryData() : SSL_GeometryData(nullptr) {}
  ~SSL_GeometryData() override;
  explicit PROTOBUF_CONSTEXPR SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SSL_GeometryData(const SSL_GeometryData& from);
  SSL_GeometryData(SSL_GeometryData&& from) noexcept
    : SSL_GeometryData() {
    *this = ::std::move(from);
  }

  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SSL_GeometryData& operator=(SSL_GeometryData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SSL_GeometryData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SSL_GeometryData* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryData*>(
               &_SSL_GeometryData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SSL_GeometryData& a, SSL_GeometryData& b) {
    a.Swap(&b);
  }
  inline void Swap(SSL_GeometryData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SSL_GeometryData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SSL_GeometryData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SSL_GeometryData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SSL_GeometryData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SSL_GeometryData& from) {
    SSL_GeometryData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SSL_GeometryData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SSL_GeometryData";
  }
  protected:
  explicit SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCalibFieldNumber = 2,
    kFieldFieldNumber = 1,
    kModelsFieldNumber = 3,
  };
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  int calib_size() const;
  private:
  int _internal_calib_size() const;
  public:
  void clear_calib();
  ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
      mutable_calib();
  private:
  const ::SSL_GeometryCameraCalibration& _internal_calib(int index) const;
  ::SSL_GeometryCameraCalibration* _internal_add_calib();
  public:
  const ::SSL_GeometryCameraCalibration& calib(int index) const;
  ::SSL_GeometryCameraCalibration* add_calib();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
      calib() const;

  // required .SSL_GeometryFieldSize field = 1;
  bool has_field() const;
  private:
  bool _internal_has_field() const;
  public:
  void clear_field();
  const ::SSL_GeometryFieldSize& field() const;
  PROTOBUF_NODISCARD ::SSL_GeometryFieldSize* release_field();
  ::SSL_GeometryFieldSize* mutable_field();
  void set_allocated_field(::SSL_GeometryFieldSize* field);
  private:
  const ::SSL_GeometryFieldSize& _internal_field() const;
  ::SSL_GeometryFieldSize* _internal_mutable_field();
  public:
  void unsafe_arena_set_allocated_field(
      ::SSL_GeometryFieldSize* field);
  ::SSL_GeometryFieldSize* unsafe_arena_release_field();

  // optional .SSL_GeometryModels models = 3;
  bool has_models() const;
  private:
  bool _internal_has_models() const;
  public:
  void clear_models();
  const ::SSL_GeometryModels& models() const;
  PROTOBUF_NODISCARD ::SSL_GeometryModels* release_models();
  ::SSL_GeometryModels* mutable_models();
  void set_allocated_models(::SSL_GeometryModels* models);
  private:
  const ::SSL_GeometryModels& _internal_models() const;
  ::SSL_GeometryModels* _internal_mutable_models();
  public:
  void unsafe_arena_set_allocated_models(
      ::SSL_GeometryModels* models);
  ::SSL_GeometryModels* unsafe_arena_release_models();

  // @@protoc_insertion_point(class_scope:SSL_GeometryData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
    ::SSL_GeometryFieldSize* field_;
    ::SSL_GeometryModels* models_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2f

// required float x = 1;
inline bool Vector2f::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector2f::has_x() const {
  return _internal_has_x();
}
inline void Vector2f::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Vector2f::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:Vector2f.x)
  return _internal_x();
}
inline void Vector2f::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Vector2f::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector2f.x)
}

// required float y = 2;
inline bool Vector2f::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector2f::has_y() const {
  return _internal_has_y();
}
inline void Vector2f::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Vector2f::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:Vector2f.y)
  return _internal_y();
}
inline void Vector2f::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Vector2f::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector2f.y)
}

// -------------------------------------------------------------------

// SSL_FieldLineSegment

// required string name = 1;
inline bool SSL_FieldLineSegment::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_FieldLineSegment::has_name() const {
  return _internal_has_name();
}
inline void SSL_FieldLineSegment::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_FieldLineSegment::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSL_FieldLineSegment::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.name)
}
inline std::string* SSL_FieldLineSegment::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.name)
  return _s;
}
inline const std::string& SSL_FieldLineSegment::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SSL_FieldLineSegment::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SSL_FieldLineSegment::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SSL_FieldLineSegment::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SSL_FieldLineSegment::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.name)
}

// required .Vector2f p1 = 2;
inline bool SSL_FieldLineSegment::_internal_has_p1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.p1_ != nullptr);
  return value;
}
inline bool SSL_FieldLineSegment::has_p1() const {
  return _internal_has_p1();
}
inline void SSL_FieldLineSegment::clear_p1() {
  if (_impl_.p1_ != nullptr) _impl_.p1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2f& SSL_FieldLineSegment::_internal_p1() const {
  const ::Vector2f* p = _impl_.p1_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2f&>(
      ::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldLineSegment::p1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p1)
  return _internal_p1();
}
inline void SSL_FieldLineSegment::unsafe_arena_set_allocated_p1(
    ::Vector2f* p1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p1_);
  }
  _impl_.p1_ = p1;
  if (p1) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_FieldLineSegment.p1)
}
inline ::Vector2f* SSL_FieldLineSegment::release_p1() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = _impl_.p1_;
  _impl_.p1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::unsafe_arena_release_p1() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p1)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = _impl_.p1_;
  _impl_.p1_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::_internal_mutable_p1() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.p1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2f>(GetArenaForAllocation());
    _impl_.p1_ = p;
  }
  return _impl_.p1_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p1() {
  ::Vector2f* _msg = _internal_mutable_p1();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p1)
  return _msg;
}
inline void SSL_FieldLineSegment::set_allocated_p1(::Vector2f* p1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p1_;
  }
  if (p1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p1);
    if (message_arena != submessage_arena) {
      p1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p1)
}

// required .Vector2f p2 = 3;
inline bool SSL_FieldLineSegment::_internal_has_p2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.p2_ != nullptr);
  return value;
}
inline bool SSL_FieldLineSegment::has_p2() const {
  return _internal_has_p2();
}
inline void SSL_FieldLineSegment::clear_p2() {
  if (_impl_.p2_ != nullptr) _impl_.p2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Vector2f& SSL_FieldLineSegment::_internal_p2() const {
  const ::Vector2f* p = _impl_.p2_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2f&>(
      ::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldLineSegment::p2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p2)
  return _internal_p2();
}
inline void SSL_FieldLineSegment::unsafe_arena_set_allocated_p2(
    ::Vector2f* p2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.p2_);
  }
  _impl_.p2_ = p2;
  if (p2) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_FieldLineSegment.p2)
}
inline ::Vector2f* SSL_FieldLineSegment::release_p2() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2f* temp = _impl_.p2_;
  _impl_.p2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::unsafe_arena_release_p2() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p2)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2f* temp = _impl_.p2_;
  _impl_.p2_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldLineSegment::_internal_mutable_p2() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.p2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2f>(GetArenaForAllocation());
    _impl_.p2_ = p;
  }
  return _impl_.p2_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p2() {
  ::Vector2f* _msg = _internal_mutable_p2();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p2)
  return _msg;
}
inline void SSL_FieldLineSegment::set_allocated_p2(::Vector2f* p2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.p2_;
  }
  if (p2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(p2);
    if (message_arena != submessage_arena) {
      p2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.p2_ = p2;
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p2)
}

// required float thickness = 4;
inline bool SSL_FieldLineSegment::_internal_has_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_FieldLineSegment::has_thickness() const {
  return _internal_has_thickness();
}
inline void SSL_FieldLineSegment::clear_thickness() {
  _impl_.thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_FieldLineSegment::_internal_thickness() const {
  return _impl_.thickness_;
}
inline float SSL_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.thickness)
  return _internal_thickness();
}
inline void SSL_FieldLineSegment::_internal_set_thickness(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.thickness_ = value;
}
inline void SSL_FieldLineSegment::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.thickness)
}

// optional .SSL_FieldShapeType type = 5;
inline bool SSL_FieldLineSegment::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_FieldLineSegment::has_type() const {
  return _internal_has_type();
}
inline void SSL_FieldLineSegment::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::SSL_FieldShapeType SSL_FieldLineSegment::_internal_type() const {
  return static_cast< ::SSL_FieldShapeType >(_impl_.type_);
}
inline ::SSL_FieldShapeType SSL_FieldLineSegment::type() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.type)
  return _internal_type();
}
inline void SSL_FieldLineSegment::_internal_set_type(::SSL_FieldShapeType value) {
  assert(::SSL_FieldShapeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.type_ = value;
}
inline void SSL_FieldLineSegment::set_type(::SSL_FieldShapeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.type)
}

// -------------------------------------------------------------------

// SSL_FieldCircularArc

// required string name = 1;
inline bool SSL_FieldCircularArc::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_FieldCircularArc::has_name() const {
  return _internal_has_name();
}
inline void SSL_FieldCircularArc::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SSL_FieldCircularArc::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SSL_FieldCircularArc::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.name)
}
inline std::string* SSL_FieldCircularArc::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldCircularArc.name)
  return _s;
}
inline const std::string& SSL_FieldCircularArc::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SSL_FieldCircularArc::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SSL_FieldCircularArc::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SSL_FieldCircularArc::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldCircularArc.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SSL_FieldCircularArc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCircularArc.name)
}

// required .Vector2f center = 2;
inline bool SSL_FieldCircularArc::_internal_has_center() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.center_ != nullptr);
  return value;
}
inline bool SSL_FieldCircularArc::has_center() const {
  return _internal_has_center();
}
inline void SSL_FieldCircularArc::clear_center() {
  if (_impl_.center_ != nullptr) _impl_.center_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Vector2f& SSL_FieldCircularArc::_internal_center() const {
  const ::Vector2f* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2f&>(
      ::_Vector2f_default_instance_);
}
inline const ::Vector2f& SSL_FieldCircularArc::center() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.center)
  return _internal_center();
}
inline void SSL_FieldCircularArc::unsafe_arena_set_allocated_center(
    ::Vector2f* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_FieldCircularArc.center)
}
inline ::Vector2f* SSL_FieldCircularArc::release_center() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2f* SSL_FieldCircularArc::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:SSL_FieldCircularArc.center)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2f* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::Vector2f* SSL_FieldCircularArc::_internal_mutable_center() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2f>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::Vector2f* SSL_FieldCircularArc::mutable_center() {
  ::Vector2f* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:SSL_FieldCircularArc.center)
  return _msg;
}
inline void SSL_FieldCircularArc::set_allocated_center(::Vector2f* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCircularArc.center)
}

// required float radius = 3;
inline bool SSL_FieldCircularArc::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_FieldCircularArc::has_radius() const {
  return _internal_has_radius();
}
inline void SSL_FieldCircularArc::clear_radius() {
  _impl_.radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SSL_FieldCircularArc::_internal_radius() const {
  return _impl_.radius_;
}
inline float SSL_FieldCircularArc::radius() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.radius)
  return _internal_radius();
}
inline void SSL_FieldCircularArc::_internal_set_radius(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.radius_ = value;
}
inline void SSL_FieldCircularArc::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.radius)
}

// required float a1 = 4;
inline bool SSL_FieldCircularArc::_internal_has_a1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_FieldCircularArc::has_a1() const {
  return _internal_has_a1();
}
inline void SSL_FieldCircularArc::clear_a1() {
  _impl_.a1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_FieldCircularArc::_internal_a1() const {
  return _impl_.a1_;
}
inline float SSL_FieldCircularArc::a1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.a1)
  return _internal_a1();
}
inline void SSL_FieldCircularArc::_internal_set_a1(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.a1_ = value;
}
inline void SSL_FieldCircularArc::set_a1(float value) {
  _internal_set_a1(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.a1)
}

// required float a2 = 5;
inline bool SSL_FieldCircularArc::_internal_has_a2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_FieldCircularArc::has_a2() const {
  return _internal_has_a2();
}
inline void SSL_FieldCircularArc::clear_a2() {
  _impl_.a2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_FieldCircularArc::_internal_a2() const {
  return _impl_.a2_;
}
inline float SSL_FieldCircularArc::a2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.a2)
  return _internal_a2();
}
inline void SSL_FieldCircularArc::_internal_set_a2(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.a2_ = value;
}
inline void SSL_FieldCircularArc::set_a2(float value) {
  _internal_set_a2(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.a2)
}

// required float thickness = 6;
inline bool SSL_FieldCircularArc::_internal_has_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_FieldCircularArc::has_thickness() const {
  return _internal_has_thickness();
}
inline void SSL_FieldCircularArc::clear_thickness() {
  _impl_.thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SSL_FieldCircularArc::_internal_thickness() const {
  return _impl_.thickness_;
}
inline float SSL_FieldCircularArc::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.thickness)
  return _internal_thickness();
}
inline void SSL_FieldCircularArc::_internal_set_thickness(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.thickness_ = value;
}
inline void SSL_FieldCircularArc::set_thickness(float value) {
  _internal_set_thickness(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.thickness)
}

// optional .SSL_FieldShapeType type = 7;
inline bool SSL_FieldCircularArc::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_FieldCircularArc::has_type() const {
  return _internal_has_type();
}
inline void SSL_FieldCircularArc::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::SSL_FieldShapeType SSL_FieldCircularArc::_internal_type() const {
  return static_cast< ::SSL_FieldShapeType >(_impl_.type_);
}
inline ::SSL_FieldShapeType SSL_FieldCircularArc::type() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCircularArc.type)
  return _internal_type();
}
inline void SSL_FieldCircularArc::_internal_set_type(::SSL_FieldShapeType value) {
  assert(::SSL_FieldShapeType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.type_ = value;
}
inline void SSL_FieldCircularArc::set_type(::SSL_FieldShapeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SSL_FieldCircularArc.type)
}

// -------------------------------------------------------------------

// SSL_GeometryFieldSize

// required int32 field_length = 1;
inline bool SSL_GeometryFieldSize::_internal_has_field_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_field_length() const {
  return _internal_has_field_length();
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  _impl_.field_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t SSL_GeometryFieldSize::_internal_field_length() const {
  return _impl_.field_length_;
}
inline int32_t SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return _internal_field_length();
}
inline void SSL_GeometryFieldSize::_internal_set_field_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.field_length_ = value;
}
inline void SSL_GeometryFieldSize::set_field_length(int32_t value) {
  _internal_set_field_length(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 2;
inline bool SSL_GeometryFieldSize::_internal_has_field_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_field_width() const {
  return _internal_has_field_width();
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  _impl_.field_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t SSL_GeometryFieldSize::_internal_field_width() const {
  return _impl_.field_width_;
}
inline int32_t SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return _internal_field_width();
}
inline void SSL_GeometryFieldSize::_internal_set_field_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.field_width_ = value;
}
inline void SSL_GeometryFieldSize::set_field_width(int32_t value) {
  _internal_set_field_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// required int32 goal_width = 3;
inline bool SSL_GeometryFieldSize::_internal_has_goal_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  return _internal_has_goal_width();
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  _impl_.goal_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t SSL_GeometryFieldSize::_internal_goal_width() const {
  return _impl_.goal_width_;
}
inline int32_t SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return _internal_goal_width();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.goal_width_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_width(int32_t value) {
  _internal_set_goal_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 4;
inline bool SSL_GeometryFieldSize::_internal_has_goal_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  return _internal_has_goal_depth();
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  _impl_.goal_depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t SSL_GeometryFieldSize::_internal_goal_depth() const {
  return _impl_.goal_depth_;
}
inline int32_t SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return _internal_goal_depth();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_depth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.goal_depth_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_depth(int32_t value) {
  _internal_set_goal_depth(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// required int32 boundary_width = 5;
inline bool SSL_GeometryFieldSize::_internal_has_boundary_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  return _internal_has_boundary_width();
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  _impl_.boundary_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t SSL_GeometryFieldSize::_internal_boundary_width() const {
  return _impl_.boundary_width_;
}
inline int32_t SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return _internal_boundary_width();
}
inline void SSL_GeometryFieldSize::_internal_set_boundary_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.boundary_width_ = value;
}
inline void SSL_GeometryFieldSize::set_boundary_width(int32_t value) {
  _internal_set_boundary_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// repeated .SSL_FieldLineSegment field_lines = 6;
inline int SSL_GeometryFieldSize::_internal_field_lines_size() const {
  return _impl_.field_lines_.size();
}
inline int SSL_GeometryFieldSize::field_lines_size() const {
  return _internal_field_lines_size();
}
inline void SSL_GeometryFieldSize::clear_field_lines() {
  _impl_.field_lines_.Clear();
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::mutable_field_lines(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_lines)
  return _impl_.field_lines_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >*
SSL_GeometryFieldSize::mutable_field_lines() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_lines)
  return &_impl_.field_lines_;
}
inline const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::_internal_field_lines(int index) const {
  return _impl_.field_lines_.Get(index);
}
inline const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::field_lines(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_lines)
  return _internal_field_lines(index);
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::_internal_add_field_lines() {
  return _impl_.field_lines_.Add();
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::add_field_lines() {
  ::SSL_FieldLineSegment* _add = _internal_add_field_lines();
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_lines)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldLineSegment >&
SSL_GeometryFieldSize::field_lines() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_lines)
  return _impl_.field_lines_;
}

// repeated .SSL_FieldCircularArc field_arcs = 7;
inline int SSL_GeometryFieldSize::_internal_field_arcs_size() const {
  return _impl_.field_arcs_.size();
}
inline int SSL_GeometryFieldSize::field_arcs_size() const {
  return _internal_field_arcs_size();
}
inline void SSL_GeometryFieldSize::clear_field_arcs() {
  _impl_.field_arcs_.Clear();
}
inline ::SSL_FieldCircularArc* SSL_GeometryFieldSize::mutable_field_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_arcs)
  return _impl_.field_arcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCircularArc >*
SSL_GeometryFieldSize::mutable_field_arcs() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_arcs)
  return &_impl_.field_arcs_;
}
inline const ::SSL_FieldCircularArc& SSL_GeometryFieldSize::_internal_field_arcs(int index) const {
  return _impl_.field_arcs_.Get(index);
}
inline const ::SSL_FieldCircularArc& SSL_GeometryFieldSize::field_arcs(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_arcs)
  return _internal_field_arcs(index);
}
inline ::SSL_FieldCircularArc* SSL_GeometryFieldSize::_internal_add_field_arcs() {
  return _impl_.field_arcs_.Add();
}
inline ::SSL_FieldCircularArc* SSL_GeometryFieldSize::add_field_arcs() {
  ::SSL_FieldCircularArc* _add = _internal_add_field_arcs();
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_arcs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_FieldCircularArc >&
SSL_GeometryFieldSize::field_arcs() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_arcs)
  return _impl_.field_arcs_;
}

// optional int32 penalty_area_depth = 8;
inline bool SSL_GeometryFieldSize::_internal_has_penalty_area_depth() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_penalty_area_depth() const {
  return _internal_has_penalty_area_depth();
}
inline void SSL_GeometryFieldSize::clear_penalty_area_depth() {
  _impl_.penalty_area_depth_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t SSL_GeometryFieldSize::_internal_penalty_area_depth() const {
  return _impl_.penalty_area_depth_;
}
inline int32_t SSL_GeometryFieldSize::penalty_area_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_area_depth)
  return _internal_penalty_area_depth();
}
inline void SSL_GeometryFieldSize::_internal_set_penalty_area_depth(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.penalty_area_depth_ = value;
}
inline void SSL_GeometryFieldSize::set_penalty_area_depth(int32_t value) {
  _internal_set_penalty_area_depth(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_area_depth)
}

// optional int32 penalty_area_width = 9;
inline bool SSL_GeometryFieldSize::_internal_has_penalty_area_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_penalty_area_width() const {
  return _internal_has_penalty_area_width();
}
inline void SSL_GeometryFieldSize::clear_penalty_area_width() {
  _impl_.penalty_area_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t SSL_GeometryFieldSize::_internal_penalty_area_width() const {
  return _impl_.penalty_area_width_;
}
inline int32_t SSL_GeometryFieldSize::penalty_area_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_area_width)
  return _internal_penalty_area_width();
}
inline void SSL_GeometryFieldSize::_internal_set_penalty_area_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.penalty_area_width_ = value;
}
inline void SSL_GeometryFieldSize::set_penalty_area_width(int32_t value) {
  _internal_set_penalty_area_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_area_width)
}

// optional int32 center_circle_radius = 10;
inline bool SSL_GeometryFieldSize::_internal_has_center_circle_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_center_circle_radius() const {
  return _internal_has_center_circle_radius();
}
inline void SSL_GeometryFieldSize::clear_center_circle_radius() {
  _impl_.center_circle_radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t SSL_GeometryFieldSize::_internal_center_circle_radius() const {
  return _impl_.center_circle_radius_;
}
inline int32_t SSL_GeometryFieldSize::center_circle_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.center_circle_radius)
  return _internal_center_circle_radius();
}
inline void SSL_GeometryFieldSize::_internal_set_center_circle_radius(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.center_circle_radius_ = value;
}
inline void SSL_GeometryFieldSize::set_center_circle_radius(int32_t value) {
  _internal_set_center_circle_radius(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.center_circle_radius)
}

// optional int32 line_thickness = 11;
inline bool SSL_GeometryFieldSize::_internal_has_line_thickness() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_line_thickness() const {
  return _internal_has_line_thickness();
}
inline void SSL_GeometryFieldSize::clear_line_thickness() {
  _impl_.line_thickness_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t SSL_GeometryFieldSize::_internal_line_thickness() const {
  return _impl_.line_thickness_;
}
inline int32_t SSL_GeometryFieldSize::line_thickness() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.line_thickness)
  return _internal_line_thickness();
}
inline void SSL_GeometryFieldSize::_internal_set_line_thickness(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.line_thickness_ = value;
}
inline void SSL_GeometryFieldSize::set_line_thickness(int32_t value) {
  _internal_set_line_thickness(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.line_thickness)
}

// optional int32 goal_center_to_penalty_mark = 12;
inline bool SSL_GeometryFieldSize::_internal_has_goal_center_to_penalty_mark() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_center_to_penalty_mark() const {
  return _internal_has_goal_center_to_penalty_mark();
}
inline void SSL_GeometryFieldSize::clear_goal_center_to_penalty_mark() {
  _impl_.goal_center_to_penalty_mark_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t SSL_GeometryFieldSize::_internal_goal_center_to_penalty_mark() const {
  return _impl_.goal_center_to_penalty_mark_;
}
inline int32_t SSL_GeometryFieldSize::goal_center_to_penalty_mark() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_center_to_penalty_mark)
  return _internal_goal_center_to_penalty_mark();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_center_to_penalty_mark(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.goal_center_to_penalty_mark_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_center_to_penalty_mark(int32_t value) {
  _internal_set_goal_center_to_penalty_mark(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_center_to_penalty_mark)
}

// optional int32 goal_height = 13;
inline bool SSL_GeometryFieldSize::_internal_has_goal_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_goal_height() const {
  return _internal_has_goal_height();
}
inline void SSL_GeometryFieldSize::clear_goal_height() {
  _impl_.goal_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t SSL_GeometryFieldSize::_internal_goal_height() const {
  return _impl_.goal_height_;
}
inline int32_t SSL_GeometryFieldSize::goal_height() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_height)
  return _internal_goal_height();
}
inline void SSL_GeometryFieldSize::_internal_set_goal_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.goal_height_ = value;
}
inline void SSL_GeometryFieldSize::set_goal_height(int32_t value) {
  _internal_set_goal_height(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_height)
}

// optional float ball_radius = 14;
inline bool SSL_GeometryFieldSize::_internal_has_ball_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_ball_radius() const {
  return _internal_has_ball_radius();
}
inline void SSL_GeometryFieldSize::clear_ball_radius() {
  _impl_.ball_radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float SSL_GeometryFieldSize::_internal_ball_radius() const {
  return _impl_.ball_radius_;
}
inline float SSL_GeometryFieldSize::ball_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.ball_radius)
  return _internal_ball_radius();
}
inline void SSL_GeometryFieldSize::_internal_set_ball_radius(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.ball_radius_ = value;
}
inline void SSL_GeometryFieldSize::set_ball_radius(float value) {
  _internal_set_ball_radius(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.ball_radius)
}

// optional float max_robot_radius = 15;
inline bool SSL_GeometryFieldSize::_internal_has_max_robot_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SSL_GeometryFieldSize::has_max_robot_radius() const {
  return _internal_has_max_robot_radius();
}
inline void SSL_GeometryFieldSize::clear_max_robot_radius() {
  _impl_.max_robot_radius_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float SSL_GeometryFieldSize::_internal_max_robot_radius() const {
  return _impl_.max_robot_radius_;
}
inline float SSL_GeometryFieldSize::max_robot_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.max_robot_radius)
  return _internal_max_robot_radius();
}
inline void SSL_GeometryFieldSize::_internal_set_max_robot_radius(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.max_robot_radius_ = value;
}
inline void SSL_GeometryFieldSize::set_max_robot_radius(float value) {
  _internal_set_max_robot_radius(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.max_robot_radius)
}

// -------------------------------------------------------------------

// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
inline bool SSL_GeometryCameraCalibration::_internal_has_camera_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_camera_id() const {
  return _internal_has_camera_id();
}
inline void SSL_GeometryCameraCalibration::clear_camera_id() {
  _impl_.camera_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t SSL_GeometryCameraCalibration::_internal_camera_id() const {
  return _impl_.camera_id_;
}
inline uint32_t SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return _internal_camera_id();
}
inline void SSL_GeometryCameraCalibration::_internal_set_camera_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.camera_id_ = value;
}
inline void SSL_GeometryCameraCalibration::set_camera_id(uint32_t value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// required float focal_length = 2;
inline bool SSL_GeometryCameraCalibration::_internal_has_focal_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_focal_length() const {
  return _internal_has_focal_length();
}
inline void SSL_GeometryCameraCalibration::clear_focal_length() {
  _impl_.focal_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float SSL_GeometryCameraCalibration::_internal_focal_length() const {
  return _impl_.focal_length_;
}
inline float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return _internal_focal_length();
}
inline void SSL_GeometryCameraCalibration::_internal_set_focal_length(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.focal_length_ = value;
}
inline void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  _internal_set_focal_length(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// required float principal_point_x = 3;
inline bool SSL_GeometryCameraCalibration::_internal_has_principal_point_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  return _internal_has_principal_point_x();
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  _impl_.principal_point_x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SSL_GeometryCameraCalibration::_internal_principal_point_x() const {
  return _impl_.principal_point_x_;
}
inline float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return _internal_principal_point_x();
}
inline void SSL_GeometryCameraCalibration::_internal_set_principal_point_x(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.principal_point_x_ = value;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  _internal_set_principal_point_x(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
inline bool SSL_GeometryCameraCalibration::_internal_has_principal_point_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  return _internal_has_principal_point_y();
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  _impl_.principal_point_y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float SSL_GeometryCameraCalibration::_internal_principal_point_y() const {
  return _impl_.principal_point_y_;
}
inline float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return _internal_principal_point_y();
}
inline void SSL_GeometryCameraCalibration::_internal_set_principal_point_y(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.principal_point_y_ = value;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  _internal_set_principal_point_y(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// required float distortion = 5;
inline bool SSL_GeometryCameraCalibration::_internal_has_distortion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_distortion() const {
  return _internal_has_distortion();
}
inline void SSL_GeometryCameraCalibration::clear_distortion() {
  _impl_.distortion_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float SSL_GeometryCameraCalibration::_internal_distortion() const {
  return _impl_.distortion_;
}
inline float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return _internal_distortion();
}
inline void SSL_GeometryCameraCalibration::_internal_set_distortion(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.distortion_ = value;
}
inline void SSL_GeometryCameraCalibration::set_distortion(float value) {
  _internal_set_distortion(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// required float q0 = 6;
inline bool SSL_GeometryCameraCalibration::_internal_has_q0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q0() const {
  return _internal_has_q0();
}
inline void SSL_GeometryCameraCalibration::clear_q0() {
  _impl_.q0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float SSL_GeometryCameraCalibration::_internal_q0() const {
  return _impl_.q0_;
}
inline float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return _internal_q0();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q0(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.q0_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q0(float value) {
  _internal_set_q0(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// required float q1 = 7;
inline bool SSL_GeometryCameraCalibration::_internal_has_q1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q1() const {
  return _internal_has_q1();
}
inline void SSL_GeometryCameraCalibration::clear_q1() {
  _impl_.q1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float SSL_GeometryCameraCalibration::_internal_q1() const {
  return _impl_.q1_;
}
inline float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return _internal_q1();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q1(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.q1_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q1(float value) {
  _internal_set_q1(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// required float q2 = 8;
inline bool SSL_GeometryCameraCalibration::_internal_has_q2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q2() const {
  return _internal_has_q2();
}
inline void SSL_GeometryCameraCalibration::clear_q2() {
  _impl_.q2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float SSL_GeometryCameraCalibration::_internal_q2() const {
  return _impl_.q2_;
}
inline float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return _internal_q2();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q2(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.q2_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q2(float value) {
  _internal_set_q2(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// required float q3 = 9;
inline bool SSL_GeometryCameraCalibration::_internal_has_q3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_q3() const {
  return _internal_has_q3();
}
inline void SSL_GeometryCameraCalibration::clear_q3() {
  _impl_.q3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float SSL_GeometryCameraCalibration::_internal_q3() const {
  return _impl_.q3_;
}
inline float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return _internal_q3();
}
inline void SSL_GeometryCameraCalibration::_internal_set_q3(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.q3_ = value;
}
inline void SSL_GeometryCameraCalibration::set_q3(float value) {
  _internal_set_q3(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// required float tx = 10;
inline bool SSL_GeometryCameraCalibration::_internal_has_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_tx() const {
  return _internal_has_tx();
}
inline void SSL_GeometryCameraCalibration::clear_tx() {
  _impl_.tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float SSL_GeometryCameraCalibration::_internal_tx() const {
  return _impl_.tx_;
}
inline float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return _internal_tx();
}
inline void SSL_GeometryCameraCalibration::_internal_set_tx(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.tx_ = value;
}
inline void SSL_GeometryCameraCalibration::set_tx(float value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// required float ty = 11;
inline bool SSL_GeometryCameraCalibration::_internal_has_ty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_ty() const {
  return _internal_has_ty();
}
inline void SSL_GeometryCameraCalibration::clear_ty() {
  _impl_.ty_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float SSL_GeometryCameraCalibration::_internal_ty() const {
  return _impl_.ty_;
}
inline float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return _internal_ty();
}
inline void SSL_GeometryCameraCalibration::_internal_set_ty(float value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ty_ = value;
}
inline void SSL_GeometryCameraCalibration::set_ty(float value) {
  _internal_set_ty(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// required float tz = 12;
inline bool SSL_GeometryCameraCalibration::_internal_has_tz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_tz() const {
  return _internal_has_tz();
}
inline void SSL_GeometryCameraCalibration::clear_tz() {
  _impl_.tz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline float SSL_GeometryCameraCalibration::_internal_tz() const {
  return _impl_.tz_;
}
inline float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return _internal_tz();
}
inline void SSL_GeometryCameraCalibration::_internal_set_tz(float value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.tz_ = value;
}
inline void SSL_GeometryCameraCalibration::set_tz(float value) {
  _internal_set_tz(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
inline bool SSL_GeometryCameraCalibration::_internal_has_derived_camera_world_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  return _internal_has_derived_camera_world_tx();
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  _impl_.derived_camera_world_tx_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_tx() const {
  return _impl_.derived_camera_world_tx_;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return _internal_derived_camera_world_tx();
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_tx(float value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.derived_camera_world_tx_ = value;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  _internal_set_derived_camera_world_tx(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
inline bool SSL_GeometryCameraCalibration::_internal_has_derived_camera_world_ty() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  return _internal_has_derived_camera_world_ty();
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  _impl_.derived_camera_world_ty_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_ty() const {
  return _impl_.derived_camera_world_ty_;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return _internal_derived_camera_world_ty();
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_ty(float value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.derived_camera_world_ty_ = value;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  _internal_set_derived_camera_world_ty(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
inline bool SSL_GeometryCameraCalibration::_internal_has_derived_camera_world_tz() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  return _internal_has_derived_camera_world_tz();
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  _impl_.derived_camera_world_tz_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float SSL_GeometryCameraCalibration::_internal_derived_camera_world_tz() const {
  return _impl_.derived_camera_world_tz_;
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return _internal_derived_camera_world_tz();
}
inline void SSL_GeometryCameraCalibration::_internal_set_derived_camera_world_tz(float value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.derived_camera_world_tz_ = value;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  _internal_set_derived_camera_world_tz(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

// optional uint32 pixel_image_width = 16;
inline bool SSL_GeometryCameraCalibration::_internal_has_pixel_image_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_pixel_image_width() const {
  return _internal_has_pixel_image_width();
}
inline void SSL_GeometryCameraCalibration::clear_pixel_image_width() {
  _impl_.pixel_image_width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline uint32_t SSL_GeometryCameraCalibration::_internal_pixel_image_width() const {
  return _impl_.pixel_image_width_;
}
inline uint32_t SSL_GeometryCameraCalibration::pixel_image_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.pixel_image_width)
  return _internal_pixel_image_width();
}
inline void SSL_GeometryCameraCalibration::_internal_set_pixel_image_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.pixel_image_width_ = value;
}
inline void SSL_GeometryCameraCalibration::set_pixel_image_width(uint32_t value) {
  _internal_set_pixel_image_width(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.pixel_image_width)
}

// optional uint32 pixel_image_height = 17;
inline bool SSL_GeometryCameraCalibration::_internal_has_pixel_image_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool SSL_GeometryCameraCalibration::has_pixel_image_height() const {
  return _internal_has_pixel_image_height();
}
inline void SSL_GeometryCameraCalibration::clear_pixel_image_height() {
  _impl_.pixel_image_height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline uint32_t SSL_GeometryCameraCalibration::_internal_pixel_image_height() const {
  return _impl_.pixel_image_height_;
}
inline uint32_t SSL_GeometryCameraCalibration::pixel_image_height() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.pixel_image_height)
  return _internal_pixel_image_height();
}
inline void SSL_GeometryCameraCalibration::_internal_set_pixel_image_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.pixel_image_height_ = value;
}
inline void SSL_GeometryCameraCalibration::set_pixel_image_height(uint32_t value) {
  _internal_set_pixel_image_height(value);
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.pixel_image_height)
}

// -------------------------------------------------------------------

// SSL_BallModelStraightTwoPhase

// required double acc_slide = 1;
inline bool SSL_BallModelStraightTwoPhase::_internal_has_acc_slide() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_BallModelStraightTwoPhase::has_acc_slide() const {
  return _internal_has_acc_slide();
}
inline void SSL_BallModelStraightTwoPhase::clear_acc_slide() {
  _impl_.acc_slide_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SSL_BallModelStraightTwoPhase::_internal_acc_slide() const {
  return _impl_.acc_slide_;
}
inline double SSL_BallModelStraightTwoPhase::acc_slide() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelStraightTwoPhase.acc_slide)
  return _internal_acc_slide();
}
inline void SSL_BallModelStraightTwoPhase::_internal_set_acc_slide(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.acc_slide_ = value;
}
inline void SSL_BallModelStraightTwoPhase::set_acc_slide(double value) {
  _internal_set_acc_slide(value);
  // @@protoc_insertion_point(field_set:SSL_BallModelStraightTwoPhase.acc_slide)
}

// required double acc_roll = 2;
inline bool SSL_BallModelStraightTwoPhase::_internal_has_acc_roll() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_BallModelStraightTwoPhase::has_acc_roll() const {
  return _internal_has_acc_roll();
}
inline void SSL_BallModelStraightTwoPhase::clear_acc_roll() {
  _impl_.acc_roll_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SSL_BallModelStraightTwoPhase::_internal_acc_roll() const {
  return _impl_.acc_roll_;
}
inline double SSL_BallModelStraightTwoPhase::acc_roll() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelStraightTwoPhase.acc_roll)
  return _internal_acc_roll();
}
inline void SSL_BallModelStraightTwoPhase::_internal_set_acc_roll(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.acc_roll_ = value;
}
inline void SSL_BallModelStraightTwoPhase::set_acc_roll(double value) {
  _internal_set_acc_roll(value);
  // @@protoc_insertion_point(field_set:SSL_BallModelStraightTwoPhase.acc_roll)
}

// required double k_switch = 3;
inline bool SSL_BallModelStraightTwoPhase::_internal_has_k_switch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_BallModelStraightTwoPhase::has_k_switch() const {
  return _internal_has_k_switch();
}
inline void SSL_BallModelStraightTwoPhase::clear_k_switch() {
  _impl_.k_switch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SSL_BallModelStraightTwoPhase::_internal_k_switch() const {
  return _impl_.k_switch_;
}
inline double SSL_BallModelStraightTwoPhase::k_switch() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelStraightTwoPhase.k_switch)
  return _internal_k_switch();
}
inline void SSL_BallModelStraightTwoPhase::_internal_set_k_switch(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.k_switch_ = value;
}
inline void SSL_BallModelStraightTwoPhase::set_k_switch(double value) {
  _internal_set_k_switch(value);
  // @@protoc_insertion_point(field_set:SSL_BallModelStraightTwoPhase.k_switch)
}

// -------------------------------------------------------------------

// SSL_BallModelChipFixedLoss

// required double damping_xy_first_hop = 1;
inline bool SSL_BallModelChipFixedLoss::_internal_has_damping_xy_first_hop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SSL_BallModelChipFixedLoss::has_damping_xy_first_hop() const {
  return _internal_has_damping_xy_first_hop();
}
inline void SSL_BallModelChipFixedLoss::clear_damping_xy_first_hop() {
  _impl_.damping_xy_first_hop_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double SSL_BallModelChipFixedLoss::_internal_damping_xy_first_hop() const {
  return _impl_.damping_xy_first_hop_;
}
inline double SSL_BallModelChipFixedLoss::damping_xy_first_hop() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelChipFixedLoss.damping_xy_first_hop)
  return _internal_damping_xy_first_hop();
}
inline void SSL_BallModelChipFixedLoss::_internal_set_damping_xy_first_hop(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.damping_xy_first_hop_ = value;
}
inline void SSL_BallModelChipFixedLoss::set_damping_xy_first_hop(double value) {
  _internal_set_damping_xy_first_hop(value);
  // @@protoc_insertion_point(field_set:SSL_BallModelChipFixedLoss.damping_xy_first_hop)
}

// required double damping_xy_other_hops = 2;
inline bool SSL_BallModelChipFixedLoss::_internal_has_damping_xy_other_hops() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SSL_BallModelChipFixedLoss::has_damping_xy_other_hops() const {
  return _internal_has_damping_xy_other_hops();
}
inline void SSL_BallModelChipFixedLoss::clear_damping_xy_other_hops() {
  _impl_.damping_xy_other_hops_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double SSL_BallModelChipFixedLoss::_internal_damping_xy_other_hops() const {
  return _impl_.damping_xy_other_hops_;
}
inline double SSL_BallModelChipFixedLoss::damping_xy_other_hops() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelChipFixedLoss.damping_xy_other_hops)
  return _internal_damping_xy_other_hops();
}
inline void SSL_BallModelChipFixedLoss::_internal_set_damping_xy_other_hops(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.damping_xy_other_hops_ = value;
}
inline void SSL_BallModelChipFixedLoss::set_damping_xy_other_hops(double value) {
  _internal_set_damping_xy_other_hops(value);
  // @@protoc_insertion_point(field_set:SSL_BallModelChipFixedLoss.damping_xy_other_hops)
}

// required double damping_z = 3;
inline bool SSL_BallModelChipFixedLoss::_internal_has_damping_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SSL_BallModelChipFixedLoss::has_damping_z() const {
  return _internal_has_damping_z();
}
inline void SSL_BallModelChipFixedLoss::clear_damping_z() {
  _impl_.damping_z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double SSL_BallModelChipFixedLoss::_internal_damping_z() const {
  return _impl_.damping_z_;
}
inline double SSL_BallModelChipFixedLoss::damping_z() const {
  // @@protoc_insertion_point(field_get:SSL_BallModelChipFixedLoss.damping_z)
  return _internal_damping_z();
}
inline void SSL_BallModelChipFixedLoss::_internal_set_damping_z(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.damping_z_ = value;
}
inline void SSL_BallModelChipFixedLoss::set_damping_z(double value) {
  _internal_set_damping_z(value);
  // @@protoc_insertion_point(field_set:SSL_BallModelChipFixedLoss.damping_z)
}

// -------------------------------------------------------------------

// SSL_GeometryModels

// optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
inline bool SSL_GeometryModels::_internal_has_straight_two_phase() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.straight_two_phase_ != nullptr);
  return value;
}
inline bool SSL_GeometryModels::has_straight_two_phase() const {
  return _internal_has_straight_two_phase();
}
inline void SSL_GeometryModels::clear_straight_two_phase() {
  if (_impl_.straight_two_phase_ != nullptr) _impl_.straight_two_phase_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SSL_BallModelStraightTwoPhase& SSL_GeometryModels::_internal_straight_two_phase() const {
  const ::SSL_BallModelStraightTwoPhase* p = _impl_.straight_two_phase_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_BallModelStraightTwoPhase&>(
      ::_SSL_BallModelStraightTwoPhase_default_instance_);
}
inline const ::SSL_BallModelStraightTwoPhase& SSL_GeometryModels::straight_two_phase() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryModels.straight_two_phase)
  return _internal_straight_two_phase();
}
inline void SSL_GeometryModels::unsafe_arena_set_allocated_straight_two_phase(
    ::SSL_BallModelStraightTwoPhase* straight_two_phase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.straight_two_phase_);
  }
  _impl_.straight_two_phase_ = straight_two_phase;
  if (straight_two_phase) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryModels.straight_two_phase)
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::release_straight_two_phase() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_BallModelStraightTwoPhase* temp = _impl_.straight_two_phase_;
  _impl_.straight_two_phase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::unsafe_arena_release_straight_two_phase() {
  // @@protoc_insertion_point(field_release:SSL_GeometryModels.straight_two_phase)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_BallModelStraightTwoPhase* temp = _impl_.straight_two_phase_;
  _impl_.straight_two_phase_ = nullptr;
  return temp;
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::_internal_mutable_straight_two_phase() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.straight_two_phase_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_BallModelStraightTwoPhase>(GetArenaForAllocation());
    _impl_.straight_two_phase_ = p;
  }
  return _impl_.straight_two_phase_;
}
inline ::SSL_BallModelStraightTwoPhase* SSL_GeometryModels::mutable_straight_two_phase() {
  ::SSL_BallModelStraightTwoPhase* _msg = _internal_mutable_straight_two_phase();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryModels.straight_two_phase)
  return _msg;
}
inline void SSL_GeometryModels::set_allocated_straight_two_phase(::SSL_BallModelStraightTwoPhase* straight_two_phase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.straight_two_phase_;
  }
  if (straight_two_phase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(straight_two_phase);
    if (message_arena != submessage_arena) {
      straight_two_phase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, straight_two_phase, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.straight_two_phase_ = straight_two_phase;
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryModels.straight_two_phase)
}

// optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
inline bool SSL_GeometryModels::_internal_has_chip_fixed_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chip_fixed_loss_ != nullptr);
  return value;
}
inline bool SSL_GeometryModels::has_chip_fixed_loss() const {
  return _internal_has_chip_fixed_loss();
}
inline void SSL_GeometryModels::clear_chip_fixed_loss() {
  if (_impl_.chip_fixed_loss_ != nullptr) _impl_.chip_fixed_loss_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SSL_BallModelChipFixedLoss& SSL_GeometryModels::_internal_chip_fixed_loss() const {
  const ::SSL_BallModelChipFixedLoss* p = _impl_.chip_fixed_loss_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_BallModelChipFixedLoss&>(
      ::_SSL_BallModelChipFixedLoss_default_instance_);
}
inline const ::SSL_BallModelChipFixedLoss& SSL_GeometryModels::chip_fixed_loss() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryModels.chip_fixed_loss)
  return _internal_chip_fixed_loss();
}
inline void SSL_GeometryModels::unsafe_arena_set_allocated_chip_fixed_loss(
    ::SSL_BallModelChipFixedLoss* chip_fixed_loss) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chip_fixed_loss_);
  }
  _impl_.chip_fixed_loss_ = chip_fixed_loss;
  if (chip_fixed_loss) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryModels.chip_fixed_loss)
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::release_chip_fixed_loss() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_BallModelChipFixedLoss* temp = _impl_.chip_fixed_loss_;
  _impl_.chip_fixed_loss_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::unsafe_arena_release_chip_fixed_loss() {
  // @@protoc_insertion_point(field_release:SSL_GeometryModels.chip_fixed_loss)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_BallModelChipFixedLoss* temp = _impl_.chip_fixed_loss_;
  _impl_.chip_fixed_loss_ = nullptr;
  return temp;
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::_internal_mutable_chip_fixed_loss() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chip_fixed_loss_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_BallModelChipFixedLoss>(GetArenaForAllocation());
    _impl_.chip_fixed_loss_ = p;
  }
  return _impl_.chip_fixed_loss_;
}
inline ::SSL_BallModelChipFixedLoss* SSL_GeometryModels::mutable_chip_fixed_loss() {
  ::SSL_BallModelChipFixedLoss* _msg = _internal_mutable_chip_fixed_loss();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryModels.chip_fixed_loss)
  return _msg;
}
inline void SSL_GeometryModels::set_allocated_chip_fixed_loss(::SSL_BallModelChipFixedLoss* chip_fixed_loss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chip_fixed_loss_;
  }
  if (chip_fixed_loss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chip_fixed_loss);
    if (message_arena != submessage_arena) {
      chip_fixed_loss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chip_fixed_loss, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chip_fixed_loss_ = chip_fixed_loss;
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryModels.chip_fixed_loss)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::_internal_has_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.field_ != nullptr);
  return value;
}
inline bool SSL_GeometryData::has_field() const {
  return _internal_has_field();
}
inline void SSL_GeometryData::clear_field() {
  if (_impl_.field_ != nullptr) _impl_.field_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::_internal_field() const {
  const ::SSL_GeometryFieldSize* p = _impl_.field_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryFieldSize&>(
      ::_SSL_GeometryFieldSize_default_instance_);
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return _internal_field();
}
inline void SSL_GeometryData::unsafe_arena_set_allocated_field(
    ::SSL_GeometryFieldSize* field) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.field_);
  }
  _impl_.field_ = field;
  if (field) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryData.field)
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryFieldSize* temp = _impl_.field_;
  _impl_.field_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::unsafe_arena_release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryFieldSize* temp = _impl_.field_;
  _impl_.field_ = nullptr;
  return temp;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::_internal_mutable_field() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.field_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_GeometryFieldSize>(GetArenaForAllocation());
    _impl_.field_ = p;
  }
  return _impl_.field_;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  ::SSL_GeometryFieldSize* _msg = _internal_mutable_field();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return _msg;
}
inline void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.field_;
  }
  if (field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(field);
    if (message_arena != submessage_arena) {
      field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, field, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.field_ = field;
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::_internal_calib_size() const {
  return _impl_.calib_.size();
}
inline int SSL_GeometryData::calib_size() const {
  return _internal_calib_size();
}
inline void SSL_GeometryData::clear_calib() {
  _impl_.calib_.Clear();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return _impl_.calib_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &_impl_.calib_;
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::_internal_calib(int index) const {
  return _impl_.calib_.Get(index);
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return _internal_calib(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::_internal_add_calib() {
  return _impl_.calib_.Add();
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  ::SSL_GeometryCameraCalibration* _add = _internal_add_calib();
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return _impl_.calib_;
}

// optional .SSL_GeometryModels models = 3;
inline bool SSL_GeometryData::_internal_has_models() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.models_ != nullptr);
  return value;
}
inline bool SSL_GeometryData::has_models() const {
  return _internal_has_models();
}
inline void SSL_GeometryData::clear_models() {
  if (_impl_.models_ != nullptr) _impl_.models_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SSL_GeometryModels& SSL_GeometryData::_internal_models() const {
  const ::SSL_GeometryModels* p = _impl_.models_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryModels&>(
      ::_SSL_GeometryModels_default_instance_);
}
inline const ::SSL_GeometryModels& SSL_GeometryData::models() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.models)
  return _internal_models();
}
inline void SSL_GeometryData::unsafe_arena_set_allocated_models(
    ::SSL_GeometryModels* models) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.models_);
  }
  _impl_.models_ = models;
  if (models) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SSL_GeometryData.models)
}
inline ::SSL_GeometryModels* SSL_GeometryData::release_models() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_GeometryModels* temp = _impl_.models_;
  _impl_.models_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_GeometryModels* SSL_GeometryData::unsafe_arena_release_models() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.models)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SSL_GeometryModels* temp = _impl_.models_;
  _impl_.models_ = nullptr;
  return temp;
}
inline ::SSL_GeometryModels* SSL_GeometryData::_internal_mutable_models() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.models_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_GeometryModels>(GetArenaForAllocation());
    _impl_.models_ = p;
  }
  return _impl_.models_;
}
inline ::SSL_GeometryModels* SSL_GeometryData::mutable_models() {
  ::SSL_GeometryModels* _msg = _internal_mutable_models();
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.models)
  return _msg;
}
inline void SSL_GeometryData::set_allocated_models(::SSL_GeometryModels* models) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.models_;
  }
  if (models) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(models);
    if (message_arena != submessage_arena) {
      models = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, models, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.models_ = models;
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.models)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SSL_FieldShapeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_FieldShapeType>() {
  return ::SSL_FieldShapeType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fgeometry_2eproto
