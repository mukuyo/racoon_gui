// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_detection.proto

#include "ssl_vision_detection.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SSL_DetectionBall::SSL_DetectionBall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_.area_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.pixel_x_)*/0
  , /*decltype(_impl_.pixel_y_)*/0} {}
struct SSL_DetectionBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_DetectionBallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_DetectionBallDefaultTypeInternal() {}
  union {
    SSL_DetectionBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_DetectionBallDefaultTypeInternal _SSL_DetectionBall_default_instance_;
PROTOBUF_CONSTEXPR SSL_DetectionRobot::SSL_DetectionRobot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.confidence_)*/0
  , /*decltype(_impl_.robot_id_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.orientation_)*/0
  , /*decltype(_impl_.pixel_x_)*/0
  , /*decltype(_impl_.pixel_y_)*/0
  , /*decltype(_impl_.height_)*/0} {}
struct SSL_DetectionRobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_DetectionRobotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_DetectionRobotDefaultTypeInternal() {}
  union {
    SSL_DetectionRobot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_DetectionRobotDefaultTypeInternal _SSL_DetectionRobot_default_instance_;
PROTOBUF_CONSTEXPR SSL_DetectionFrame::SSL_DetectionFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balls_)*/{}
  , /*decltype(_impl_.robots_yellow_)*/{}
  , /*decltype(_impl_.robots_blue_)*/{}
  , /*decltype(_impl_.t_capture_)*/0
  , /*decltype(_impl_.frame_number_)*/0u
  , /*decltype(_impl_.camera_id_)*/0u
  , /*decltype(_impl_.t_sent_)*/0} {}
struct SSL_DetectionFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_DetectionFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_DetectionFrameDefaultTypeInternal() {}
  union {
    SSL_DetectionFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_DetectionFrameDefaultTypeInternal _SSL_DetectionFrame_default_instance_;
static ::_pb::Metadata file_level_metadata_ssl_5fvision_5fdetection_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ssl_5fvision_5fdetection_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ssl_5fvision_5fdetection_2eproto = nullptr;

const uint32_t TableStruct_ssl_5fvision_5fdetection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.area_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.pixel_x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionBall, _impl_.pixel_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.confidence_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.pixel_x_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.pixel_y_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionRobot, _impl_.height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.frame_number_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.t_capture_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.t_sent_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.balls_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.robots_yellow_),
  PROTOBUF_FIELD_OFFSET(::SSL_DetectionFrame, _impl_.robots_blue_),
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::SSL_DetectionBall)},
  { 20, 34, -1, sizeof(::SSL_DetectionRobot)},
  { 42, 55, -1, sizeof(::SSL_DetectionFrame)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SSL_DetectionBall_default_instance_._instance,
  &::_SSL_DetectionRobot_default_instance_._instance,
  &::_SSL_DetectionFrame_default_instance_._instance,
};

const char descriptor_table_protodef_ssl_5fvision_5fdetection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032ssl_vision_detection.proto\032\031ssl_vision"
  "_geometry.proto\"x\n\021SSL_DetectionBall\022\022\n\n"
  "confidence\030\001 \002(\002\022\014\n\004area\030\002 \001(\r\022\t\n\001x\030\003 \002("
  "\002\022\t\n\001y\030\004 \002(\002\022\t\n\001z\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002(\002"
  "\022\017\n\007pixel_y\030\007 \002(\002\"\227\001\n\022SSL_DetectionRobot"
  "\022\022\n\nconfidence\030\001 \002(\002\022\020\n\010robot_id\030\002 \001(\r\022\t"
  "\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\023\n\013orientation\030\005 \001("
  "\002\022\017\n\007pixel_x\030\006 \002(\002\022\017\n\007pixel_y\030\007 \002(\002\022\016\n\006h"
  "eight\030\010 \001(\002\"\331\001\n\022SSL_DetectionFrame\022\024\n\014fr"
  "ame_number\030\001 \002(\r\022\021\n\tt_capture\030\002 \002(\001\022\016\n\006t"
  "_sent\030\003 \002(\001\022\021\n\tcamera_id\030\004 \002(\r\022!\n\005balls\030"
  "\005 \003(\0132\022.SSL_DetectionBall\022*\n\rrobots_yell"
  "ow\030\006 \003(\0132\023.SSL_DetectionRobot\022(\n\013robots_"
  "blue\030\007 \003(\0132\023.SSL_DetectionRobotB-Z+githu"
  "b.com/Rione-SSL/RACOON-Pi/proto/pb_gen"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ssl_5fvision_5fdetection_2eproto_deps[1] = {
  &::descriptor_table_ssl_5fvision_5fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_ssl_5fvision_5fdetection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ssl_5fvision_5fdetection_2eproto = {
    false, false, 598, descriptor_table_protodef_ssl_5fvision_5fdetection_2eproto,
    "ssl_vision_detection.proto",
    &descriptor_table_ssl_5fvision_5fdetection_2eproto_once, descriptor_table_ssl_5fvision_5fdetection_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_ssl_5fvision_5fdetection_2eproto::offsets,
    file_level_metadata_ssl_5fvision_5fdetection_2eproto, file_level_enum_descriptors_ssl_5fvision_5fdetection_2eproto,
    file_level_service_descriptors_ssl_5fvision_5fdetection_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ssl_5fvision_5fdetection_2eproto_getter() {
  return &descriptor_table_ssl_5fvision_5fdetection_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ssl_5fvision_5fdetection_2eproto(&descriptor_table_ssl_5fvision_5fdetection_2eproto);

// ===================================================================

class SSL_DetectionBall::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_DetectionBall>()._impl_._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pixel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pixel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000006d) ^ 0x0000006d) != 0;
  }
};

SSL_DetectionBall::SSL_DetectionBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionBall)
}
SSL_DetectionBall::SSL_DetectionBall(const SSL_DetectionBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_DetectionBall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.pixel_x_){}
    , decltype(_impl_.pixel_y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.confidence_, &from._impl_.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pixel_y_) -
    reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.pixel_y_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionBall)
}

inline void SSL_DetectionBall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.confidence_){0}
    , decltype(_impl_.area_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.pixel_x_){0}
    , decltype(_impl_.pixel_y_){0}
  };
}

SSL_DetectionBall::~SSL_DetectionBall() {
  // @@protoc_insertion_point(destructor:SSL_DetectionBall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_DetectionBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSL_DetectionBall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pixel_y_) -
        reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.pixel_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_DetectionBall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_area(&has_bits);
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float pixel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_pixel_x(&has_bits);
          _impl_.pixel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float pixel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_pixel_y(&has_bits);
          _impl_.pixel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_DetectionBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_confidence(), target);
  }

  // optional uint32 area = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_area(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pixel_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionBall)
  return target;
}

size_t SSL_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionBall)
  size_t total_size = 0;

  if (_internal_has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_DetectionBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionBall)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 area = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_area());
  }

  // optional float z = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_DetectionBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_DetectionBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_DetectionBall::GetClassData() const { return &_class_data_; }


void SSL_DetectionBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_DetectionBall*>(&to_msg);
  auto& from = static_cast<const SSL_DetectionBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionBall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.area_ = from._impl_.area_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pixel_x_ = from._impl_.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pixel_y_ = from._impl_.pixel_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_DetectionBall::CopyFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SSL_DetectionBall::InternalSwap(SSL_DetectionBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.pixel_y_)
      + sizeof(SSL_DetectionBall::_impl_.pixel_y_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionBall, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_DetectionBall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_2eproto[0]);
}

// ===================================================================

class SSL_DetectionRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_DetectionRobot>()._impl_._has_bits_);
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pixel_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pixel_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000006d) ^ 0x0000006d) != 0;
  }
};

SSL_DetectionRobot::SSL_DetectionRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionRobot)
}
SSL_DetectionRobot::SSL_DetectionRobot(const SSL_DetectionRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_DetectionRobot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.confidence_){}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.orientation_){}
    , decltype(_impl_.pixel_x_){}
    , decltype(_impl_.pixel_y_){}
    , decltype(_impl_.height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.confidence_, &from._impl_.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionRobot)
}

inline void SSL_DetectionRobot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.confidence_){0}
    , decltype(_impl_.robot_id_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.orientation_){0}
    , decltype(_impl_.pixel_x_){0}
    , decltype(_impl_.pixel_y_){0}
    , decltype(_impl_.height_){0}
  };
}

SSL_DetectionRobot::~SSL_DetectionRobot() {
  // @@protoc_insertion_point(destructor:SSL_DetectionRobot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_DetectionRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSL_DetectionRobot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionRobot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.height_) -
        reinterpret_cast<char*>(&_impl_.confidence_)) + sizeof(_impl_.height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_DetectionRobot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_confidence(&has_bits);
          _impl_.confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 robot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_robot_id(&has_bits);
          _impl_.robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_orientation(&has_bits);
          _impl_.orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float pixel_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_pixel_x(&has_bits);
          _impl_.pixel_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float pixel_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_pixel_y(&has_bits);
          _impl_.pixel_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_DetectionRobot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionRobot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float confidence = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_confidence(), target);
  }

  // optional uint32 robot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_robot_id(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_orientation(), target);
  }

  // required float pixel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_pixel_y(), target);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionRobot)
  return target;
}

size_t SSL_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionRobot)
  size_t total_size = 0;

  if (_internal_has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_DetectionRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionRobot)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 robot_id = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_robot_id());
  }

  // optional float orientation = 5;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 + 4;
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_DetectionRobot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_DetectionRobot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_DetectionRobot::GetClassData() const { return &_class_data_; }


void SSL_DetectionRobot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_DetectionRobot*>(&to_msg);
  auto& from = static_cast<const SSL_DetectionRobot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionRobot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.confidence_ = from._impl_.confidence_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.robot_id_ = from._impl_.robot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.orientation_ = from._impl_.orientation_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.pixel_x_ = from._impl_.pixel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.pixel_y_ = from._impl_.pixel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_DetectionRobot::CopyFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SSL_DetectionRobot::InternalSwap(SSL_DetectionRobot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.height_)
      + sizeof(SSL_DetectionRobot::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionRobot, _impl_.confidence_)>(
          reinterpret_cast<char*>(&_impl_.confidence_),
          reinterpret_cast<char*>(&other->_impl_.confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_DetectionRobot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_2eproto[1]);
}

// ===================================================================

class SSL_DetectionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_DetectionFrame>()._impl_._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_t_capture(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_t_sent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

SSL_DetectionFrame::SSL_DetectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_DetectionFrame)
}
SSL_DetectionFrame::SSL_DetectionFrame(const SSL_DetectionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_DetectionFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balls_){from._impl_.balls_}
    , decltype(_impl_.robots_yellow_){from._impl_.robots_yellow_}
    , decltype(_impl_.robots_blue_){from._impl_.robots_blue_}
    , decltype(_impl_.t_capture_){}
    , decltype(_impl_.frame_number_){}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.t_sent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.t_capture_, &from._impl_.t_capture_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.t_sent_) -
    reinterpret_cast<char*>(&_impl_.t_capture_)) + sizeof(_impl_.t_sent_));
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionFrame)
}

inline void SSL_DetectionFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balls_){arena}
    , decltype(_impl_.robots_yellow_){arena}
    , decltype(_impl_.robots_blue_){arena}
    , decltype(_impl_.t_capture_){0}
    , decltype(_impl_.frame_number_){0u}
    , decltype(_impl_.camera_id_){0u}
    , decltype(_impl_.t_sent_){0}
  };
}

SSL_DetectionFrame::~SSL_DetectionFrame() {
  // @@protoc_insertion_point(destructor:SSL_DetectionFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_DetectionFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.balls_.~RepeatedPtrField();
  _impl_.robots_yellow_.~RepeatedPtrField();
  _impl_.robots_blue_.~RepeatedPtrField();
}

void SSL_DetectionFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.balls_.Clear();
  _impl_.robots_yellow_.Clear();
  _impl_.robots_blue_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.t_capture_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.t_sent_) -
        reinterpret_cast<char*>(&_impl_.t_capture_)) + sizeof(_impl_.t_sent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_DetectionFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          _impl_.frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double t_capture = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_t_capture(&has_bits);
          _impl_.t_capture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double t_sent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_t_sent(&has_bits);
          _impl_.t_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 camera_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_camera_id(&has_bits);
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_DetectionBall balls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_DetectionRobot robots_yellow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_yellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_DetectionRobot robots_blue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_blue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_DetectionFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // required double t_capture = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_t_capture(), target);
  }

  // required double t_sent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_t_sent(), target);
  }

  // required uint32 camera_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_camera_id(), target);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balls_size()); i < n; i++) {
    const auto& repfield = this->_internal_balls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robots_yellow_size()); i < n; i++) {
    const auto& repfield = this->_internal_robots_yellow(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robots_blue_size()); i < n; i++) {
    const auto& repfield = this->_internal_robots_blue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionFrame)
  return target;
}

size_t SSL_DetectionFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionFrame)
  size_t total_size = 0;

  if (_internal_has_t_capture()) {
    // required double t_capture = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());
  }

  if (_internal_has_camera_id()) {
    // required uint32 camera_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camera_id());
  }

  if (_internal_has_t_sent()) {
    // required double t_sent = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_DetectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionFrame)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double t_capture = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());

    // required uint32 camera_id = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camera_id());

    // required double t_sent = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_DetectionBall balls = 5;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->_impl_.balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  total_size += 1UL * this->_internal_robots_yellow_size();
  for (const auto& msg : this->_impl_.robots_yellow_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  total_size += 1UL * this->_internal_robots_blue_size();
  for (const auto& msg : this->_impl_.robots_blue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_DetectionFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_DetectionFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_DetectionFrame::GetClassData() const { return &_class_data_; }


void SSL_DetectionFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_DetectionFrame*>(&to_msg);
  auto& from = static_cast<const SSL_DetectionFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.balls_.MergeFrom(from._impl_.balls_);
  _this->_impl_.robots_yellow_.MergeFrom(from._impl_.robots_yellow_);
  _this->_impl_.robots_blue_.MergeFrom(from._impl_.robots_blue_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.t_capture_ = from._impl_.t_capture_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.t_sent_ = from._impl_.t_sent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_DetectionFrame::CopyFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.balls_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.robots_yellow_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.robots_blue_))
    return false;
  return true;
}

void SSL_DetectionFrame::InternalSwap(SSL_DetectionFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.balls_.InternalSwap(&other->_impl_.balls_);
  _impl_.robots_yellow_.InternalSwap(&other->_impl_.robots_yellow_);
  _impl_.robots_blue_.InternalSwap(&other->_impl_.robots_blue_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_sent_)
      + sizeof(SSL_DetectionFrame::_impl_.t_sent_)
      - PROTOBUF_FIELD_OFFSET(SSL_DetectionFrame, _impl_.t_capture_)>(
          reinterpret_cast<char*>(&_impl_.t_capture_),
          reinterpret_cast<char*>(&other->_impl_.t_capture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_DetectionFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SSL_DetectionBall*
Arena::CreateMaybeMessage< ::SSL_DetectionBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_DetectionBall >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_DetectionRobot*
Arena::CreateMaybeMessage< ::SSL_DetectionRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_DetectionRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_DetectionFrame*
Arena::CreateMaybeMessage< ::SSL_DetectionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_DetectionFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
