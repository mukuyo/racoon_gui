// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_common.pb.h"
#include "ssl_gc_geometry.pb.h"
#include "ssl_gc_game_event.pb.h"
#include "ssl_gc_referee_message.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgc_5fstate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5fstate_2eproto;
class Command;
struct CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Foul;
struct FoulDefaultTypeInternal;
extern FoulDefaultTypeInternal _Foul_default_instance_;
class GameState;
struct GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class ProposalGroup;
struct ProposalGroupDefaultTypeInternal;
extern ProposalGroupDefaultTypeInternal _ProposalGroup_default_instance_;
class RedCard;
struct RedCardDefaultTypeInternal;
extern RedCardDefaultTypeInternal _RedCard_default_instance_;
class State;
struct StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
class State_TeamStateEntry_DoNotUse;
struct State_TeamStateEntry_DoNotUseDefaultTypeInternal;
extern State_TeamStateEntry_DoNotUseDefaultTypeInternal _State_TeamStateEntry_DoNotUse_default_instance_;
class TeamInfo;
struct TeamInfoDefaultTypeInternal;
extern TeamInfoDefaultTypeInternal _TeamInfo_default_instance_;
class YellowCard;
struct YellowCardDefaultTypeInternal;
extern YellowCardDefaultTypeInternal _YellowCard_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Command* Arena::CreateMaybeMessage<::Command>(Arena*);
template<> ::Foul* Arena::CreateMaybeMessage<::Foul>(Arena*);
template<> ::GameState* Arena::CreateMaybeMessage<::GameState>(Arena*);
template<> ::Proposal* Arena::CreateMaybeMessage<::Proposal>(Arena*);
template<> ::ProposalGroup* Arena::CreateMaybeMessage<::ProposalGroup>(Arena*);
template<> ::RedCard* Arena::CreateMaybeMessage<::RedCard>(Arena*);
template<> ::State* Arena::CreateMaybeMessage<::State>(Arena*);
template<> ::State_TeamStateEntry_DoNotUse* Arena::CreateMaybeMessage<::State_TeamStateEntry_DoNotUse>(Arena*);
template<> ::TeamInfo* Arena::CreateMaybeMessage<::TeamInfo>(Arena*);
template<> ::YellowCard* Arena::CreateMaybeMessage<::YellowCard>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Command_Type : int {
  Command_Type_UNKNOWN = 0,
  Command_Type_HALT = 1,
  Command_Type_STOP = 2,
  Command_Type_NORMAL_START = 3,
  Command_Type_FORCE_START = 4,
  Command_Type_DIRECT = 5,
  Command_Type_INDIRECT = 6,
  Command_Type_KICKOFF = 7,
  Command_Type_PENALTY = 8,
  Command_Type_TIMEOUT = 9,
  Command_Type_BALL_PLACEMENT = 10
};
bool Command_Type_IsValid(int value);
constexpr Command_Type Command_Type_Type_MIN = Command_Type_UNKNOWN;
constexpr Command_Type Command_Type_Type_MAX = Command_Type_BALL_PLACEMENT;
constexpr int Command_Type_Type_ARRAYSIZE = Command_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Command_Type_descriptor();
template<typename T>
inline const std::string& Command_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Command_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Command_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Command_Type_descriptor(), enum_t_value);
}
inline bool Command_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Command_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Command_Type>(
    Command_Type_descriptor(), name, value);
}
enum GameState_Type : int {
  GameState_Type_UNKNOWN = 0,
  GameState_Type_HALT = 1,
  GameState_Type_STOP = 2,
  GameState_Type_RUNNING = 3,
  GameState_Type_FREE_KICK = 4,
  GameState_Type_KICKOFF = 5,
  GameState_Type_PENALTY = 6,
  GameState_Type_TIMEOUT = 7,
  GameState_Type_BALL_PLACEMENT = 8
};
bool GameState_Type_IsValid(int value);
constexpr GameState_Type GameState_Type_Type_MIN = GameState_Type_UNKNOWN;
constexpr GameState_Type GameState_Type_Type_MAX = GameState_Type_BALL_PLACEMENT;
constexpr int GameState_Type_Type_ARRAYSIZE = GameState_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_Type_descriptor();
template<typename T>
inline const std::string& GameState_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameState_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameState_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameState_Type_descriptor(), enum_t_value);
}
inline bool GameState_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GameState_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameState_Type>(
    GameState_Type_descriptor(), name, value);
}
// ===================================================================

class YellowCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:YellowCard) */ {
 public:
  inline YellowCard() : YellowCard(nullptr) {}
  ~YellowCard() override;
  explicit PROTOBUF_CONSTEXPR YellowCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YellowCard(const YellowCard& from);
  YellowCard(YellowCard&& from) noexcept
    : YellowCard() {
    *this = ::std::move(from);
  }

  inline YellowCard& operator=(const YellowCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline YellowCard& operator=(YellowCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YellowCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const YellowCard* internal_default_instance() {
    return reinterpret_cast<const YellowCard*>(
               &_YellowCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(YellowCard& a, YellowCard& b) {
    a.Swap(&b);
  }
  inline void Swap(YellowCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YellowCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YellowCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YellowCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YellowCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const YellowCard& from) {
    YellowCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YellowCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "YellowCard";
  }
  protected:
  explicit YellowCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCausedByGameEventFieldNumber = 2,
    kTimeRemainingFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  private:
  bool _internal_has_caused_by_game_event() const;
  public:
  void clear_caused_by_game_event();
  const ::GameEvent& caused_by_game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_caused_by_game_event();
  ::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event);
  private:
  const ::GameEvent& _internal_caused_by_game_event() const;
  ::GameEvent* _internal_mutable_caused_by_game_event();
  public:
  void unsafe_arena_set_allocated_caused_by_game_event(
      ::GameEvent* caused_by_game_event);
  ::GameEvent* unsafe_arena_release_caused_by_game_event();

  // optional .google.protobuf.Duration time_remaining = 3;
  bool has_time_remaining() const;
  private:
  bool _internal_has_time_remaining() const;
  public:
  void clear_time_remaining();
  const ::PROTOBUF_NAMESPACE_ID::Duration& time_remaining() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_time_remaining();
  void set_allocated_time_remaining(::PROTOBUF_NAMESPACE_ID::Duration* time_remaining);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_time_remaining() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_remaining();
  public:
  void unsafe_arena_set_allocated_time_remaining(
      ::PROTOBUF_NAMESPACE_ID::Duration* time_remaining);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_remaining();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:YellowCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* caused_by_game_event_;
    ::PROTOBUF_NAMESPACE_ID::Duration* time_remaining_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class RedCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RedCard) */ {
 public:
  inline RedCard() : RedCard(nullptr) {}
  ~RedCard() override;
  explicit PROTOBUF_CONSTEXPR RedCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RedCard(const RedCard& from);
  RedCard(RedCard&& from) noexcept
    : RedCard() {
    *this = ::std::move(from);
  }

  inline RedCard& operator=(const RedCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline RedCard& operator=(RedCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RedCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const RedCard* internal_default_instance() {
    return reinterpret_cast<const RedCard*>(
               &_RedCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RedCard& a, RedCard& b) {
    a.Swap(&b);
  }
  inline void Swap(RedCard* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RedCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RedCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RedCard>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RedCard& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RedCard& from) {
    RedCard::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RedCard* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RedCard";
  }
  protected:
  explicit RedCard(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCausedByGameEventFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  private:
  bool _internal_has_caused_by_game_event() const;
  public:
  void clear_caused_by_game_event();
  const ::GameEvent& caused_by_game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_caused_by_game_event();
  ::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event);
  private:
  const ::GameEvent& _internal_caused_by_game_event() const;
  ::GameEvent* _internal_mutable_caused_by_game_event();
  public:
  void unsafe_arena_set_allocated_caused_by_game_event(
      ::GameEvent* caused_by_game_event);
  ::GameEvent* unsafe_arena_release_caused_by_game_event();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RedCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* caused_by_game_event_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class Foul final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Foul) */ {
 public:
  inline Foul() : Foul(nullptr) {}
  ~Foul() override;
  explicit PROTOBUF_CONSTEXPR Foul(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Foul(const Foul& from);
  Foul(Foul&& from) noexcept
    : Foul() {
    *this = ::std::move(from);
  }

  inline Foul& operator=(const Foul& from) {
    CopyFrom(from);
    return *this;
  }
  inline Foul& operator=(Foul&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Foul& default_instance() {
    return *internal_default_instance();
  }
  static inline const Foul* internal_default_instance() {
    return reinterpret_cast<const Foul*>(
               &_Foul_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Foul& a, Foul& b) {
    a.Swap(&b);
  }
  inline void Swap(Foul* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Foul* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Foul* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Foul>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Foul& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Foul& from) {
    Foul::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Foul* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Foul";
  }
  protected:
  explicit Foul(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCausedByGameEventFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .GameEvent caused_by_game_event = 2;
  bool has_caused_by_game_event() const;
  private:
  bool _internal_has_caused_by_game_event() const;
  public:
  void clear_caused_by_game_event();
  const ::GameEvent& caused_by_game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_caused_by_game_event();
  ::GameEvent* mutable_caused_by_game_event();
  void set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event);
  private:
  const ::GameEvent& _internal_caused_by_game_event() const;
  ::GameEvent* _internal_mutable_caused_by_game_event();
  public:
  void unsafe_arena_set_allocated_caused_by_game_event(
      ::GameEvent* caused_by_game_event);
  ::GameEvent* unsafe_arena_release_caused_by_game_event();

  // optional .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Foul)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::GameEvent* caused_by_game_event_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    uint32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class Command final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  inline Command() : Command(nullptr) {}
  ~Command() override;
  explicit PROTOBUF_CONSTEXPR Command(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Command(const Command& from);
  Command(Command&& from) noexcept
    : Command() {
    *this = ::std::move(from);
  }

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }
  inline Command& operator=(Command&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Command& default_instance() {
    return *internal_default_instance();
  }
  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Command& a, Command& b) {
    a.Swap(&b);
  }
  inline void Swap(Command* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Command* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Command* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Command>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Command& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Command& from) {
    Command::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Command* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Command";
  }
  protected:
  explicit Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Command_Type Type;
  static constexpr Type UNKNOWN =
    Command_Type_UNKNOWN;
  static constexpr Type HALT =
    Command_Type_HALT;
  static constexpr Type STOP =
    Command_Type_STOP;
  static constexpr Type NORMAL_START =
    Command_Type_NORMAL_START;
  static constexpr Type FORCE_START =
    Command_Type_FORCE_START;
  static constexpr Type DIRECT =
    Command_Type_DIRECT;
  static constexpr Type INDIRECT =
    Command_Type_INDIRECT;
  static constexpr Type KICKOFF =
    Command_Type_KICKOFF;
  static constexpr Type PENALTY =
    Command_Type_PENALTY;
  static constexpr Type TIMEOUT =
    Command_Type_TIMEOUT;
  static constexpr Type BALL_PLACEMENT =
    Command_Type_BALL_PLACEMENT;
  static inline bool Type_IsValid(int value) {
    return Command_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Command_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Command_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Command_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Command_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Command_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Command_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kForTeamFieldNumber = 2,
  };
  // required .Command.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Command_Type type() const;
  void set_type(::Command_Type value);
  private:
  ::Command_Type _internal_type() const;
  void _internal_set_type(::Command_Type value);
  public:

  // optional .Team for_team = 2;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:Command)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    int for_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class GameState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameState) */ {
 public:
  inline GameState() : GameState(nullptr) {}
  ~GameState() override;
  explicit PROTOBUF_CONSTEXPR GameState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameState(const GameState& from);
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameState& operator=(GameState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }
  inline void Swap(GameState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameState& from) {
    GameState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameState";
  }
  protected:
  explicit GameState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GameState_Type Type;
  static constexpr Type UNKNOWN =
    GameState_Type_UNKNOWN;
  static constexpr Type HALT =
    GameState_Type_HALT;
  static constexpr Type STOP =
    GameState_Type_STOP;
  static constexpr Type RUNNING =
    GameState_Type_RUNNING;
  static constexpr Type FREE_KICK =
    GameState_Type_FREE_KICK;
  static constexpr Type KICKOFF =
    GameState_Type_KICKOFF;
  static constexpr Type PENALTY =
    GameState_Type_PENALTY;
  static constexpr Type TIMEOUT =
    GameState_Type_TIMEOUT;
  static constexpr Type BALL_PLACEMENT =
    GameState_Type_BALL_PLACEMENT;
  static inline bool Type_IsValid(int value) {
    return GameState_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GameState_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GameState_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GameState_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GameState_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GameState_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return GameState_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kForTeamFieldNumber = 2,
  };
  // required .GameState.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::GameState_Type type() const;
  void set_type(::GameState_Type value);
  private:
  ::GameState_Type _internal_type() const;
  void _internal_set_type(::GameState_Type value);
  public:

  // optional .Team for_team = 2;
  bool has_for_team() const;
  private:
  bool _internal_has_for_team() const;
  public:
  void clear_for_team();
  ::Team for_team() const;
  void set_for_team(::Team value);
  private:
  ::Team _internal_for_team() const;
  void _internal_set_for_team(::Team value);
  public:

  // @@protoc_insertion_point(class_scope:GameState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    int for_team_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class Proposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() override;
  explicit PROTOBUF_CONSTEXPR Proposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Proposal& from) {
    Proposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kGameEventFieldNumber = 2,
  };
  // optional .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // optional .GameEvent game_event = 2;
  bool has_game_event() const;
  private:
  bool _internal_has_game_event() const;
  public:
  void clear_game_event();
  const ::GameEvent& game_event() const;
  PROTOBUF_NODISCARD ::GameEvent* release_game_event();
  ::GameEvent* mutable_game_event();
  void set_allocated_game_event(::GameEvent* game_event);
  private:
  const ::GameEvent& _internal_game_event() const;
  ::GameEvent* _internal_mutable_game_event();
  public:
  void unsafe_arena_set_allocated_game_event(
      ::GameEvent* game_event);
  ::GameEvent* unsafe_arena_release_game_event();

  // @@protoc_insertion_point(class_scope:Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::GameEvent* game_event_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ProposalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProposalGroup) */ {
 public:
  inline ProposalGroup() : ProposalGroup(nullptr) {}
  ~ProposalGroup() override;
  explicit PROTOBUF_CONSTEXPR ProposalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalGroup(const ProposalGroup& from);
  ProposalGroup(ProposalGroup&& from) noexcept
    : ProposalGroup() {
    *this = ::std::move(from);
  }

  inline ProposalGroup& operator=(const ProposalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalGroup& operator=(ProposalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalGroup* internal_default_instance() {
    return reinterpret_cast<const ProposalGroup*>(
               &_ProposalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProposalGroup& a, ProposalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProposalGroup& from) {
    ProposalGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProposalGroup";
  }
  protected:
  explicit ProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProposalsFieldNumber = 1,
    kAcceptedFieldNumber = 2,
  };
  // repeated .Proposal proposals = 1;
  int proposals_size() const;
  private:
  int _internal_proposals_size() const;
  public:
  void clear_proposals();
  ::Proposal* mutable_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proposal >*
      mutable_proposals();
  private:
  const ::Proposal& _internal_proposals(int index) const;
  ::Proposal* _internal_add_proposals();
  public:
  const ::Proposal& proposals(int index) const;
  ::Proposal* add_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proposal >&
      proposals() const;

  // optional bool accepted = 2;
  bool has_accepted() const;
  private:
  bool _internal_has_accepted() const;
  public:
  void clear_accepted();
  bool accepted() const;
  void set_accepted(bool value);
  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProposalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proposal > proposals_;
    bool accepted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class TeamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeamInfo) */ {
 public:
  inline TeamInfo() : TeamInfo(nullptr) {}
  ~TeamInfo() override;
  explicit PROTOBUF_CONSTEXPR TeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TeamInfo(const TeamInfo& from);
  TeamInfo(TeamInfo&& from) noexcept
    : TeamInfo() {
    *this = ::std::move(from);
  }

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TeamInfo& operator=(TeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TeamInfo* internal_default_instance() {
    return reinterpret_cast<const TeamInfo*>(
               &_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TeamInfo& a, TeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TeamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TeamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TeamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TeamInfo& from) {
    TeamInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeamInfo";
  }
  protected:
  explicit TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYellowCardsFieldNumber = 4,
    kRedCardsFieldNumber = 5,
    kFoulsFieldNumber = 9,
    kNameFieldNumber = 1,
    kTimeoutTimeLeftFieldNumber = 7,
    kRequestsBotSubstitutionSinceFieldNumber = 14,
    kRequestsTimeoutSinceFieldNumber = 15,
    kRequestsEmergencyStopSinceFieldNumber = 16,
    kGoalsFieldNumber = 2,
    kGoalkeeperFieldNumber = 3,
    kTimeoutsLeftFieldNumber = 6,
    kBallPlacementFailuresFieldNumber = 10,
    kOnPositiveHalfFieldNumber = 8,
    kBallPlacementFailuresReachedFieldNumber = 11,
    kCanPlaceBallFieldNumber = 12,
    kMaxAllowedBotsFieldNumber = 13,
    kChallengeFlagsFieldNumber = 17,
  };
  // repeated .YellowCard yellow_cards = 4;
  int yellow_cards_size() const;
  private:
  int _internal_yellow_cards_size() const;
  public:
  void clear_yellow_cards();
  ::YellowCard* mutable_yellow_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowCard >*
      mutable_yellow_cards();
  private:
  const ::YellowCard& _internal_yellow_cards(int index) const;
  ::YellowCard* _internal_add_yellow_cards();
  public:
  const ::YellowCard& yellow_cards(int index) const;
  ::YellowCard* add_yellow_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowCard >&
      yellow_cards() const;

  // repeated .RedCard red_cards = 5;
  int red_cards_size() const;
  private:
  int _internal_red_cards_size() const;
  public:
  void clear_red_cards();
  ::RedCard* mutable_red_cards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedCard >*
      mutable_red_cards();
  private:
  const ::RedCard& _internal_red_cards(int index) const;
  ::RedCard* _internal_add_red_cards();
  public:
  const ::RedCard& red_cards(int index) const;
  ::RedCard* add_red_cards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedCard >&
      red_cards() const;

  // repeated .Foul fouls = 9;
  int fouls_size() const;
  private:
  int _internal_fouls_size() const;
  public:
  void clear_fouls();
  ::Foul* mutable_fouls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Foul >*
      mutable_fouls();
  private:
  const ::Foul& _internal_fouls(int index) const;
  ::Foul* _internal_add_fouls();
  public:
  const ::Foul& fouls(int index) const;
  ::Foul* add_fouls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Foul >&
      fouls() const;

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .google.protobuf.Duration timeout_time_left = 7;
  bool has_timeout_time_left() const;
  private:
  bool _internal_has_timeout_time_left() const;
  public:
  void clear_timeout_time_left();
  const ::PROTOBUF_NAMESPACE_ID::Duration& timeout_time_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_timeout_time_left();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout_time_left();
  void set_allocated_timeout_time_left(::PROTOBUF_NAMESPACE_ID::Duration* timeout_time_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout_time_left() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout_time_left();
  public:
  void unsafe_arena_set_allocated_timeout_time_left(
      ::PROTOBUF_NAMESPACE_ID::Duration* timeout_time_left);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout_time_left();

  // optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
  bool has_requests_bot_substitution_since() const;
  private:
  bool _internal_has_requests_bot_substitution_since() const;
  public:
  void clear_requests_bot_substitution_since();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& requests_bot_substitution_since() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_requests_bot_substitution_since();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_requests_bot_substitution_since();
  void set_allocated_requests_bot_substitution_since(::PROTOBUF_NAMESPACE_ID::Timestamp* requests_bot_substitution_since);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_requests_bot_substitution_since() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_requests_bot_substitution_since();
  public:
  void unsafe_arena_set_allocated_requests_bot_substitution_since(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_bot_substitution_since);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_requests_bot_substitution_since();

  // optional .google.protobuf.Timestamp requests_timeout_since = 15;
  bool has_requests_timeout_since() const;
  private:
  bool _internal_has_requests_timeout_since() const;
  public:
  void clear_requests_timeout_since();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& requests_timeout_since() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_requests_timeout_since();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_requests_timeout_since();
  void set_allocated_requests_timeout_since(::PROTOBUF_NAMESPACE_ID::Timestamp* requests_timeout_since);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_requests_timeout_since() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_requests_timeout_since();
  public:
  void unsafe_arena_set_allocated_requests_timeout_since(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_timeout_since);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_requests_timeout_since();

  // optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
  bool has_requests_emergency_stop_since() const;
  private:
  bool _internal_has_requests_emergency_stop_since() const;
  public:
  void clear_requests_emergency_stop_since();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& requests_emergency_stop_since() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_requests_emergency_stop_since();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_requests_emergency_stop_since();
  void set_allocated_requests_emergency_stop_since(::PROTOBUF_NAMESPACE_ID::Timestamp* requests_emergency_stop_since);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_requests_emergency_stop_since() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_requests_emergency_stop_since();
  public:
  void unsafe_arena_set_allocated_requests_emergency_stop_since(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_emergency_stop_since);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_requests_emergency_stop_since();

  // optional int32 goals = 2;
  bool has_goals() const;
  private:
  bool _internal_has_goals() const;
  public:
  void clear_goals();
  int32_t goals() const;
  void set_goals(int32_t value);
  private:
  int32_t _internal_goals() const;
  void _internal_set_goals(int32_t value);
  public:

  // optional int32 goalkeeper = 3;
  bool has_goalkeeper() const;
  private:
  bool _internal_has_goalkeeper() const;
  public:
  void clear_goalkeeper();
  int32_t goalkeeper() const;
  void set_goalkeeper(int32_t value);
  private:
  int32_t _internal_goalkeeper() const;
  void _internal_set_goalkeeper(int32_t value);
  public:

  // optional int32 timeouts_left = 6;
  bool has_timeouts_left() const;
  private:
  bool _internal_has_timeouts_left() const;
  public:
  void clear_timeouts_left();
  int32_t timeouts_left() const;
  void set_timeouts_left(int32_t value);
  private:
  int32_t _internal_timeouts_left() const;
  void _internal_set_timeouts_left(int32_t value);
  public:

  // optional int32 ball_placement_failures = 10;
  bool has_ball_placement_failures() const;
  private:
  bool _internal_has_ball_placement_failures() const;
  public:
  void clear_ball_placement_failures();
  int32_t ball_placement_failures() const;
  void set_ball_placement_failures(int32_t value);
  private:
  int32_t _internal_ball_placement_failures() const;
  void _internal_set_ball_placement_failures(int32_t value);
  public:

  // optional bool on_positive_half = 8;
  bool has_on_positive_half() const;
  private:
  bool _internal_has_on_positive_half() const;
  public:
  void clear_on_positive_half();
  bool on_positive_half() const;
  void set_on_positive_half(bool value);
  private:
  bool _internal_on_positive_half() const;
  void _internal_set_on_positive_half(bool value);
  public:

  // optional bool ball_placement_failures_reached = 11;
  bool has_ball_placement_failures_reached() const;
  private:
  bool _internal_has_ball_placement_failures_reached() const;
  public:
  void clear_ball_placement_failures_reached();
  bool ball_placement_failures_reached() const;
  void set_ball_placement_failures_reached(bool value);
  private:
  bool _internal_ball_placement_failures_reached() const;
  void _internal_set_ball_placement_failures_reached(bool value);
  public:

  // optional bool can_place_ball = 12;
  bool has_can_place_ball() const;
  private:
  bool _internal_has_can_place_ball() const;
  public:
  void clear_can_place_ball();
  bool can_place_ball() const;
  void set_can_place_ball(bool value);
  private:
  bool _internal_can_place_ball() const;
  void _internal_set_can_place_ball(bool value);
  public:

  // optional int32 max_allowed_bots = 13;
  bool has_max_allowed_bots() const;
  private:
  bool _internal_has_max_allowed_bots() const;
  public:
  void clear_max_allowed_bots();
  int32_t max_allowed_bots() const;
  void set_max_allowed_bots(int32_t value);
  private:
  int32_t _internal_max_allowed_bots() const;
  void _internal_set_max_allowed_bots(int32_t value);
  public:

  // optional int32 challenge_flags = 17;
  bool has_challenge_flags() const;
  private:
  bool _internal_has_challenge_flags() const;
  public:
  void clear_challenge_flags();
  int32_t challenge_flags() const;
  void set_challenge_flags(int32_t value);
  private:
  int32_t _internal_challenge_flags() const;
  void _internal_set_challenge_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TeamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowCard > yellow_cards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedCard > red_cards_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Foul > fouls_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Duration* timeout_time_left_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_bot_substitution_since_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_timeout_since_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_emergency_stop_since_;
    int32_t goals_;
    int32_t goalkeeper_;
    int32_t timeouts_left_;
    int32_t ball_placement_failures_;
    bool on_positive_half_;
    bool ball_placement_failures_reached_;
    bool can_place_ball_;
    int32_t max_allowed_bots_;
    int32_t challenge_flags_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// -------------------------------------------------------------------

class State_TeamStateEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_TeamStateEntry_DoNotUse, 
    std::string, ::TeamInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<State_TeamStateEntry_DoNotUse, 
    std::string, ::TeamInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  State_TeamStateEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR State_TeamStateEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit State_TeamStateEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const State_TeamStateEntry_DoNotUse& other);
  static const State_TeamStateEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const State_TeamStateEntry_DoNotUse*>(&_State_TeamStateEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "State.TeamStateEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};

// -------------------------------------------------------------------

class State final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:State) */ {
 public:
  inline State() : State(nullptr) {}
  ~State() override;
  explicit PROTOBUF_CONSTEXPR State(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const State& default_instance() {
    return *internal_default_instance();
  }
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(State* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<State>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const State& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const State& from) {
    State::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "State";
  }
  protected:
  explicit State(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTeamStateFieldNumber = 8,
    kGameEventsFieldNumber = 13,
    kProposalGroupsFieldNumber = 14,
    kCommandFieldNumber = 2,
    kStageTimeElapsedFieldNumber = 4,
    kStageTimeLeftFieldNumber = 5,
    kMatchTimeStartFieldNumber = 6,
    kPlacementPosFieldNumber = 9,
    kNextCommandFieldNumber = 10,
    kCurrentActionTimeRemainingFieldNumber = 12,
    kGameStateFieldNumber = 19,
    kStageFieldNumber = 1,
    kDivisionFieldNumber = 15,
    kAutoContinueFieldNumber = 16,
    kFirstKickoffTeamFieldNumber = 17,
    kMatchTypeFieldNumber = 18,
  };
  // map<string, .TeamInfo> team_state = 8;
  int team_state_size() const;
  private:
  int _internal_team_state_size() const;
  public:
  void clear_team_state();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >&
      _internal_team_state() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >*
      _internal_mutable_team_state();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >&
      team_state() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >*
      mutable_team_state();

  // repeated .GameEvent game_events = 13;
  int game_events_size() const;
  private:
  int _internal_game_events_size() const;
  public:
  void clear_game_events();
  ::GameEvent* mutable_game_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
      mutable_game_events();
  private:
  const ::GameEvent& _internal_game_events(int index) const;
  ::GameEvent* _internal_add_game_events();
  public:
  const ::GameEvent& game_events(int index) const;
  ::GameEvent* add_game_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
      game_events() const;

  // repeated .ProposalGroup proposal_groups = 14;
  int proposal_groups_size() const;
  private:
  int _internal_proposal_groups_size() const;
  public:
  void clear_proposal_groups();
  ::ProposalGroup* mutable_proposal_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposalGroup >*
      mutable_proposal_groups();
  private:
  const ::ProposalGroup& _internal_proposal_groups(int index) const;
  ::ProposalGroup* _internal_add_proposal_groups();
  public:
  const ::ProposalGroup& proposal_groups(int index) const;
  ::ProposalGroup* add_proposal_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposalGroup >&
      proposal_groups() const;

  // optional .Command command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::Command& command() const;
  PROTOBUF_NODISCARD ::Command* release_command();
  ::Command* mutable_command();
  void set_allocated_command(::Command* command);
  private:
  const ::Command& _internal_command() const;
  ::Command* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::Command* command);
  ::Command* unsafe_arena_release_command();

  // optional .google.protobuf.Duration stage_time_elapsed = 4;
  bool has_stage_time_elapsed() const;
  private:
  bool _internal_has_stage_time_elapsed() const;
  public:
  void clear_stage_time_elapsed();
  const ::PROTOBUF_NAMESPACE_ID::Duration& stage_time_elapsed() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_stage_time_elapsed();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_stage_time_elapsed();
  void set_allocated_stage_time_elapsed(::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_stage_time_elapsed() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_stage_time_elapsed();
  public:
  void unsafe_arena_set_allocated_stage_time_elapsed(
      ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_stage_time_elapsed();

  // optional .google.protobuf.Duration stage_time_left = 5;
  bool has_stage_time_left() const;
  private:
  bool _internal_has_stage_time_left() const;
  public:
  void clear_stage_time_left();
  const ::PROTOBUF_NAMESPACE_ID::Duration& stage_time_left() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_stage_time_left();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_stage_time_left();
  void set_allocated_stage_time_left(::PROTOBUF_NAMESPACE_ID::Duration* stage_time_left);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_stage_time_left() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_stage_time_left();
  public:
  void unsafe_arena_set_allocated_stage_time_left(
      ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_left);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_stage_time_left();

  // optional .google.protobuf.Timestamp match_time_start = 6;
  bool has_match_time_start() const;
  private:
  bool _internal_has_match_time_start() const;
  public:
  void clear_match_time_start();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& match_time_start() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_match_time_start();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_match_time_start();
  void set_allocated_match_time_start(::PROTOBUF_NAMESPACE_ID::Timestamp* match_time_start);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_match_time_start() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_match_time_start();
  public:
  void unsafe_arena_set_allocated_match_time_start(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* match_time_start);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_match_time_start();

  // optional .Vector2 placement_pos = 9;
  bool has_placement_pos() const;
  private:
  bool _internal_has_placement_pos() const;
  public:
  void clear_placement_pos();
  const ::Vector2& placement_pos() const;
  PROTOBUF_NODISCARD ::Vector2* release_placement_pos();
  ::Vector2* mutable_placement_pos();
  void set_allocated_placement_pos(::Vector2* placement_pos);
  private:
  const ::Vector2& _internal_placement_pos() const;
  ::Vector2* _internal_mutable_placement_pos();
  public:
  void unsafe_arena_set_allocated_placement_pos(
      ::Vector2* placement_pos);
  ::Vector2* unsafe_arena_release_placement_pos();

  // optional .Command next_command = 10;
  bool has_next_command() const;
  private:
  bool _internal_has_next_command() const;
  public:
  void clear_next_command();
  const ::Command& next_command() const;
  PROTOBUF_NODISCARD ::Command* release_next_command();
  ::Command* mutable_next_command();
  void set_allocated_next_command(::Command* next_command);
  private:
  const ::Command& _internal_next_command() const;
  ::Command* _internal_mutable_next_command();
  public:
  void unsafe_arena_set_allocated_next_command(
      ::Command* next_command);
  ::Command* unsafe_arena_release_next_command();

  // optional .google.protobuf.Duration current_action_time_remaining = 12;
  bool has_current_action_time_remaining() const;
  private:
  bool _internal_has_current_action_time_remaining() const;
  public:
  void clear_current_action_time_remaining();
  const ::PROTOBUF_NAMESPACE_ID::Duration& current_action_time_remaining() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_current_action_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_current_action_time_remaining();
  void set_allocated_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::Duration* current_action_time_remaining);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_current_action_time_remaining() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_current_action_time_remaining();
  public:
  void unsafe_arena_set_allocated_current_action_time_remaining(
      ::PROTOBUF_NAMESPACE_ID::Duration* current_action_time_remaining);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_current_action_time_remaining();

  // optional .GameState game_state = 19;
  bool has_game_state() const;
  private:
  bool _internal_has_game_state() const;
  public:
  void clear_game_state();
  const ::GameState& game_state() const;
  PROTOBUF_NODISCARD ::GameState* release_game_state();
  ::GameState* mutable_game_state();
  void set_allocated_game_state(::GameState* game_state);
  private:
  const ::GameState& _internal_game_state() const;
  ::GameState* _internal_mutable_game_state();
  public:
  void unsafe_arena_set_allocated_game_state(
      ::GameState* game_state);
  ::GameState* unsafe_arena_release_game_state();

  // optional .Referee.Stage stage = 1;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::Referee_Stage stage() const;
  void set_stage(::Referee_Stage value);
  private:
  ::Referee_Stage _internal_stage() const;
  void _internal_set_stage(::Referee_Stage value);
  public:

  // optional .Division division = 15;
  bool has_division() const;
  private:
  bool _internal_has_division() const;
  public:
  void clear_division();
  ::Division division() const;
  void set_division(::Division value);
  private:
  ::Division _internal_division() const;
  void _internal_set_division(::Division value);
  public:

  // optional bool auto_continue = 16;
  bool has_auto_continue() const;
  private:
  bool _internal_has_auto_continue() const;
  public:
  void clear_auto_continue();
  bool auto_continue() const;
  void set_auto_continue(bool value);
  private:
  bool _internal_auto_continue() const;
  void _internal_set_auto_continue(bool value);
  public:

  // optional .Team first_kickoff_team = 17;
  bool has_first_kickoff_team() const;
  private:
  bool _internal_has_first_kickoff_team() const;
  public:
  void clear_first_kickoff_team();
  ::Team first_kickoff_team() const;
  void set_first_kickoff_team(::Team value);
  private:
  ::Team _internal_first_kickoff_team() const;
  void _internal_set_first_kickoff_team(::Team value);
  public:

  // optional .MatchType match_type = 18;
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // @@protoc_insertion_point(class_scope:State)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        State_TeamStateEntry_DoNotUse,
        std::string, ::TeamInfo,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> team_state_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent > game_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposalGroup > proposal_groups_;
    ::Command* command_;
    ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed_;
    ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_left_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* match_time_start_;
    ::Vector2* placement_pos_;
    ::Command* next_command_;
    ::PROTOBUF_NAMESPACE_ID::Duration* current_action_time_remaining_;
    ::GameState* game_state_;
    int stage_;
    int division_;
    bool auto_continue_;
    int first_kickoff_team_;
    int match_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// YellowCard

// optional uint32 id = 1;
inline bool YellowCard::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool YellowCard::has_id() const {
  return _internal_has_id();
}
inline void YellowCard::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t YellowCard::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t YellowCard::id() const {
  // @@protoc_insertion_point(field_get:YellowCard.id)
  return _internal_id();
}
inline void YellowCard::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void YellowCard::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:YellowCard.id)
}

// optional .GameEvent caused_by_game_event = 2;
inline bool YellowCard::_internal_has_caused_by_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caused_by_game_event_ != nullptr);
  return value;
}
inline bool YellowCard::has_caused_by_game_event() const {
  return _internal_has_caused_by_game_event();
}
inline const ::GameEvent& YellowCard::_internal_caused_by_game_event() const {
  const ::GameEvent* p = _impl_.caused_by_game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& YellowCard::caused_by_game_event() const {
  // @@protoc_insertion_point(field_get:YellowCard.caused_by_game_event)
  return _internal_caused_by_game_event();
}
inline void YellowCard::unsafe_arena_set_allocated_caused_by_game_event(
    ::GameEvent* caused_by_game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  if (caused_by_game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:YellowCard.caused_by_game_event)
}
inline ::GameEvent* YellowCard::release_caused_by_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* YellowCard::unsafe_arena_release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:YellowCard.caused_by_game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* YellowCard::_internal_mutable_caused_by_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.caused_by_game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.caused_by_game_event_ = p;
  }
  return _impl_.caused_by_game_event_;
}
inline ::GameEvent* YellowCard::mutable_caused_by_game_event() {
  ::GameEvent* _msg = _internal_mutable_caused_by_game_event();
  // @@protoc_insertion_point(field_mutable:YellowCard.caused_by_game_event)
  return _msg;
}
inline void YellowCard::set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caused_by_game_event));
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:YellowCard.caused_by_game_event)
}

// optional .google.protobuf.Duration time_remaining = 3;
inline bool YellowCard::_internal_has_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_remaining_ != nullptr);
  return value;
}
inline bool YellowCard::has_time_remaining() const {
  return _internal_has_time_remaining();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& YellowCard::_internal_time_remaining() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.time_remaining_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& YellowCard::time_remaining() const {
  // @@protoc_insertion_point(field_get:YellowCard.time_remaining)
  return _internal_time_remaining();
}
inline void YellowCard::unsafe_arena_set_allocated_time_remaining(
    ::PROTOBUF_NAMESPACE_ID::Duration* time_remaining) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_remaining_);
  }
  _impl_.time_remaining_ = time_remaining;
  if (time_remaining) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:YellowCard.time_remaining)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* YellowCard::release_time_remaining() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_remaining_;
  _impl_.time_remaining_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* YellowCard::unsafe_arena_release_time_remaining() {
  // @@protoc_insertion_point(field_release:YellowCard.time_remaining)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.time_remaining_;
  _impl_.time_remaining_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* YellowCard::_internal_mutable_time_remaining() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_remaining_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.time_remaining_ = p;
  }
  return _impl_.time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* YellowCard::mutable_time_remaining() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_time_remaining();
  // @@protoc_insertion_point(field_mutable:YellowCard.time_remaining)
  return _msg;
}
inline void YellowCard::set_allocated_time_remaining(::PROTOBUF_NAMESPACE_ID::Duration* time_remaining) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_remaining_);
  }
  if (time_remaining) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_remaining));
    if (message_arena != submessage_arena) {
      time_remaining = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_remaining, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.time_remaining_ = time_remaining;
  // @@protoc_insertion_point(field_set_allocated:YellowCard.time_remaining)
}

// -------------------------------------------------------------------

// RedCard

// optional uint32 id = 1;
inline bool RedCard::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RedCard::has_id() const {
  return _internal_has_id();
}
inline void RedCard::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t RedCard::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t RedCard::id() const {
  // @@protoc_insertion_point(field_get:RedCard.id)
  return _internal_id();
}
inline void RedCard::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.id_ = value;
}
inline void RedCard::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RedCard.id)
}

// optional .GameEvent caused_by_game_event = 2;
inline bool RedCard::_internal_has_caused_by_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caused_by_game_event_ != nullptr);
  return value;
}
inline bool RedCard::has_caused_by_game_event() const {
  return _internal_has_caused_by_game_event();
}
inline const ::GameEvent& RedCard::_internal_caused_by_game_event() const {
  const ::GameEvent* p = _impl_.caused_by_game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& RedCard::caused_by_game_event() const {
  // @@protoc_insertion_point(field_get:RedCard.caused_by_game_event)
  return _internal_caused_by_game_event();
}
inline void RedCard::unsafe_arena_set_allocated_caused_by_game_event(
    ::GameEvent* caused_by_game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  if (caused_by_game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RedCard.caused_by_game_event)
}
inline ::GameEvent* RedCard::release_caused_by_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* RedCard::unsafe_arena_release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:RedCard.caused_by_game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* RedCard::_internal_mutable_caused_by_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.caused_by_game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.caused_by_game_event_ = p;
  }
  return _impl_.caused_by_game_event_;
}
inline ::GameEvent* RedCard::mutable_caused_by_game_event() {
  ::GameEvent* _msg = _internal_mutable_caused_by_game_event();
  // @@protoc_insertion_point(field_mutable:RedCard.caused_by_game_event)
  return _msg;
}
inline void RedCard::set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caused_by_game_event));
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:RedCard.caused_by_game_event)
}

// -------------------------------------------------------------------

// Foul

// optional uint32 id = 1;
inline bool Foul::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Foul::has_id() const {
  return _internal_has_id();
}
inline void Foul::clear_id() {
  _impl_.id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Foul::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t Foul::id() const {
  // @@protoc_insertion_point(field_get:Foul.id)
  return _internal_id();
}
inline void Foul::_internal_set_id(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void Foul::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Foul.id)
}

// optional .GameEvent caused_by_game_event = 2;
inline bool Foul::_internal_has_caused_by_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caused_by_game_event_ != nullptr);
  return value;
}
inline bool Foul::has_caused_by_game_event() const {
  return _internal_has_caused_by_game_event();
}
inline const ::GameEvent& Foul::_internal_caused_by_game_event() const {
  const ::GameEvent* p = _impl_.caused_by_game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& Foul::caused_by_game_event() const {
  // @@protoc_insertion_point(field_get:Foul.caused_by_game_event)
  return _internal_caused_by_game_event();
}
inline void Foul::unsafe_arena_set_allocated_caused_by_game_event(
    ::GameEvent* caused_by_game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  if (caused_by_game_event) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Foul.caused_by_game_event)
}
inline ::GameEvent* Foul::release_caused_by_game_event() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* Foul::unsafe_arena_release_caused_by_game_event() {
  // @@protoc_insertion_point(field_release:Foul.caused_by_game_event)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::GameEvent* temp = _impl_.caused_by_game_event_;
  _impl_.caused_by_game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* Foul::_internal_mutable_caused_by_game_event() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.caused_by_game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.caused_by_game_event_ = p;
  }
  return _impl_.caused_by_game_event_;
}
inline ::GameEvent* Foul::mutable_caused_by_game_event() {
  ::GameEvent* _msg = _internal_mutable_caused_by_game_event();
  // @@protoc_insertion_point(field_mutable:Foul.caused_by_game_event)
  return _msg;
}
inline void Foul::set_allocated_caused_by_game_event(::GameEvent* caused_by_game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caused_by_game_event_);
  }
  if (caused_by_game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caused_by_game_event));
    if (message_arena != submessage_arena) {
      caused_by_game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caused_by_game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.caused_by_game_event_ = caused_by_game_event;
  // @@protoc_insertion_point(field_set_allocated:Foul.caused_by_game_event)
}

// optional .google.protobuf.Timestamp timestamp = 3;
inline bool Foul::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline bool Foul::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Foul::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Foul::timestamp() const {
  // @@protoc_insertion_point(field_get:Foul.timestamp)
  return _internal_timestamp();
}
inline void Foul::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Foul.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Foul::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Foul::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:Foul.timestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Foul::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Foul::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:Foul.timestamp)
  return _msg;
}
inline void Foul::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Foul.timestamp)
}

// -------------------------------------------------------------------

// Command

// required .Command.Type type = 1;
inline bool Command::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Command::has_type() const {
  return _internal_has_type();
}
inline void Command::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::Command_Type Command::_internal_type() const {
  return static_cast< ::Command_Type >(_impl_.type_);
}
inline ::Command_Type Command::type() const {
  // @@protoc_insertion_point(field_get:Command.type)
  return _internal_type();
}
inline void Command::_internal_set_type(::Command_Type value) {
  assert(::Command_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void Command::set_type(::Command_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Command.type)
}

// optional .Team for_team = 2;
inline bool Command::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Command::has_for_team() const {
  return _internal_has_for_team();
}
inline void Command::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team Command::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team Command::for_team() const {
  // @@protoc_insertion_point(field_get:Command.for_team)
  return _internal_for_team();
}
inline void Command::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.for_team_ = value;
}
inline void Command::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:Command.for_team)
}

// -------------------------------------------------------------------

// GameState

// required .GameState.Type type = 1;
inline bool GameState::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameState::has_type() const {
  return _internal_has_type();
}
inline void GameState::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::GameState_Type GameState::_internal_type() const {
  return static_cast< ::GameState_Type >(_impl_.type_);
}
inline ::GameState_Type GameState::type() const {
  // @@protoc_insertion_point(field_get:GameState.type)
  return _internal_type();
}
inline void GameState::_internal_set_type(::GameState_Type value) {
  assert(::GameState_Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}
inline void GameState::set_type(::GameState_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:GameState.type)
}

// optional .Team for_team = 2;
inline bool GameState::_internal_has_for_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GameState::has_for_team() const {
  return _internal_has_for_team();
}
inline void GameState::clear_for_team() {
  _impl_.for_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::Team GameState::_internal_for_team() const {
  return static_cast< ::Team >(_impl_.for_team_);
}
inline ::Team GameState::for_team() const {
  // @@protoc_insertion_point(field_get:GameState.for_team)
  return _internal_for_team();
}
inline void GameState::_internal_set_for_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.for_team_ = value;
}
inline void GameState::set_for_team(::Team value) {
  _internal_set_for_team(value);
  // @@protoc_insertion_point(field_set:GameState.for_team)
}

// -------------------------------------------------------------------

// Proposal

// optional .google.protobuf.Timestamp timestamp = 1;
inline bool Proposal::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline bool Proposal::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::timestamp() const {
  // @@protoc_insertion_point(field_get:Proposal.timestamp)
  return _internal_timestamp();
}
inline void Proposal::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proposal.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:Proposal.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:Proposal.timestamp)
  return _msg;
}
inline void Proposal::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:Proposal.timestamp)
}

// optional .GameEvent game_event = 2;
inline bool Proposal::_internal_has_game_event() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_event_ != nullptr);
  return value;
}
inline bool Proposal::has_game_event() const {
  return _internal_has_game_event();
}
inline const ::GameEvent& Proposal::_internal_game_event() const {
  const ::GameEvent* p = _impl_.game_event_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameEvent&>(
      ::_GameEvent_default_instance_);
}
inline const ::GameEvent& Proposal::game_event() const {
  // @@protoc_insertion_point(field_get:Proposal.game_event)
  return _internal_game_event();
}
inline void Proposal::unsafe_arena_set_allocated_game_event(
    ::GameEvent* game_event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  _impl_.game_event_ = game_event;
  if (game_event) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Proposal.game_event)
}
inline ::GameEvent* Proposal::release_game_event() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameEvent* Proposal::unsafe_arena_release_game_event() {
  // @@protoc_insertion_point(field_release:Proposal.game_event)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::GameEvent* temp = _impl_.game_event_;
  _impl_.game_event_ = nullptr;
  return temp;
}
inline ::GameEvent* Proposal::_internal_mutable_game_event() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.game_event_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameEvent>(GetArenaForAllocation());
    _impl_.game_event_ = p;
  }
  return _impl_.game_event_;
}
inline ::GameEvent* Proposal::mutable_game_event() {
  ::GameEvent* _msg = _internal_mutable_game_event();
  // @@protoc_insertion_point(field_mutable:Proposal.game_event)
  return _msg;
}
inline void Proposal::set_allocated_game_event(::GameEvent* game_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_event_);
  }
  if (game_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_event));
    if (message_arena != submessage_arena) {
      game_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_event, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.game_event_ = game_event;
  // @@protoc_insertion_point(field_set_allocated:Proposal.game_event)
}

// -------------------------------------------------------------------

// ProposalGroup

// repeated .Proposal proposals = 1;
inline int ProposalGroup::_internal_proposals_size() const {
  return _impl_.proposals_.size();
}
inline int ProposalGroup::proposals_size() const {
  return _internal_proposals_size();
}
inline void ProposalGroup::clear_proposals() {
  _impl_.proposals_.Clear();
}
inline ::Proposal* ProposalGroup::mutable_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:ProposalGroup.proposals)
  return _impl_.proposals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proposal >*
ProposalGroup::mutable_proposals() {
  // @@protoc_insertion_point(field_mutable_list:ProposalGroup.proposals)
  return &_impl_.proposals_;
}
inline const ::Proposal& ProposalGroup::_internal_proposals(int index) const {
  return _impl_.proposals_.Get(index);
}
inline const ::Proposal& ProposalGroup::proposals(int index) const {
  // @@protoc_insertion_point(field_get:ProposalGroup.proposals)
  return _internal_proposals(index);
}
inline ::Proposal* ProposalGroup::_internal_add_proposals() {
  return _impl_.proposals_.Add();
}
inline ::Proposal* ProposalGroup::add_proposals() {
  ::Proposal* _add = _internal_add_proposals();
  // @@protoc_insertion_point(field_add:ProposalGroup.proposals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proposal >&
ProposalGroup::proposals() const {
  // @@protoc_insertion_point(field_list:ProposalGroup.proposals)
  return _impl_.proposals_;
}

// optional bool accepted = 2;
inline bool ProposalGroup::_internal_has_accepted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProposalGroup::has_accepted() const {
  return _internal_has_accepted();
}
inline void ProposalGroup::clear_accepted() {
  _impl_.accepted_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool ProposalGroup::_internal_accepted() const {
  return _impl_.accepted_;
}
inline bool ProposalGroup::accepted() const {
  // @@protoc_insertion_point(field_get:ProposalGroup.accepted)
  return _internal_accepted();
}
inline void ProposalGroup::_internal_set_accepted(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accepted_ = value;
}
inline void ProposalGroup::set_accepted(bool value) {
  _internal_set_accepted(value);
  // @@protoc_insertion_point(field_set:ProposalGroup.accepted)
}

// -------------------------------------------------------------------

// TeamInfo

// optional string name = 1;
inline bool TeamInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TeamInfo::has_name() const {
  return _internal_has_name();
}
inline void TeamInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:TeamInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TeamInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TeamInfo.name)
}
inline std::string* TeamInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TeamInfo.name)
  return _s;
}
inline const std::string& TeamInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TeamInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TeamInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:TeamInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TeamInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.name)
}

// optional int32 goals = 2;
inline bool TeamInfo::_internal_has_goals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TeamInfo::has_goals() const {
  return _internal_has_goals();
}
inline void TeamInfo::clear_goals() {
  _impl_.goals_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t TeamInfo::_internal_goals() const {
  return _impl_.goals_;
}
inline int32_t TeamInfo::goals() const {
  // @@protoc_insertion_point(field_get:TeamInfo.goals)
  return _internal_goals();
}
inline void TeamInfo::_internal_set_goals(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.goals_ = value;
}
inline void TeamInfo::set_goals(int32_t value) {
  _internal_set_goals(value);
  // @@protoc_insertion_point(field_set:TeamInfo.goals)
}

// optional int32 goalkeeper = 3;
inline bool TeamInfo::_internal_has_goalkeeper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TeamInfo::has_goalkeeper() const {
  return _internal_has_goalkeeper();
}
inline void TeamInfo::clear_goalkeeper() {
  _impl_.goalkeeper_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t TeamInfo::_internal_goalkeeper() const {
  return _impl_.goalkeeper_;
}
inline int32_t TeamInfo::goalkeeper() const {
  // @@protoc_insertion_point(field_get:TeamInfo.goalkeeper)
  return _internal_goalkeeper();
}
inline void TeamInfo::_internal_set_goalkeeper(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.goalkeeper_ = value;
}
inline void TeamInfo::set_goalkeeper(int32_t value) {
  _internal_set_goalkeeper(value);
  // @@protoc_insertion_point(field_set:TeamInfo.goalkeeper)
}

// repeated .YellowCard yellow_cards = 4;
inline int TeamInfo::_internal_yellow_cards_size() const {
  return _impl_.yellow_cards_.size();
}
inline int TeamInfo::yellow_cards_size() const {
  return _internal_yellow_cards_size();
}
inline void TeamInfo::clear_yellow_cards() {
  _impl_.yellow_cards_.Clear();
}
inline ::YellowCard* TeamInfo::mutable_yellow_cards(int index) {
  // @@protoc_insertion_point(field_mutable:TeamInfo.yellow_cards)
  return _impl_.yellow_cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowCard >*
TeamInfo::mutable_yellow_cards() {
  // @@protoc_insertion_point(field_mutable_list:TeamInfo.yellow_cards)
  return &_impl_.yellow_cards_;
}
inline const ::YellowCard& TeamInfo::_internal_yellow_cards(int index) const {
  return _impl_.yellow_cards_.Get(index);
}
inline const ::YellowCard& TeamInfo::yellow_cards(int index) const {
  // @@protoc_insertion_point(field_get:TeamInfo.yellow_cards)
  return _internal_yellow_cards(index);
}
inline ::YellowCard* TeamInfo::_internal_add_yellow_cards() {
  return _impl_.yellow_cards_.Add();
}
inline ::YellowCard* TeamInfo::add_yellow_cards() {
  ::YellowCard* _add = _internal_add_yellow_cards();
  // @@protoc_insertion_point(field_add:TeamInfo.yellow_cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::YellowCard >&
TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_list:TeamInfo.yellow_cards)
  return _impl_.yellow_cards_;
}

// repeated .RedCard red_cards = 5;
inline int TeamInfo::_internal_red_cards_size() const {
  return _impl_.red_cards_.size();
}
inline int TeamInfo::red_cards_size() const {
  return _internal_red_cards_size();
}
inline void TeamInfo::clear_red_cards() {
  _impl_.red_cards_.Clear();
}
inline ::RedCard* TeamInfo::mutable_red_cards(int index) {
  // @@protoc_insertion_point(field_mutable:TeamInfo.red_cards)
  return _impl_.red_cards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedCard >*
TeamInfo::mutable_red_cards() {
  // @@protoc_insertion_point(field_mutable_list:TeamInfo.red_cards)
  return &_impl_.red_cards_;
}
inline const ::RedCard& TeamInfo::_internal_red_cards(int index) const {
  return _impl_.red_cards_.Get(index);
}
inline const ::RedCard& TeamInfo::red_cards(int index) const {
  // @@protoc_insertion_point(field_get:TeamInfo.red_cards)
  return _internal_red_cards(index);
}
inline ::RedCard* TeamInfo::_internal_add_red_cards() {
  return _impl_.red_cards_.Add();
}
inline ::RedCard* TeamInfo::add_red_cards() {
  ::RedCard* _add = _internal_add_red_cards();
  // @@protoc_insertion_point(field_add:TeamInfo.red_cards)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RedCard >&
TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_list:TeamInfo.red_cards)
  return _impl_.red_cards_;
}

// optional int32 timeouts_left = 6;
inline bool TeamInfo::_internal_has_timeouts_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TeamInfo::has_timeouts_left() const {
  return _internal_has_timeouts_left();
}
inline void TeamInfo::clear_timeouts_left() {
  _impl_.timeouts_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t TeamInfo::_internal_timeouts_left() const {
  return _impl_.timeouts_left_;
}
inline int32_t TeamInfo::timeouts_left() const {
  // @@protoc_insertion_point(field_get:TeamInfo.timeouts_left)
  return _internal_timeouts_left();
}
inline void TeamInfo::_internal_set_timeouts_left(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.timeouts_left_ = value;
}
inline void TeamInfo::set_timeouts_left(int32_t value) {
  _internal_set_timeouts_left(value);
  // @@protoc_insertion_point(field_set:TeamInfo.timeouts_left)
}

// optional .google.protobuf.Duration timeout_time_left = 7;
inline bool TeamInfo::_internal_has_timeout_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timeout_time_left_ != nullptr);
  return value;
}
inline bool TeamInfo::has_timeout_time_left() const {
  return _internal_has_timeout_time_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TeamInfo::_internal_timeout_time_left() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.timeout_time_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TeamInfo::timeout_time_left() const {
  // @@protoc_insertion_point(field_get:TeamInfo.timeout_time_left)
  return _internal_timeout_time_left();
}
inline void TeamInfo::unsafe_arena_set_allocated_timeout_time_left(
    ::PROTOBUF_NAMESPACE_ID::Duration* timeout_time_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeout_time_left_);
  }
  _impl_.timeout_time_left_ = timeout_time_left;
  if (timeout_time_left) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamInfo.timeout_time_left)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TeamInfo::release_timeout_time_left() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timeout_time_left_;
  _impl_.timeout_time_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TeamInfo::unsafe_arena_release_timeout_time_left() {
  // @@protoc_insertion_point(field_release:TeamInfo.timeout_time_left)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.timeout_time_left_;
  _impl_.timeout_time_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TeamInfo::_internal_mutable_timeout_time_left() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timeout_time_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.timeout_time_left_ = p;
  }
  return _impl_.timeout_time_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TeamInfo::mutable_timeout_time_left() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_timeout_time_left();
  // @@protoc_insertion_point(field_mutable:TeamInfo.timeout_time_left)
  return _msg;
}
inline void TeamInfo::set_allocated_timeout_time_left(::PROTOBUF_NAMESPACE_ID::Duration* timeout_time_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timeout_time_left_);
  }
  if (timeout_time_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_time_left));
    if (message_arena != submessage_arena) {
      timeout_time_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_time_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timeout_time_left_ = timeout_time_left;
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.timeout_time_left)
}

// optional bool on_positive_half = 8;
inline bool TeamInfo::_internal_has_on_positive_half() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TeamInfo::has_on_positive_half() const {
  return _internal_has_on_positive_half();
}
inline void TeamInfo::clear_on_positive_half() {
  _impl_.on_positive_half_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool TeamInfo::_internal_on_positive_half() const {
  return _impl_.on_positive_half_;
}
inline bool TeamInfo::on_positive_half() const {
  // @@protoc_insertion_point(field_get:TeamInfo.on_positive_half)
  return _internal_on_positive_half();
}
inline void TeamInfo::_internal_set_on_positive_half(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.on_positive_half_ = value;
}
inline void TeamInfo::set_on_positive_half(bool value) {
  _internal_set_on_positive_half(value);
  // @@protoc_insertion_point(field_set:TeamInfo.on_positive_half)
}

// repeated .Foul fouls = 9;
inline int TeamInfo::_internal_fouls_size() const {
  return _impl_.fouls_.size();
}
inline int TeamInfo::fouls_size() const {
  return _internal_fouls_size();
}
inline void TeamInfo::clear_fouls() {
  _impl_.fouls_.Clear();
}
inline ::Foul* TeamInfo::mutable_fouls(int index) {
  // @@protoc_insertion_point(field_mutable:TeamInfo.fouls)
  return _impl_.fouls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Foul >*
TeamInfo::mutable_fouls() {
  // @@protoc_insertion_point(field_mutable_list:TeamInfo.fouls)
  return &_impl_.fouls_;
}
inline const ::Foul& TeamInfo::_internal_fouls(int index) const {
  return _impl_.fouls_.Get(index);
}
inline const ::Foul& TeamInfo::fouls(int index) const {
  // @@protoc_insertion_point(field_get:TeamInfo.fouls)
  return _internal_fouls(index);
}
inline ::Foul* TeamInfo::_internal_add_fouls() {
  return _impl_.fouls_.Add();
}
inline ::Foul* TeamInfo::add_fouls() {
  ::Foul* _add = _internal_add_fouls();
  // @@protoc_insertion_point(field_add:TeamInfo.fouls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Foul >&
TeamInfo::fouls() const {
  // @@protoc_insertion_point(field_list:TeamInfo.fouls)
  return _impl_.fouls_;
}

// optional int32 ball_placement_failures = 10;
inline bool TeamInfo::_internal_has_ball_placement_failures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TeamInfo::has_ball_placement_failures() const {
  return _internal_has_ball_placement_failures();
}
inline void TeamInfo::clear_ball_placement_failures() {
  _impl_.ball_placement_failures_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t TeamInfo::_internal_ball_placement_failures() const {
  return _impl_.ball_placement_failures_;
}
inline int32_t TeamInfo::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:TeamInfo.ball_placement_failures)
  return _internal_ball_placement_failures();
}
inline void TeamInfo::_internal_set_ball_placement_failures(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ball_placement_failures_ = value;
}
inline void TeamInfo::set_ball_placement_failures(int32_t value) {
  _internal_set_ball_placement_failures(value);
  // @@protoc_insertion_point(field_set:TeamInfo.ball_placement_failures)
}

// optional bool ball_placement_failures_reached = 11;
inline bool TeamInfo::_internal_has_ball_placement_failures_reached() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TeamInfo::has_ball_placement_failures_reached() const {
  return _internal_has_ball_placement_failures_reached();
}
inline void TeamInfo::clear_ball_placement_failures_reached() {
  _impl_.ball_placement_failures_reached_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool TeamInfo::_internal_ball_placement_failures_reached() const {
  return _impl_.ball_placement_failures_reached_;
}
inline bool TeamInfo::ball_placement_failures_reached() const {
  // @@protoc_insertion_point(field_get:TeamInfo.ball_placement_failures_reached)
  return _internal_ball_placement_failures_reached();
}
inline void TeamInfo::_internal_set_ball_placement_failures_reached(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.ball_placement_failures_reached_ = value;
}
inline void TeamInfo::set_ball_placement_failures_reached(bool value) {
  _internal_set_ball_placement_failures_reached(value);
  // @@protoc_insertion_point(field_set:TeamInfo.ball_placement_failures_reached)
}

// optional bool can_place_ball = 12;
inline bool TeamInfo::_internal_has_can_place_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TeamInfo::has_can_place_ball() const {
  return _internal_has_can_place_ball();
}
inline void TeamInfo::clear_can_place_ball() {
  _impl_.can_place_ball_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool TeamInfo::_internal_can_place_ball() const {
  return _impl_.can_place_ball_;
}
inline bool TeamInfo::can_place_ball() const {
  // @@protoc_insertion_point(field_get:TeamInfo.can_place_ball)
  return _internal_can_place_ball();
}
inline void TeamInfo::_internal_set_can_place_ball(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.can_place_ball_ = value;
}
inline void TeamInfo::set_can_place_ball(bool value) {
  _internal_set_can_place_ball(value);
  // @@protoc_insertion_point(field_set:TeamInfo.can_place_ball)
}

// optional int32 max_allowed_bots = 13;
inline bool TeamInfo::_internal_has_max_allowed_bots() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TeamInfo::has_max_allowed_bots() const {
  return _internal_has_max_allowed_bots();
}
inline void TeamInfo::clear_max_allowed_bots() {
  _impl_.max_allowed_bots_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t TeamInfo::_internal_max_allowed_bots() const {
  return _impl_.max_allowed_bots_;
}
inline int32_t TeamInfo::max_allowed_bots() const {
  // @@protoc_insertion_point(field_get:TeamInfo.max_allowed_bots)
  return _internal_max_allowed_bots();
}
inline void TeamInfo::_internal_set_max_allowed_bots(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.max_allowed_bots_ = value;
}
inline void TeamInfo::set_max_allowed_bots(int32_t value) {
  _internal_set_max_allowed_bots(value);
  // @@protoc_insertion_point(field_set:TeamInfo.max_allowed_bots)
}

// optional .google.protobuf.Timestamp requests_bot_substitution_since = 14;
inline bool TeamInfo::_internal_has_requests_bot_substitution_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_bot_substitution_since_ != nullptr);
  return value;
}
inline bool TeamInfo::has_requests_bot_substitution_since() const {
  return _internal_has_requests_bot_substitution_since();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TeamInfo::_internal_requests_bot_substitution_since() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.requests_bot_substitution_since_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TeamInfo::requests_bot_substitution_since() const {
  // @@protoc_insertion_point(field_get:TeamInfo.requests_bot_substitution_since)
  return _internal_requests_bot_substitution_since();
}
inline void TeamInfo::unsafe_arena_set_allocated_requests_bot_substitution_since(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_bot_substitution_since) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_bot_substitution_since_);
  }
  _impl_.requests_bot_substitution_since_ = requests_bot_substitution_since;
  if (requests_bot_substitution_since) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamInfo.requests_bot_substitution_since)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::release_requests_bot_substitution_since() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.requests_bot_substitution_since_;
  _impl_.requests_bot_substitution_since_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::unsafe_arena_release_requests_bot_substitution_since() {
  // @@protoc_insertion_point(field_release:TeamInfo.requests_bot_substitution_since)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.requests_bot_substitution_since_;
  _impl_.requests_bot_substitution_since_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::_internal_mutable_requests_bot_substitution_since() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.requests_bot_substitution_since_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.requests_bot_substitution_since_ = p;
  }
  return _impl_.requests_bot_substitution_since_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::mutable_requests_bot_substitution_since() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_requests_bot_substitution_since();
  // @@protoc_insertion_point(field_mutable:TeamInfo.requests_bot_substitution_since)
  return _msg;
}
inline void TeamInfo::set_allocated_requests_bot_substitution_since(::PROTOBUF_NAMESPACE_ID::Timestamp* requests_bot_substitution_since) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_bot_substitution_since_);
  }
  if (requests_bot_substitution_since) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_bot_substitution_since));
    if (message_arena != submessage_arena) {
      requests_bot_substitution_since = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_bot_substitution_since, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.requests_bot_substitution_since_ = requests_bot_substitution_since;
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.requests_bot_substitution_since)
}

// optional .google.protobuf.Timestamp requests_timeout_since = 15;
inline bool TeamInfo::_internal_has_requests_timeout_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_timeout_since_ != nullptr);
  return value;
}
inline bool TeamInfo::has_requests_timeout_since() const {
  return _internal_has_requests_timeout_since();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TeamInfo::_internal_requests_timeout_since() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.requests_timeout_since_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TeamInfo::requests_timeout_since() const {
  // @@protoc_insertion_point(field_get:TeamInfo.requests_timeout_since)
  return _internal_requests_timeout_since();
}
inline void TeamInfo::unsafe_arena_set_allocated_requests_timeout_since(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_timeout_since) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_timeout_since_);
  }
  _impl_.requests_timeout_since_ = requests_timeout_since;
  if (requests_timeout_since) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamInfo.requests_timeout_since)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::release_requests_timeout_since() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.requests_timeout_since_;
  _impl_.requests_timeout_since_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::unsafe_arena_release_requests_timeout_since() {
  // @@protoc_insertion_point(field_release:TeamInfo.requests_timeout_since)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.requests_timeout_since_;
  _impl_.requests_timeout_since_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::_internal_mutable_requests_timeout_since() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.requests_timeout_since_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.requests_timeout_since_ = p;
  }
  return _impl_.requests_timeout_since_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::mutable_requests_timeout_since() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_requests_timeout_since();
  // @@protoc_insertion_point(field_mutable:TeamInfo.requests_timeout_since)
  return _msg;
}
inline void TeamInfo::set_allocated_requests_timeout_since(::PROTOBUF_NAMESPACE_ID::Timestamp* requests_timeout_since) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_timeout_since_);
  }
  if (requests_timeout_since) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_timeout_since));
    if (message_arena != submessage_arena) {
      requests_timeout_since = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_timeout_since, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.requests_timeout_since_ = requests_timeout_since;
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.requests_timeout_since)
}

// optional .google.protobuf.Timestamp requests_emergency_stop_since = 16;
inline bool TeamInfo::_internal_has_requests_emergency_stop_since() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requests_emergency_stop_since_ != nullptr);
  return value;
}
inline bool TeamInfo::has_requests_emergency_stop_since() const {
  return _internal_has_requests_emergency_stop_since();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TeamInfo::_internal_requests_emergency_stop_since() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.requests_emergency_stop_since_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TeamInfo::requests_emergency_stop_since() const {
  // @@protoc_insertion_point(field_get:TeamInfo.requests_emergency_stop_since)
  return _internal_requests_emergency_stop_since();
}
inline void TeamInfo::unsafe_arena_set_allocated_requests_emergency_stop_since(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* requests_emergency_stop_since) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_emergency_stop_since_);
  }
  _impl_.requests_emergency_stop_since_ = requests_emergency_stop_since;
  if (requests_emergency_stop_since) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TeamInfo.requests_emergency_stop_since)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::release_requests_emergency_stop_since() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.requests_emergency_stop_since_;
  _impl_.requests_emergency_stop_since_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::unsafe_arena_release_requests_emergency_stop_since() {
  // @@protoc_insertion_point(field_release:TeamInfo.requests_emergency_stop_since)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.requests_emergency_stop_since_;
  _impl_.requests_emergency_stop_since_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::_internal_mutable_requests_emergency_stop_since() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.requests_emergency_stop_since_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.requests_emergency_stop_since_ = p;
  }
  return _impl_.requests_emergency_stop_since_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TeamInfo::mutable_requests_emergency_stop_since() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_requests_emergency_stop_since();
  // @@protoc_insertion_point(field_mutable:TeamInfo.requests_emergency_stop_since)
  return _msg;
}
inline void TeamInfo::set_allocated_requests_emergency_stop_since(::PROTOBUF_NAMESPACE_ID::Timestamp* requests_emergency_stop_since) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requests_emergency_stop_since_);
  }
  if (requests_emergency_stop_since) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(requests_emergency_stop_since));
    if (message_arena != submessage_arena) {
      requests_emergency_stop_since = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requests_emergency_stop_since, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.requests_emergency_stop_since_ = requests_emergency_stop_since;
  // @@protoc_insertion_point(field_set_allocated:TeamInfo.requests_emergency_stop_since)
}

// optional int32 challenge_flags = 17;
inline bool TeamInfo::_internal_has_challenge_flags() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TeamInfo::has_challenge_flags() const {
  return _internal_has_challenge_flags();
}
inline void TeamInfo::clear_challenge_flags() {
  _impl_.challenge_flags_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline int32_t TeamInfo::_internal_challenge_flags() const {
  return _impl_.challenge_flags_;
}
inline int32_t TeamInfo::challenge_flags() const {
  // @@protoc_insertion_point(field_get:TeamInfo.challenge_flags)
  return _internal_challenge_flags();
}
inline void TeamInfo::_internal_set_challenge_flags(int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.challenge_flags_ = value;
}
inline void TeamInfo::set_challenge_flags(int32_t value) {
  _internal_set_challenge_flags(value);
  // @@protoc_insertion_point(field_set:TeamInfo.challenge_flags)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// State

// optional .Referee.Stage stage = 1;
inline bool State::_internal_has_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool State::has_stage() const {
  return _internal_has_stage();
}
inline void State::clear_stage() {
  _impl_.stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::Referee_Stage State::_internal_stage() const {
  return static_cast< ::Referee_Stage >(_impl_.stage_);
}
inline ::Referee_Stage State::stage() const {
  // @@protoc_insertion_point(field_get:State.stage)
  return _internal_stage();
}
inline void State::_internal_set_stage(::Referee_Stage value) {
  assert(::Referee_Stage_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.stage_ = value;
}
inline void State::set_stage(::Referee_Stage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:State.stage)
}

// optional .Command command = 2;
inline bool State::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.command_ != nullptr);
  return value;
}
inline bool State::has_command() const {
  return _internal_has_command();
}
inline void State::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Command& State::_internal_command() const {
  const ::Command* p = _impl_.command_;
  return p != nullptr ? *p : reinterpret_cast<const ::Command&>(
      ::_Command_default_instance_);
}
inline const ::Command& State::command() const {
  // @@protoc_insertion_point(field_get:State.command)
  return _internal_command();
}
inline void State::unsafe_arena_set_allocated_command(
    ::Command* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  _impl_.command_ = command;
  if (command) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.command)
}
inline ::Command* State::release_command() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Command* temp = _impl_.command_;
  _impl_.command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Command* State::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:State.command)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Command* temp = _impl_.command_;
  _impl_.command_ = nullptr;
  return temp;
}
inline ::Command* State::_internal_mutable_command() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.command_ == nullptr) {
    auto* p = CreateMaybeMessage<::Command>(GetArenaForAllocation());
    _impl_.command_ = p;
  }
  return _impl_.command_;
}
inline ::Command* State::mutable_command() {
  ::Command* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:State.command)
  return _msg;
}
inline void State::set_allocated_command(::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.command_ = command;
  // @@protoc_insertion_point(field_set_allocated:State.command)
}

// optional .GameState game_state = 19;
inline bool State::_internal_has_game_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.game_state_ != nullptr);
  return value;
}
inline bool State::has_game_state() const {
  return _internal_has_game_state();
}
inline void State::clear_game_state() {
  if (_impl_.game_state_ != nullptr) _impl_.game_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::GameState& State::_internal_game_state() const {
  const ::GameState* p = _impl_.game_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::GameState&>(
      ::_GameState_default_instance_);
}
inline const ::GameState& State::game_state() const {
  // @@protoc_insertion_point(field_get:State.game_state)
  return _internal_game_state();
}
inline void State::unsafe_arena_set_allocated_game_state(
    ::GameState* game_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_state_);
  }
  _impl_.game_state_ = game_state;
  if (game_state) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.game_state)
}
inline ::GameState* State::release_game_state() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::GameState* temp = _impl_.game_state_;
  _impl_.game_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::GameState* State::unsafe_arena_release_game_state() {
  // @@protoc_insertion_point(field_release:State.game_state)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::GameState* temp = _impl_.game_state_;
  _impl_.game_state_ = nullptr;
  return temp;
}
inline ::GameState* State::_internal_mutable_game_state() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.game_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::GameState>(GetArenaForAllocation());
    _impl_.game_state_ = p;
  }
  return _impl_.game_state_;
}
inline ::GameState* State::mutable_game_state() {
  ::GameState* _msg = _internal_mutable_game_state();
  // @@protoc_insertion_point(field_mutable:State.game_state)
  return _msg;
}
inline void State::set_allocated_game_state(::GameState* game_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.game_state_;
  }
  if (game_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_state);
    if (message_arena != submessage_arena) {
      game_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.game_state_ = game_state;
  // @@protoc_insertion_point(field_set_allocated:State.game_state)
}

// optional .google.protobuf.Duration stage_time_elapsed = 4;
inline bool State::_internal_has_stage_time_elapsed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stage_time_elapsed_ != nullptr);
  return value;
}
inline bool State::has_stage_time_elapsed() const {
  return _internal_has_stage_time_elapsed();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& State::_internal_stage_time_elapsed() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.stage_time_elapsed_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& State::stage_time_elapsed() const {
  // @@protoc_insertion_point(field_get:State.stage_time_elapsed)
  return _internal_stage_time_elapsed();
}
inline void State::unsafe_arena_set_allocated_stage_time_elapsed(
    ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stage_time_elapsed_);
  }
  _impl_.stage_time_elapsed_ = stage_time_elapsed;
  if (stage_time_elapsed) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.stage_time_elapsed)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::release_stage_time_elapsed() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.stage_time_elapsed_;
  _impl_.stage_time_elapsed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::unsafe_arena_release_stage_time_elapsed() {
  // @@protoc_insertion_point(field_release:State.stage_time_elapsed)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.stage_time_elapsed_;
  _impl_.stage_time_elapsed_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::_internal_mutable_stage_time_elapsed() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.stage_time_elapsed_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.stage_time_elapsed_ = p;
  }
  return _impl_.stage_time_elapsed_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::mutable_stage_time_elapsed() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_stage_time_elapsed();
  // @@protoc_insertion_point(field_mutable:State.stage_time_elapsed)
  return _msg;
}
inline void State::set_allocated_stage_time_elapsed(::PROTOBUF_NAMESPACE_ID::Duration* stage_time_elapsed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stage_time_elapsed_);
  }
  if (stage_time_elapsed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stage_time_elapsed));
    if (message_arena != submessage_arena) {
      stage_time_elapsed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stage_time_elapsed, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.stage_time_elapsed_ = stage_time_elapsed;
  // @@protoc_insertion_point(field_set_allocated:State.stage_time_elapsed)
}

// optional .google.protobuf.Duration stage_time_left = 5;
inline bool State::_internal_has_stage_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stage_time_left_ != nullptr);
  return value;
}
inline bool State::has_stage_time_left() const {
  return _internal_has_stage_time_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& State::_internal_stage_time_left() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.stage_time_left_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& State::stage_time_left() const {
  // @@protoc_insertion_point(field_get:State.stage_time_left)
  return _internal_stage_time_left();
}
inline void State::unsafe_arena_set_allocated_stage_time_left(
    ::PROTOBUF_NAMESPACE_ID::Duration* stage_time_left) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stage_time_left_);
  }
  _impl_.stage_time_left_ = stage_time_left;
  if (stage_time_left) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.stage_time_left)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::release_stage_time_left() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.stage_time_left_;
  _impl_.stage_time_left_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::unsafe_arena_release_stage_time_left() {
  // @@protoc_insertion_point(field_release:State.stage_time_left)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.stage_time_left_;
  _impl_.stage_time_left_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::_internal_mutable_stage_time_left() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stage_time_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.stage_time_left_ = p;
  }
  return _impl_.stage_time_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::mutable_stage_time_left() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_stage_time_left();
  // @@protoc_insertion_point(field_mutable:State.stage_time_left)
  return _msg;
}
inline void State::set_allocated_stage_time_left(::PROTOBUF_NAMESPACE_ID::Duration* stage_time_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stage_time_left_);
  }
  if (stage_time_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stage_time_left));
    if (message_arena != submessage_arena) {
      stage_time_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stage_time_left, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stage_time_left_ = stage_time_left;
  // @@protoc_insertion_point(field_set_allocated:State.stage_time_left)
}

// optional .google.protobuf.Timestamp match_time_start = 6;
inline bool State::_internal_has_match_time_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.match_time_start_ != nullptr);
  return value;
}
inline bool State::has_match_time_start() const {
  return _internal_has_match_time_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& State::_internal_match_time_start() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.match_time_start_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& State::match_time_start() const {
  // @@protoc_insertion_point(field_get:State.match_time_start)
  return _internal_match_time_start();
}
inline void State::unsafe_arena_set_allocated_match_time_start(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* match_time_start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_time_start_);
  }
  _impl_.match_time_start_ = match_time_start;
  if (match_time_start) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.match_time_start)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::release_match_time_start() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.match_time_start_;
  _impl_.match_time_start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::unsafe_arena_release_match_time_start() {
  // @@protoc_insertion_point(field_release:State.match_time_start)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.match_time_start_;
  _impl_.match_time_start_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::_internal_mutable_match_time_start() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.match_time_start_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.match_time_start_ = p;
  }
  return _impl_.match_time_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* State::mutable_match_time_start() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_match_time_start();
  // @@protoc_insertion_point(field_mutable:State.match_time_start)
  return _msg;
}
inline void State::set_allocated_match_time_start(::PROTOBUF_NAMESPACE_ID::Timestamp* match_time_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.match_time_start_);
  }
  if (match_time_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(match_time_start));
    if (message_arena != submessage_arena) {
      match_time_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, match_time_start, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.match_time_start_ = match_time_start;
  // @@protoc_insertion_point(field_set_allocated:State.match_time_start)
}

// map<string, .TeamInfo> team_state = 8;
inline int State::_internal_team_state_size() const {
  return _impl_.team_state_.size();
}
inline int State::team_state_size() const {
  return _internal_team_state_size();
}
inline void State::clear_team_state() {
  _impl_.team_state_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >&
State::_internal_team_state() const {
  return _impl_.team_state_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >&
State::team_state() const {
  // @@protoc_insertion_point(field_map:State.team_state)
  return _internal_team_state();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >*
State::_internal_mutable_team_state() {
  return _impl_.team_state_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::TeamInfo >*
State::mutable_team_state() {
  // @@protoc_insertion_point(field_mutable_map:State.team_state)
  return _internal_mutable_team_state();
}

// optional .Vector2 placement_pos = 9;
inline bool State::_internal_has_placement_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_pos_ != nullptr);
  return value;
}
inline bool State::has_placement_pos() const {
  return _internal_has_placement_pos();
}
inline const ::Vector2& State::_internal_placement_pos() const {
  const ::Vector2* p = _impl_.placement_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& State::placement_pos() const {
  // @@protoc_insertion_point(field_get:State.placement_pos)
  return _internal_placement_pos();
}
inline void State::unsafe_arena_set_allocated_placement_pos(
    ::Vector2* placement_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_pos_);
  }
  _impl_.placement_pos_ = placement_pos;
  if (placement_pos) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.placement_pos)
}
inline ::Vector2* State::release_placement_pos() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Vector2* temp = _impl_.placement_pos_;
  _impl_.placement_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* State::unsafe_arena_release_placement_pos() {
  // @@protoc_insertion_point(field_release:State.placement_pos)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::Vector2* temp = _impl_.placement_pos_;
  _impl_.placement_pos_ = nullptr;
  return temp;
}
inline ::Vector2* State::_internal_mutable_placement_pos() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.placement_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.placement_pos_ = p;
  }
  return _impl_.placement_pos_;
}
inline ::Vector2* State::mutable_placement_pos() {
  ::Vector2* _msg = _internal_mutable_placement_pos();
  // @@protoc_insertion_point(field_mutable:State.placement_pos)
  return _msg;
}
inline void State::set_allocated_placement_pos(::Vector2* placement_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_pos_);
  }
  if (placement_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placement_pos));
    if (message_arena != submessage_arena) {
      placement_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement_pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.placement_pos_ = placement_pos;
  // @@protoc_insertion_point(field_set_allocated:State.placement_pos)
}

// optional .Command next_command = 10;
inline bool State::_internal_has_next_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.next_command_ != nullptr);
  return value;
}
inline bool State::has_next_command() const {
  return _internal_has_next_command();
}
inline void State::clear_next_command() {
  if (_impl_.next_command_ != nullptr) _impl_.next_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::Command& State::_internal_next_command() const {
  const ::Command* p = _impl_.next_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::Command&>(
      ::_Command_default_instance_);
}
inline const ::Command& State::next_command() const {
  // @@protoc_insertion_point(field_get:State.next_command)
  return _internal_next_command();
}
inline void State::unsafe_arena_set_allocated_next_command(
    ::Command* next_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.next_command_);
  }
  _impl_.next_command_ = next_command;
  if (next_command) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.next_command)
}
inline ::Command* State::release_next_command() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Command* temp = _impl_.next_command_;
  _impl_.next_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Command* State::unsafe_arena_release_next_command() {
  // @@protoc_insertion_point(field_release:State.next_command)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::Command* temp = _impl_.next_command_;
  _impl_.next_command_ = nullptr;
  return temp;
}
inline ::Command* State::_internal_mutable_next_command() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.next_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::Command>(GetArenaForAllocation());
    _impl_.next_command_ = p;
  }
  return _impl_.next_command_;
}
inline ::Command* State::mutable_next_command() {
  ::Command* _msg = _internal_mutable_next_command();
  // @@protoc_insertion_point(field_mutable:State.next_command)
  return _msg;
}
inline void State::set_allocated_next_command(::Command* next_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.next_command_;
  }
  if (next_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(next_command);
    if (message_arena != submessage_arena) {
      next_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.next_command_ = next_command;
  // @@protoc_insertion_point(field_set_allocated:State.next_command)
}

// optional .google.protobuf.Duration current_action_time_remaining = 12;
inline bool State::_internal_has_current_action_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.current_action_time_remaining_ != nullptr);
  return value;
}
inline bool State::has_current_action_time_remaining() const {
  return _internal_has_current_action_time_remaining();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& State::_internal_current_action_time_remaining() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.current_action_time_remaining_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& State::current_action_time_remaining() const {
  // @@protoc_insertion_point(field_get:State.current_action_time_remaining)
  return _internal_current_action_time_remaining();
}
inline void State::unsafe_arena_set_allocated_current_action_time_remaining(
    ::PROTOBUF_NAMESPACE_ID::Duration* current_action_time_remaining) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_action_time_remaining_);
  }
  _impl_.current_action_time_remaining_ = current_action_time_remaining;
  if (current_action_time_remaining) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:State.current_action_time_remaining)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::release_current_action_time_remaining() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.current_action_time_remaining_;
  _impl_.current_action_time_remaining_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::unsafe_arena_release_current_action_time_remaining() {
  // @@protoc_insertion_point(field_release:State.current_action_time_remaining)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.current_action_time_remaining_;
  _impl_.current_action_time_remaining_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::_internal_mutable_current_action_time_remaining() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.current_action_time_remaining_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.current_action_time_remaining_ = p;
  }
  return _impl_.current_action_time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* State::mutable_current_action_time_remaining() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_current_action_time_remaining();
  // @@protoc_insertion_point(field_mutable:State.current_action_time_remaining)
  return _msg;
}
inline void State::set_allocated_current_action_time_remaining(::PROTOBUF_NAMESPACE_ID::Duration* current_action_time_remaining) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_action_time_remaining_);
  }
  if (current_action_time_remaining) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_action_time_remaining));
    if (message_arena != submessage_arena) {
      current_action_time_remaining = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_action_time_remaining, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.current_action_time_remaining_ = current_action_time_remaining;
  // @@protoc_insertion_point(field_set_allocated:State.current_action_time_remaining)
}

// repeated .GameEvent game_events = 13;
inline int State::_internal_game_events_size() const {
  return _impl_.game_events_.size();
}
inline int State::game_events_size() const {
  return _internal_game_events_size();
}
inline ::GameEvent* State::mutable_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:State.game_events)
  return _impl_.game_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
State::mutable_game_events() {
  // @@protoc_insertion_point(field_mutable_list:State.game_events)
  return &_impl_.game_events_;
}
inline const ::GameEvent& State::_internal_game_events(int index) const {
  return _impl_.game_events_.Get(index);
}
inline const ::GameEvent& State::game_events(int index) const {
  // @@protoc_insertion_point(field_get:State.game_events)
  return _internal_game_events(index);
}
inline ::GameEvent* State::_internal_add_game_events() {
  return _impl_.game_events_.Add();
}
inline ::GameEvent* State::add_game_events() {
  ::GameEvent* _add = _internal_add_game_events();
  // @@protoc_insertion_point(field_add:State.game_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
State::game_events() const {
  // @@protoc_insertion_point(field_list:State.game_events)
  return _impl_.game_events_;
}

// repeated .ProposalGroup proposal_groups = 14;
inline int State::_internal_proposal_groups_size() const {
  return _impl_.proposal_groups_.size();
}
inline int State::proposal_groups_size() const {
  return _internal_proposal_groups_size();
}
inline void State::clear_proposal_groups() {
  _impl_.proposal_groups_.Clear();
}
inline ::ProposalGroup* State::mutable_proposal_groups(int index) {
  // @@protoc_insertion_point(field_mutable:State.proposal_groups)
  return _impl_.proposal_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposalGroup >*
State::mutable_proposal_groups() {
  // @@protoc_insertion_point(field_mutable_list:State.proposal_groups)
  return &_impl_.proposal_groups_;
}
inline const ::ProposalGroup& State::_internal_proposal_groups(int index) const {
  return _impl_.proposal_groups_.Get(index);
}
inline const ::ProposalGroup& State::proposal_groups(int index) const {
  // @@protoc_insertion_point(field_get:State.proposal_groups)
  return _internal_proposal_groups(index);
}
inline ::ProposalGroup* State::_internal_add_proposal_groups() {
  return _impl_.proposal_groups_.Add();
}
inline ::ProposalGroup* State::add_proposal_groups() {
  ::ProposalGroup* _add = _internal_add_proposal_groups();
  // @@protoc_insertion_point(field_add:State.proposal_groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProposalGroup >&
State::proposal_groups() const {
  // @@protoc_insertion_point(field_list:State.proposal_groups)
  return _impl_.proposal_groups_;
}

// optional .Division division = 15;
inline bool State::_internal_has_division() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool State::has_division() const {
  return _internal_has_division();
}
inline void State::clear_division() {
  _impl_.division_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::Division State::_internal_division() const {
  return static_cast< ::Division >(_impl_.division_);
}
inline ::Division State::division() const {
  // @@protoc_insertion_point(field_get:State.division)
  return _internal_division();
}
inline void State::_internal_set_division(::Division value) {
  assert(::Division_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.division_ = value;
}
inline void State::set_division(::Division value) {
  _internal_set_division(value);
  // @@protoc_insertion_point(field_set:State.division)
}

// optional bool auto_continue = 16;
inline bool State::_internal_has_auto_continue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool State::has_auto_continue() const {
  return _internal_has_auto_continue();
}
inline void State::clear_auto_continue() {
  _impl_.auto_continue_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool State::_internal_auto_continue() const {
  return _impl_.auto_continue_;
}
inline bool State::auto_continue() const {
  // @@protoc_insertion_point(field_get:State.auto_continue)
  return _internal_auto_continue();
}
inline void State::_internal_set_auto_continue(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.auto_continue_ = value;
}
inline void State::set_auto_continue(bool value) {
  _internal_set_auto_continue(value);
  // @@protoc_insertion_point(field_set:State.auto_continue)
}

// optional .Team first_kickoff_team = 17;
inline bool State::_internal_has_first_kickoff_team() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool State::has_first_kickoff_team() const {
  return _internal_has_first_kickoff_team();
}
inline void State::clear_first_kickoff_team() {
  _impl_.first_kickoff_team_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::Team State::_internal_first_kickoff_team() const {
  return static_cast< ::Team >(_impl_.first_kickoff_team_);
}
inline ::Team State::first_kickoff_team() const {
  // @@protoc_insertion_point(field_get:State.first_kickoff_team)
  return _internal_first_kickoff_team();
}
inline void State::_internal_set_first_kickoff_team(::Team value) {
  assert(::Team_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.first_kickoff_team_ = value;
}
inline void State::set_first_kickoff_team(::Team value) {
  _internal_set_first_kickoff_team(value);
  // @@protoc_insertion_point(field_set:State.first_kickoff_team)
}

// optional .MatchType match_type = 18;
inline bool State::_internal_has_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool State::has_match_type() const {
  return _internal_has_match_type();
}
inline void State::clear_match_type() {
  _impl_.match_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::MatchType State::_internal_match_type() const {
  return static_cast< ::MatchType >(_impl_.match_type_);
}
inline ::MatchType State::match_type() const {
  // @@protoc_insertion_point(field_get:State.match_type)
  return _internal_match_type();
}
inline void State::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.match_type_ = value;
}
inline void State::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:State.match_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Command_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Command_Type>() {
  return ::Command_Type_descriptor();
}
template <> struct is_proto_enum< ::GameState_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameState_Type>() {
  return ::GameState_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5fstate_2eproto
