// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_detection_tracked.proto

#include "ssl_vision_detection_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TrackedBall::TrackedBall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.vel_)*/nullptr
  , /*decltype(_impl_.visibility_)*/0} {}
struct TrackedBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedBallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedBallDefaultTypeInternal() {}
  union {
    TrackedBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedBallDefaultTypeInternal _TrackedBall_default_instance_;
PROTOBUF_CONSTEXPR KickedBall::KickedBall(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.vel_)*/nullptr
  , /*decltype(_impl_.stop_pos_)*/nullptr
  , /*decltype(_impl_.robot_id_)*/nullptr
  , /*decltype(_impl_.start_timestamp_)*/0
  , /*decltype(_impl_.stop_timestamp_)*/0} {}
struct KickedBallDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KickedBallDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KickedBallDefaultTypeInternal() {}
  union {
    KickedBall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KickedBallDefaultTypeInternal _KickedBall_default_instance_;
PROTOBUF_CONSTEXPR TrackedRobot::TrackedRobot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.robot_id_)*/nullptr
  , /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.vel_)*/nullptr
  , /*decltype(_impl_.orientation_)*/0
  , /*decltype(_impl_.vel_angular_)*/0
  , /*decltype(_impl_.visibility_)*/0} {}
struct TrackedRobotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedRobotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedRobotDefaultTypeInternal() {}
  union {
    TrackedRobot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedRobotDefaultTypeInternal _TrackedRobot_default_instance_;
PROTOBUF_CONSTEXPR TrackedFrame::TrackedFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.balls_)*/{}
  , /*decltype(_impl_.robots_)*/{}
  , /*decltype(_impl_.capabilities_)*/{}
  , /*decltype(_impl_.kicked_ball_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.frame_number_)*/0u} {}
struct TrackedFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedFrameDefaultTypeInternal() {}
  union {
    TrackedFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedFrameDefaultTypeInternal _TrackedFrame_default_instance_;
static ::_pb::Metadata file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto = nullptr;

const uint32_t TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _impl_.vel_),
  PROTOBUF_FIELD_OFFSET(::TrackedBall, _impl_.visibility_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_.vel_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_.start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_.stop_timestamp_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_.stop_pos_),
  PROTOBUF_FIELD_OFFSET(::KickedBall, _impl_.robot_id_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_.vel_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_.vel_angular_),
  PROTOBUF_FIELD_OFFSET(::TrackedRobot, _impl_.visibility_),
  0,
  1,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_.frame_number_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_.balls_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_.robots_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_.kicked_ball_),
  PROTOBUF_FIELD_OFFSET(::TrackedFrame, _impl_.capabilities_),
  2,
  1,
  ~0u,
  ~0u,
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TrackedBall)},
  { 12, 24, -1, sizeof(::KickedBall)},
  { 30, 42, -1, sizeof(::TrackedRobot)},
  { 48, 60, -1, sizeof(::TrackedFrame)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TrackedBall_default_instance_._instance,
  &::_KickedBall_default_instance_._instance,
  &::_TrackedRobot_default_instance_._instance,
  &::_TrackedFrame_default_instance_._instance,
};

const char descriptor_table_protodef_ssl_5fvision_5fdetection_5ftracked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"ssl_vision_detection_tracked.proto\032\023ss"
  "l_gc_common.proto\032\025ssl_gc_geometry.proto"
  "\"O\n\013TrackedBall\022\025\n\003pos\030\001 \002(\0132\010.Vector3\022\025"
  "\n\003vel\030\002 \001(\0132\010.Vector3\022\022\n\nvisibility\030\003 \001("
  "\002\"\243\001\n\nKickedBall\022\025\n\003pos\030\001 \002(\0132\010.Vector2\022"
  "\025\n\003vel\030\002 \002(\0132\010.Vector3\022\027\n\017start_timestam"
  "p\030\003 \002(\001\022\026\n\016stop_timestamp\030\004 \001(\001\022\032\n\010stop_"
  "pos\030\005 \001(\0132\010.Vector2\022\032\n\010robot_id\030\006 \001(\0132\010."
  "RobotId\"\226\001\n\014TrackedRobot\022\032\n\010robot_id\030\001 \002"
  "(\0132\010.RobotId\022\025\n\003pos\030\002 \002(\0132\010.Vector2\022\023\n\013o"
  "rientation\030\003 \002(\002\022\025\n\003vel\030\004 \001(\0132\010.Vector2\022"
  "\023\n\013vel_angular\030\005 \001(\002\022\022\n\nvisibility\030\006 \001(\002"
  "\"\270\001\n\014TrackedFrame\022\024\n\014frame_number\030\001 \002(\r\022"
  "\021\n\ttimestamp\030\002 \002(\001\022\033\n\005balls\030\003 \003(\0132\014.Trac"
  "kedBall\022\035\n\006robots\030\004 \003(\0132\r.TrackedRobot\022 "
  "\n\013kicked_ball\030\005 \001(\0132\013.KickedBall\022!\n\014capa"
  "bilities\030\006 \003(\0162\013.Capability*\222\001\n\nCapabili"
  "ty\022\026\n\022CAPABILITY_UNKNOWN\020\000\022\"\n\036CAPABILITY"
  "_DETECT_FLYING_BALLS\020\001\022$\n CAPABILITY_DET"
  "ECT_MULTIPLE_BALLS\020\002\022\"\n\036CAPABILITY_DETEC"
  "T_KICKED_BALLS\020\003B-Z+github.com/Rione-SSL"
  "/RACOON-Pi/proto/pb_gen"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_deps[2] = {
  &::descriptor_table_ssl_5fgc_5fcommon_2eproto,
  &::descriptor_table_ssl_5fgc_5fgeometry_2eproto,
};
static ::_pbi::once_flag descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto = {
    false, false, 863, descriptor_table_protodef_ssl_5fvision_5fdetection_5ftracked_2eproto,
    "ssl_vision_detection_tracked.proto",
    &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once, descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto::offsets,
    file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto, file_level_enum_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto,
    file_level_service_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_getter() {
  return &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ssl_5fvision_5fdetection_5ftracked_2eproto(&descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Capability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto);
  return file_level_enum_descriptors_ssl_5fvision_5fdetection_5ftracked_2eproto[0];
}
bool Capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TrackedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedBall>()._impl_._has_bits_);
  static const ::Vector3& pos(const TrackedBall* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3& vel(const TrackedBall* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::Vector3&
TrackedBall::_Internal::pos(const TrackedBall* msg) {
  return *msg->_impl_.pos_;
}
const ::Vector3&
TrackedBall::_Internal::vel(const TrackedBall* msg) {
  return *msg->_impl_.vel_;
}
void TrackedBall::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrackedBall::clear_vel() {
  if (_impl_.vel_ != nullptr) _impl_.vel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TrackedBall::TrackedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TrackedBall)
}
TrackedBall::TrackedBall(const TrackedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedBall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
    , decltype(_impl_.visibility_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Vector3(*from._impl_.pos_);
  }
  if (from._internal_has_vel()) {
    _this->_impl_.vel_ = new ::Vector3(*from._impl_.vel_);
  }
  _this->_impl_.visibility_ = from._impl_.visibility_;
  // @@protoc_insertion_point(copy_constructor:TrackedBall)
}

inline void TrackedBall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
    , decltype(_impl_.visibility_){0}
  };
}

TrackedBall::~TrackedBall() {
  // @@protoc_insertion_point(destructor:TrackedBall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.vel_;
}

void TrackedBall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vel_ != nullptr);
      _impl_.vel_->Clear();
    }
  }
  _impl_.visibility_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedBall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Vector3 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_visibility(&has_bits);
          _impl_.visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackedBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Vector3 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // optional .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vel(this),
        _Internal::vel(this).GetCachedSize(), target, stream);
  }

  // optional float visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedBall)
  return target;
}

size_t TrackedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedBall)
  size_t total_size = 0;

  // required .Vector3 pos = 1;
  if (_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .Vector3 vel = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vel_);
    }

    // optional float visibility = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedBall::GetClassData() const { return &_class_data_; }


void TrackedBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedBall*>(&to_msg);
  auto& from = static_cast<const TrackedBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TrackedBall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::Vector3::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vel()->::Vector3::MergeFrom(
          from._internal_vel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.visibility_ = from._impl_.visibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedBall::CopyFrom(const TrackedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!_impl_.vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedBall::InternalSwap(TrackedBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedBall, _impl_.visibility_)
      + sizeof(TrackedBall::_impl_.visibility_)
      - PROTOBUF_FIELD_OFFSET(TrackedBall, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedBall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto[0]);
}

// ===================================================================

class KickedBall::_Internal {
 public:
  using HasBits = decltype(std::declval<KickedBall>()._impl_._has_bits_);
  static const ::Vector2& pos(const KickedBall* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector3& vel(const KickedBall* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stop_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Vector2& stop_pos(const KickedBall* msg);
  static void set_has_stop_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RobotId& robot_id(const KickedBall* msg);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::Vector2&
KickedBall::_Internal::pos(const KickedBall* msg) {
  return *msg->_impl_.pos_;
}
const ::Vector3&
KickedBall::_Internal::vel(const KickedBall* msg) {
  return *msg->_impl_.vel_;
}
const ::Vector2&
KickedBall::_Internal::stop_pos(const KickedBall* msg) {
  return *msg->_impl_.stop_pos_;
}
const ::RobotId&
KickedBall::_Internal::robot_id(const KickedBall* msg) {
  return *msg->_impl_.robot_id_;
}
void KickedBall::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void KickedBall::clear_vel() {
  if (_impl_.vel_ != nullptr) _impl_.vel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void KickedBall::clear_stop_pos() {
  if (_impl_.stop_pos_ != nullptr) _impl_.stop_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void KickedBall::clear_robot_id() {
  if (_impl_.robot_id_ != nullptr) _impl_.robot_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
KickedBall::KickedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KickedBall)
}
KickedBall::KickedBall(const KickedBall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KickedBall* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
    , decltype(_impl_.stop_pos_){nullptr}
    , decltype(_impl_.robot_id_){nullptr}
    , decltype(_impl_.start_timestamp_){}
    , decltype(_impl_.stop_timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Vector2(*from._impl_.pos_);
  }
  if (from._internal_has_vel()) {
    _this->_impl_.vel_ = new ::Vector3(*from._impl_.vel_);
  }
  if (from._internal_has_stop_pos()) {
    _this->_impl_.stop_pos_ = new ::Vector2(*from._impl_.stop_pos_);
  }
  if (from._internal_has_robot_id()) {
    _this->_impl_.robot_id_ = new ::RobotId(*from._impl_.robot_id_);
  }
  ::memcpy(&_impl_.start_timestamp_, &from._impl_.start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_timestamp_) -
    reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.stop_timestamp_));
  // @@protoc_insertion_point(copy_constructor:KickedBall)
}

inline void KickedBall::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
    , decltype(_impl_.stop_pos_){nullptr}
    , decltype(_impl_.robot_id_){nullptr}
    , decltype(_impl_.start_timestamp_){0}
    , decltype(_impl_.stop_timestamp_){0}
  };
}

KickedBall::~KickedBall() {
  // @@protoc_insertion_point(destructor:KickedBall)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KickedBall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.vel_;
  if (this != internal_default_instance()) delete _impl_.stop_pos_;
  if (this != internal_default_instance()) delete _impl_.robot_id_;
}

void KickedBall::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KickedBall::Clear() {
// @@protoc_insertion_point(message_clear_start:KickedBall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vel_ != nullptr);
      _impl_.vel_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.stop_pos_ != nullptr);
      _impl_.stop_pos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.robot_id_ != nullptr);
      _impl_.robot_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.start_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.stop_timestamp_) -
        reinterpret_cast<char*>(&_impl_.start_timestamp_)) + sizeof(_impl_.stop_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KickedBall::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Vector2 pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Vector3 vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double start_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_start_timestamp(&has_bits);
          _impl_.start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double stop_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_stop_timestamp(&has_bits);
          _impl_.stop_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 stop_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .RobotId robot_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KickedBall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KickedBall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Vector2 pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // required .Vector3 vel = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vel(this),
        _Internal::vel(this).GetCachedSize(), target, stream);
  }

  // required double start_timestamp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_start_timestamp(), target);
  }

  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_stop_timestamp(), target);
  }

  // optional .Vector2 stop_pos = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stop_pos(this),
        _Internal::stop_pos(this).GetCachedSize(), target, stream);
  }

  // optional .RobotId robot_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::robot_id(this),
        _Internal::robot_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KickedBall)
  return target;
}

size_t KickedBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:KickedBall)
  size_t total_size = 0;

  if (_internal_has_pos()) {
    // required .Vector2 pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  if (_internal_has_vel()) {
    // required .Vector3 vel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vel_);
  }

  if (_internal_has_start_timestamp()) {
    // required double start_timestamp = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t KickedBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KickedBall)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .Vector2 pos = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);

    // required .Vector3 vel = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vel_);

    // required double start_timestamp = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .Vector2 stop_pos = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_pos_);
    }

    // optional .RobotId robot_id = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.robot_id_);
    }

  }
  // optional double stop_timestamp = 4;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KickedBall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KickedBall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KickedBall::GetClassData() const { return &_class_data_; }


void KickedBall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KickedBall*>(&to_msg);
  auto& from = static_cast<const KickedBall&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KickedBall)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pos()->::Vector2::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vel()->::Vector3::MergeFrom(
          from._internal_vel());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stop_pos()->::Vector2::MergeFrom(
          from._internal_stop_pos());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_robot_id()->::RobotId::MergeFrom(
          from._internal_robot_id());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.start_timestamp_ = from._impl_.start_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.stop_timestamp_ = from._impl_.stop_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KickedBall::CopyFrom(const KickedBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KickedBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickedBall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!_impl_.vel_->IsInitialized()) return false;
  }
  if (_internal_has_stop_pos()) {
    if (!_impl_.stop_pos_->IsInitialized()) return false;
  }
  return true;
}

void KickedBall::InternalSwap(KickedBall* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KickedBall, _impl_.stop_timestamp_)
      + sizeof(KickedBall::_impl_.stop_timestamp_)
      - PROTOBUF_FIELD_OFFSET(KickedBall, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KickedBall::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto[1]);
}

// ===================================================================

class TrackedRobot::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedRobot>()._impl_._has_bits_);
  static const ::RobotId& robot_id(const TrackedRobot* msg);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2& pos(const TrackedRobot* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Vector2& vel(const TrackedRobot* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vel_angular(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::RobotId&
TrackedRobot::_Internal::robot_id(const TrackedRobot* msg) {
  return *msg->_impl_.robot_id_;
}
const ::Vector2&
TrackedRobot::_Internal::pos(const TrackedRobot* msg) {
  return *msg->_impl_.pos_;
}
const ::Vector2&
TrackedRobot::_Internal::vel(const TrackedRobot* msg) {
  return *msg->_impl_.vel_;
}
void TrackedRobot::clear_robot_id() {
  if (_impl_.robot_id_ != nullptr) _impl_.robot_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrackedRobot::clear_pos() {
  if (_impl_.pos_ != nullptr) _impl_.pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TrackedRobot::clear_vel() {
  if (_impl_.vel_ != nullptr) _impl_.vel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TrackedRobot::TrackedRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TrackedRobot)
}
TrackedRobot::TrackedRobot(const TrackedRobot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedRobot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robot_id_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
    , decltype(_impl_.orientation_){}
    , decltype(_impl_.vel_angular_){}
    , decltype(_impl_.visibility_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_robot_id()) {
    _this->_impl_.robot_id_ = new ::RobotId(*from._impl_.robot_id_);
  }
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::Vector2(*from._impl_.pos_);
  }
  if (from._internal_has_vel()) {
    _this->_impl_.vel_ = new ::Vector2(*from._impl_.vel_);
  }
  ::memcpy(&_impl_.orientation_, &from._impl_.orientation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.visibility_) -
    reinterpret_cast<char*>(&_impl_.orientation_)) + sizeof(_impl_.visibility_));
  // @@protoc_insertion_point(copy_constructor:TrackedRobot)
}

inline void TrackedRobot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robot_id_){nullptr}
    , decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.vel_){nullptr}
    , decltype(_impl_.orientation_){0}
    , decltype(_impl_.vel_angular_){0}
    , decltype(_impl_.visibility_){0}
  };
}

TrackedRobot::~TrackedRobot() {
  // @@protoc_insertion_point(destructor:TrackedRobot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedRobot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.robot_id_;
  if (this != internal_default_instance()) delete _impl_.pos_;
  if (this != internal_default_instance()) delete _impl_.vel_;
}

void TrackedRobot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedRobot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.robot_id_ != nullptr);
      _impl_.robot_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.pos_ != nullptr);
      _impl_.pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.vel_ != nullptr);
      _impl_.vel_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.visibility_) -
        reinterpret_cast<char*>(&_impl_.orientation_)) + sizeof(_impl_.visibility_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedRobot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .RobotId robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_robot_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Vector2 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_orientation(&has_bits);
          _impl_.orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .Vector2 vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float vel_angular = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_vel_angular(&has_bits);
          _impl_.vel_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float visibility = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_visibility(&has_bits);
          _impl_.visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedRobot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackedRobot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .RobotId robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::robot_id(this),
        _Internal::robot_id(this).GetCachedSize(), target, stream);
  }

  // required .Vector2 pos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // required float orientation = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_orientation(), target);
  }

  // optional .Vector2 vel = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vel(this),
        _Internal::vel(this).GetCachedSize(), target, stream);
  }

  // optional float vel_angular = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_vel_angular(), target);
  }

  // optional float visibility = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedRobot)
  return target;
}

size_t TrackedRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TrackedRobot)
  size_t total_size = 0;

  if (_internal_has_robot_id()) {
    // required .RobotId robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.robot_id_);
  }

  if (_internal_has_pos()) {
    // required .Vector2 pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  if (_internal_has_orientation()) {
    // required float orientation = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TrackedRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedRobot)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .RobotId robot_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.robot_id_);

    // required .Vector2 pos = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);

    // required float orientation = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Vector2 vel = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vel_);
  }

  if (cached_has_bits & 0x00000030u) {
    // optional float vel_angular = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float visibility = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedRobot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedRobot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedRobot::GetClassData() const { return &_class_data_; }


void TrackedRobot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedRobot*>(&to_msg);
  auto& from = static_cast<const TrackedRobot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TrackedRobot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_robot_id()->::RobotId::MergeFrom(
          from._internal_robot_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_pos()->::Vector2::MergeFrom(
          from._internal_pos());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_vel()->::Vector2::MergeFrom(
          from._internal_vel());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.orientation_ = from._impl_.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.vel_angular_ = from._impl_.vel_angular_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.visibility_ = from._impl_.visibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedRobot::CopyFrom(const TrackedRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedRobot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_pos()) {
    if (!_impl_.pos_->IsInitialized()) return false;
  }
  if (_internal_has_vel()) {
    if (!_impl_.vel_->IsInitialized()) return false;
  }
  return true;
}

void TrackedRobot::InternalSwap(TrackedRobot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedRobot, _impl_.visibility_)
      + sizeof(TrackedRobot::_impl_.visibility_)
      - PROTOBUF_FIELD_OFFSET(TrackedRobot, _impl_.robot_id_)>(
          reinterpret_cast<char*>(&_impl_.robot_id_),
          reinterpret_cast<char*>(&other->_impl_.robot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedRobot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto[2]);
}

// ===================================================================

class TrackedFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedFrame>()._impl_._has_bits_);
  static void set_has_frame_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::KickedBall& kicked_ball(const TrackedFrame* msg);
  static void set_has_kicked_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::KickedBall&
TrackedFrame::_Internal::kicked_ball(const TrackedFrame* msg) {
  return *msg->_impl_.kicked_ball_;
}
TrackedFrame::TrackedFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TrackedFrame)
}
TrackedFrame::TrackedFrame(const TrackedFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balls_){from._impl_.balls_}
    , decltype(_impl_.robots_){from._impl_.robots_}
    , decltype(_impl_.capabilities_){from._impl_.capabilities_}
    , decltype(_impl_.kicked_ball_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.frame_number_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kicked_ball()) {
    _this->_impl_.kicked_ball_ = new ::KickedBall(*from._impl_.kicked_ball_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.frame_number_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frame_number_));
  // @@protoc_insertion_point(copy_constructor:TrackedFrame)
}

inline void TrackedFrame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.balls_){arena}
    , decltype(_impl_.robots_){arena}
    , decltype(_impl_.capabilities_){arena}
    , decltype(_impl_.kicked_ball_){nullptr}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.frame_number_){0u}
  };
}

TrackedFrame::~TrackedFrame() {
  // @@protoc_insertion_point(destructor:TrackedFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.balls_.~RepeatedPtrField();
  _impl_.robots_.~RepeatedPtrField();
  _impl_.capabilities_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.kicked_ball_;
}

void TrackedFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackedFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.balls_.Clear();
  _impl_.robots_.Clear();
  _impl_.capabilities_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.kicked_ball_ != nullptr);
    _impl_.kicked_ball_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.frame_number_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.frame_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 frame_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_number(&has_bits);
          _impl_.frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .TrackedBall balls = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_balls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TrackedRobot robots = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .KickedBall kicked_ball = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_kicked_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .Capability capabilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::Capability_IsValid(val))) {
              _internal_add_capabilities(static_cast<::Capability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_capabilities(), ptr, ctx, ::Capability_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackedFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 frame_number = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_frame_number(), target);
  }

  // required double timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_timestamp(), target);
  }

  // repeated .TrackedBall balls = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_balls_size()); i < n; i++) {
    const auto& repfield = this->_internal_balls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TrackedRobot robots = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robots_size()); i < n; i++) {
    const auto& repfield = this->_internal_robots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .KickedBall kicked_ball = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::kicked_ball(this),
        _Internal::kicked_ball(this).GetCachedSize(), target, stream);
  }

  // repeated .Capability capabilities = 6;
  for (int i = 0, n = this->_internal_capabilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_capabilities(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackedFrame)
  return target;
}

size_t TrackedFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TrackedFrame)
  size_t total_size = 0;

  if (_internal_has_timestamp()) {
    // required double timestamp = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());
  }

  return total_size;
}
size_t TrackedFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrackedFrame)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required double timestamp = 2;
    total_size += 1 + 8;

    // required uint32 frame_number = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TrackedBall balls = 3;
  total_size += 1UL * this->_internal_balls_size();
  for (const auto& msg : this->_impl_.balls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TrackedRobot robots = 4;
  total_size += 1UL * this->_internal_robots_size();
  for (const auto& msg : this->_impl_.robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Capability capabilities = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_capabilities(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional .KickedBall kicked_ball = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kicked_ball_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedFrame::GetClassData() const { return &_class_data_; }


void TrackedFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedFrame*>(&to_msg);
  auto& from = static_cast<const TrackedFrame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TrackedFrame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.balls_.MergeFrom(from._impl_.balls_);
  _this->_impl_.robots_.MergeFrom(from._impl_.robots_);
  _this->_impl_.capabilities_.MergeFrom(from._impl_.capabilities_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_kicked_ball()->::KickedBall::MergeFrom(
          from._internal_kicked_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedFrame::CopyFrom(const TrackedFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackedFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.balls_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.robots_))
    return false;
  if (_internal_has_kicked_ball()) {
    if (!_impl_.kicked_ball_->IsInitialized()) return false;
  }
  return true;
}

void TrackedFrame::InternalSwap(TrackedFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.balls_.InternalSwap(&other->_impl_.balls_);
  _impl_.robots_.InternalSwap(&other->_impl_.robots_);
  _impl_.capabilities_.InternalSwap(&other->_impl_.capabilities_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedFrame, _impl_.frame_number_)
      + sizeof(TrackedFrame::_impl_.frame_number_)
      - PROTOBUF_FIELD_OFFSET(TrackedFrame, _impl_.kicked_ball_)>(
          reinterpret_cast<char*>(&_impl_.kicked_ball_),
          reinterpret_cast<char*>(&other->_impl_.kicked_ball_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_getter, &descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto_once,
      file_level_metadata_ssl_5fvision_5fdetection_5ftracked_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TrackedBall*
Arena::CreateMaybeMessage< ::TrackedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::KickedBall*
Arena::CreateMaybeMessage< ::KickedBall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KickedBall >(arena);
}
template<> PROTOBUF_NOINLINE ::TrackedRobot*
Arena::CreateMaybeMessage< ::TrackedRobot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackedRobot >(arena);
}
template<> PROTOBUF_NOINLINE ::TrackedFrame*
Arena::CreateMaybeMessage< ::TrackedFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrackedFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
