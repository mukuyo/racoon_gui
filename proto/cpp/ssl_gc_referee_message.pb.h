// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_referee_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5freferee_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5freferee_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_game_event.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fgc_5freferee_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto;
class GameEventProposalGroup;
struct GameEventProposalGroupDefaultTypeInternal;
extern GameEventProposalGroupDefaultTypeInternal _GameEventProposalGroup_default_instance_;
class Referee;
struct RefereeDefaultTypeInternal;
extern RefereeDefaultTypeInternal _Referee_default_instance_;
class Referee_Point;
struct Referee_PointDefaultTypeInternal;
extern Referee_PointDefaultTypeInternal _Referee_Point_default_instance_;
class Referee_TeamInfo;
struct Referee_TeamInfoDefaultTypeInternal;
extern Referee_TeamInfoDefaultTypeInternal _Referee_TeamInfo_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GameEventProposalGroup* Arena::CreateMaybeMessage<::GameEventProposalGroup>(Arena*);
template<> ::Referee* Arena::CreateMaybeMessage<::Referee>(Arena*);
template<> ::Referee_Point* Arena::CreateMaybeMessage<::Referee_Point>(Arena*);
template<> ::Referee_TeamInfo* Arena::CreateMaybeMessage<::Referee_TeamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Referee_Stage : int {
  Referee_Stage_NORMAL_FIRST_HALF_PRE = 0,
  Referee_Stage_NORMAL_FIRST_HALF = 1,
  Referee_Stage_NORMAL_HALF_TIME = 2,
  Referee_Stage_NORMAL_SECOND_HALF_PRE = 3,
  Referee_Stage_NORMAL_SECOND_HALF = 4,
  Referee_Stage_EXTRA_TIME_BREAK = 5,
  Referee_Stage_EXTRA_FIRST_HALF_PRE = 6,
  Referee_Stage_EXTRA_FIRST_HALF = 7,
  Referee_Stage_EXTRA_HALF_TIME = 8,
  Referee_Stage_EXTRA_SECOND_HALF_PRE = 9,
  Referee_Stage_EXTRA_SECOND_HALF = 10,
  Referee_Stage_PENALTY_SHOOTOUT_BREAK = 11,
  Referee_Stage_PENALTY_SHOOTOUT = 12,
  Referee_Stage_POST_GAME = 13
};
bool Referee_Stage_IsValid(int value);
constexpr Referee_Stage Referee_Stage_Stage_MIN = Referee_Stage_NORMAL_FIRST_HALF_PRE;
constexpr Referee_Stage Referee_Stage_Stage_MAX = Referee_Stage_POST_GAME;
constexpr int Referee_Stage_Stage_ARRAYSIZE = Referee_Stage_Stage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Stage_descriptor();
template<typename T>
inline const std::string& Referee_Stage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Referee_Stage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Referee_Stage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Referee_Stage_descriptor(), enum_t_value);
}
inline bool Referee_Stage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Referee_Stage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Referee_Stage>(
    Referee_Stage_descriptor(), name, value);
}
enum Referee_Command : int {
  Referee_Command_HALT = 0,
  Referee_Command_STOP = 1,
  Referee_Command_NORMAL_START = 2,
  Referee_Command_FORCE_START = 3,
  Referee_Command_PREPARE_KICKOFF_YELLOW = 4,
  Referee_Command_PREPARE_KICKOFF_BLUE = 5,
  Referee_Command_PREPARE_PENALTY_YELLOW = 6,
  Referee_Command_PREPARE_PENALTY_BLUE = 7,
  Referee_Command_DIRECT_FREE_YELLOW = 8,
  Referee_Command_DIRECT_FREE_BLUE = 9,
  Referee_Command_INDIRECT_FREE_YELLOW = 10,
  Referee_Command_INDIRECT_FREE_BLUE = 11,
  Referee_Command_TIMEOUT_YELLOW = 12,
  Referee_Command_TIMEOUT_BLUE = 13,
  Referee_Command_GOAL_YELLOW PROTOBUF_DEPRECATED_ENUM = 14,
  Referee_Command_GOAL_BLUE PROTOBUF_DEPRECATED_ENUM = 15,
  Referee_Command_BALL_PLACEMENT_YELLOW = 16,
  Referee_Command_BALL_PLACEMENT_BLUE = 17
};
bool Referee_Command_IsValid(int value);
constexpr Referee_Command Referee_Command_Command_MIN = Referee_Command_HALT;
constexpr Referee_Command Referee_Command_Command_MAX = Referee_Command_BALL_PLACEMENT_BLUE;
constexpr int Referee_Command_Command_ARRAYSIZE = Referee_Command_Command_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Command_descriptor();
template<typename T>
inline const std::string& Referee_Command_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Referee_Command>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Referee_Command_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Referee_Command_descriptor(), enum_t_value);
}
inline bool Referee_Command_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Referee_Command* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Referee_Command>(
    Referee_Command_descriptor(), name, value);
}
enum MatchType : int {
  UNKNOWN_MATCH = 0,
  GROUP_PHASE = 1,
  ELIMINATION_PHASE = 2,
  FRIENDLY = 3
};
bool MatchType_IsValid(int value);
constexpr MatchType MatchType_MIN = UNKNOWN_MATCH;
constexpr MatchType MatchType_MAX = FRIENDLY;
constexpr int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor();
template<typename T>
inline const std::string& MatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchType_descriptor(), enum_t_value);
}
inline bool MatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
// ===================================================================

class Referee_TeamInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Referee.TeamInfo) */ {
 public:
  inline Referee_TeamInfo() : Referee_TeamInfo(nullptr) {}
  ~Referee_TeamInfo() override;
  explicit PROTOBUF_CONSTEXPR Referee_TeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Referee_TeamInfo(const Referee_TeamInfo& from);
  Referee_TeamInfo(Referee_TeamInfo&& from) noexcept
    : Referee_TeamInfo() {
    *this = ::std::move(from);
  }

  inline Referee_TeamInfo& operator=(const Referee_TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee_TeamInfo& operator=(Referee_TeamInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Referee_TeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const Referee_TeamInfo* internal_default_instance() {
    return reinterpret_cast<const Referee_TeamInfo*>(
               &_Referee_TeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Referee_TeamInfo& a, Referee_TeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(Referee_TeamInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee_TeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Referee_TeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Referee_TeamInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Referee_TeamInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Referee_TeamInfo& from) {
    Referee_TeamInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Referee_TeamInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Referee.TeamInfo";
  }
  protected:
  explicit Referee_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYellowCardTimesFieldNumber = 4,
    kNameFieldNumber = 1,
    kScoreFieldNumber = 2,
    kRedCardsFieldNumber = 3,
    kYellowCardsFieldNumber = 5,
    kTimeoutsFieldNumber = 6,
    kTimeoutTimeFieldNumber = 7,
    kGoalkeeperFieldNumber = 8,
    kFoulCounterFieldNumber = 9,
    kBallPlacementFailuresFieldNumber = 10,
    kMaxAllowedBotsFieldNumber = 13,
    kCanPlaceBallFieldNumber = 12,
    kBotSubstitutionIntentFieldNumber = 14,
    kBallPlacementFailuresReachedFieldNumber = 15,
  };
  // repeated uint32 yellow_card_times = 4 [packed = true];
  int yellow_card_times_size() const;
  private:
  int _internal_yellow_card_times_size() const;
  public:
  void clear_yellow_card_times();
  private:
  uint32_t _internal_yellow_card_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_yellow_card_times() const;
  void _internal_add_yellow_card_times(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_yellow_card_times();
  public:
  uint32_t yellow_card_times(int index) const;
  void set_yellow_card_times(int index, uint32_t value);
  void add_yellow_card_times(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      yellow_card_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_yellow_card_times();

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required uint32 score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // required uint32 red_cards = 3;
  bool has_red_cards() const;
  private:
  bool _internal_has_red_cards() const;
  public:
  void clear_red_cards();
  uint32_t red_cards() const;
  void set_red_cards(uint32_t value);
  private:
  uint32_t _internal_red_cards() const;
  void _internal_set_red_cards(uint32_t value);
  public:

  // required uint32 yellow_cards = 5;
  bool has_yellow_cards() const;
  private:
  bool _internal_has_yellow_cards() const;
  public:
  void clear_yellow_cards();
  uint32_t yellow_cards() const;
  void set_yellow_cards(uint32_t value);
  private:
  uint32_t _internal_yellow_cards() const;
  void _internal_set_yellow_cards(uint32_t value);
  public:

  // required uint32 timeouts = 6;
  bool has_timeouts() const;
  private:
  bool _internal_has_timeouts() const;
  public:
  void clear_timeouts();
  uint32_t timeouts() const;
  void set_timeouts(uint32_t value);
  private:
  uint32_t _internal_timeouts() const;
  void _internal_set_timeouts(uint32_t value);
  public:

  // required uint32 timeout_time = 7;
  bool has_timeout_time() const;
  private:
  bool _internal_has_timeout_time() const;
  public:
  void clear_timeout_time();
  uint32_t timeout_time() const;
  void set_timeout_time(uint32_t value);
  private:
  uint32_t _internal_timeout_time() const;
  void _internal_set_timeout_time(uint32_t value);
  public:

  // required uint32 goalkeeper = 8;
  bool has_goalkeeper() const;
  private:
  bool _internal_has_goalkeeper() const;
  public:
  void clear_goalkeeper();
  uint32_t goalkeeper() const;
  void set_goalkeeper(uint32_t value);
  private:
  uint32_t _internal_goalkeeper() const;
  void _internal_set_goalkeeper(uint32_t value);
  public:

  // optional uint32 foul_counter = 9;
  bool has_foul_counter() const;
  private:
  bool _internal_has_foul_counter() const;
  public:
  void clear_foul_counter();
  uint32_t foul_counter() const;
  void set_foul_counter(uint32_t value);
  private:
  uint32_t _internal_foul_counter() const;
  void _internal_set_foul_counter(uint32_t value);
  public:

  // optional uint32 ball_placement_failures = 10;
  bool has_ball_placement_failures() const;
  private:
  bool _internal_has_ball_placement_failures() const;
  public:
  void clear_ball_placement_failures();
  uint32_t ball_placement_failures() const;
  void set_ball_placement_failures(uint32_t value);
  private:
  uint32_t _internal_ball_placement_failures() const;
  void _internal_set_ball_placement_failures(uint32_t value);
  public:

  // optional uint32 max_allowed_bots = 13;
  bool has_max_allowed_bots() const;
  private:
  bool _internal_has_max_allowed_bots() const;
  public:
  void clear_max_allowed_bots();
  uint32_t max_allowed_bots() const;
  void set_max_allowed_bots(uint32_t value);
  private:
  uint32_t _internal_max_allowed_bots() const;
  void _internal_set_max_allowed_bots(uint32_t value);
  public:

  // optional bool can_place_ball = 12;
  bool has_can_place_ball() const;
  private:
  bool _internal_has_can_place_ball() const;
  public:
  void clear_can_place_ball();
  bool can_place_ball() const;
  void set_can_place_ball(bool value);
  private:
  bool _internal_can_place_ball() const;
  void _internal_set_can_place_ball(bool value);
  public:

  // optional bool bot_substitution_intent = 14;
  bool has_bot_substitution_intent() const;
  private:
  bool _internal_has_bot_substitution_intent() const;
  public:
  void clear_bot_substitution_intent();
  bool bot_substitution_intent() const;
  void set_bot_substitution_intent(bool value);
  private:
  bool _internal_bot_substitution_intent() const;
  void _internal_set_bot_substitution_intent(bool value);
  public:

  // optional bool ball_placement_failures_reached = 15;
  bool has_ball_placement_failures_reached() const;
  private:
  bool _internal_has_ball_placement_failures_reached() const;
  public:
  void clear_ball_placement_failures_reached();
  bool ball_placement_failures_reached() const;
  void set_ball_placement_failures_reached(bool value);
  private:
  bool _internal_ball_placement_failures_reached() const;
  void _internal_set_ball_placement_failures_reached(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Referee.TeamInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > yellow_card_times_;
    mutable std::atomic<int> _yellow_card_times_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t score_;
    uint32_t red_cards_;
    uint32_t yellow_cards_;
    uint32_t timeouts_;
    uint32_t timeout_time_;
    uint32_t goalkeeper_;
    uint32_t foul_counter_;
    uint32_t ball_placement_failures_;
    uint32_t max_allowed_bots_;
    bool can_place_ball_;
    bool bot_substitution_intent_;
    bool ball_placement_failures_reached_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Referee_Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Referee.Point) */ {
 public:
  inline Referee_Point() : Referee_Point(nullptr) {}
  ~Referee_Point() override;
  explicit PROTOBUF_CONSTEXPR Referee_Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Referee_Point(const Referee_Point& from);
  Referee_Point(Referee_Point&& from) noexcept
    : Referee_Point() {
    *this = ::std::move(from);
  }

  inline Referee_Point& operator=(const Referee_Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee_Point& operator=(Referee_Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Referee_Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Referee_Point* internal_default_instance() {
    return reinterpret_cast<const Referee_Point*>(
               &_Referee_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Referee_Point& a, Referee_Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Referee_Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee_Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Referee_Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Referee_Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Referee_Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Referee_Point& from) {
    Referee_Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Referee_Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Referee.Point";
  }
  protected:
  explicit Referee_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Referee.Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Referee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Referee) */ {
 public:
  inline Referee() : Referee(nullptr) {}
  ~Referee() override;
  explicit PROTOBUF_CONSTEXPR Referee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Referee(const Referee& from);
  Referee(Referee&& from) noexcept
    : Referee() {
    *this = ::std::move(from);
  }

  inline Referee& operator=(const Referee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Referee& operator=(Referee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Referee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Referee* internal_default_instance() {
    return reinterpret_cast<const Referee*>(
               &_Referee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Referee& a, Referee& b) {
    a.Swap(&b);
  }
  inline void Swap(Referee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Referee* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Referee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Referee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Referee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Referee& from) {
    Referee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Referee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Referee";
  }
  protected:
  explicit Referee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Referee_TeamInfo TeamInfo;
  typedef Referee_Point Point;

  typedef Referee_Stage Stage;
  static constexpr Stage NORMAL_FIRST_HALF_PRE =
    Referee_Stage_NORMAL_FIRST_HALF_PRE;
  static constexpr Stage NORMAL_FIRST_HALF =
    Referee_Stage_NORMAL_FIRST_HALF;
  static constexpr Stage NORMAL_HALF_TIME =
    Referee_Stage_NORMAL_HALF_TIME;
  static constexpr Stage NORMAL_SECOND_HALF_PRE =
    Referee_Stage_NORMAL_SECOND_HALF_PRE;
  static constexpr Stage NORMAL_SECOND_HALF =
    Referee_Stage_NORMAL_SECOND_HALF;
  static constexpr Stage EXTRA_TIME_BREAK =
    Referee_Stage_EXTRA_TIME_BREAK;
  static constexpr Stage EXTRA_FIRST_HALF_PRE =
    Referee_Stage_EXTRA_FIRST_HALF_PRE;
  static constexpr Stage EXTRA_FIRST_HALF =
    Referee_Stage_EXTRA_FIRST_HALF;
  static constexpr Stage EXTRA_HALF_TIME =
    Referee_Stage_EXTRA_HALF_TIME;
  static constexpr Stage EXTRA_SECOND_HALF_PRE =
    Referee_Stage_EXTRA_SECOND_HALF_PRE;
  static constexpr Stage EXTRA_SECOND_HALF =
    Referee_Stage_EXTRA_SECOND_HALF;
  static constexpr Stage PENALTY_SHOOTOUT_BREAK =
    Referee_Stage_PENALTY_SHOOTOUT_BREAK;
  static constexpr Stage PENALTY_SHOOTOUT =
    Referee_Stage_PENALTY_SHOOTOUT;
  static constexpr Stage POST_GAME =
    Referee_Stage_POST_GAME;
  static inline bool Stage_IsValid(int value) {
    return Referee_Stage_IsValid(value);
  }
  static constexpr Stage Stage_MIN =
    Referee_Stage_Stage_MIN;
  static constexpr Stage Stage_MAX =
    Referee_Stage_Stage_MAX;
  static constexpr int Stage_ARRAYSIZE =
    Referee_Stage_Stage_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Stage_descriptor() {
    return Referee_Stage_descriptor();
  }
  template<typename T>
  static inline const std::string& Stage_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Stage>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Stage_Name.");
    return Referee_Stage_Name(enum_t_value);
  }
  static inline bool Stage_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Stage* value) {
    return Referee_Stage_Parse(name, value);
  }

  typedef Referee_Command Command;
  static constexpr Command HALT =
    Referee_Command_HALT;
  static constexpr Command STOP =
    Referee_Command_STOP;
  static constexpr Command NORMAL_START =
    Referee_Command_NORMAL_START;
  static constexpr Command FORCE_START =
    Referee_Command_FORCE_START;
  static constexpr Command PREPARE_KICKOFF_YELLOW =
    Referee_Command_PREPARE_KICKOFF_YELLOW;
  static constexpr Command PREPARE_KICKOFF_BLUE =
    Referee_Command_PREPARE_KICKOFF_BLUE;
  static constexpr Command PREPARE_PENALTY_YELLOW =
    Referee_Command_PREPARE_PENALTY_YELLOW;
  static constexpr Command PREPARE_PENALTY_BLUE =
    Referee_Command_PREPARE_PENALTY_BLUE;
  static constexpr Command DIRECT_FREE_YELLOW =
    Referee_Command_DIRECT_FREE_YELLOW;
  static constexpr Command DIRECT_FREE_BLUE =
    Referee_Command_DIRECT_FREE_BLUE;
  static constexpr Command INDIRECT_FREE_YELLOW =
    Referee_Command_INDIRECT_FREE_YELLOW;
  static constexpr Command INDIRECT_FREE_BLUE =
    Referee_Command_INDIRECT_FREE_BLUE;
  static constexpr Command TIMEOUT_YELLOW =
    Referee_Command_TIMEOUT_YELLOW;
  static constexpr Command TIMEOUT_BLUE =
    Referee_Command_TIMEOUT_BLUE;
  PROTOBUF_DEPRECATED_ENUM static constexpr Command GOAL_YELLOW =
    Referee_Command_GOAL_YELLOW;
  PROTOBUF_DEPRECATED_ENUM static constexpr Command GOAL_BLUE =
    Referee_Command_GOAL_BLUE;
  static constexpr Command BALL_PLACEMENT_YELLOW =
    Referee_Command_BALL_PLACEMENT_YELLOW;
  static constexpr Command BALL_PLACEMENT_BLUE =
    Referee_Command_BALL_PLACEMENT_BLUE;
  static inline bool Command_IsValid(int value) {
    return Referee_Command_IsValid(value);
  }
  static constexpr Command Command_MIN =
    Referee_Command_Command_MIN;
  static constexpr Command Command_MAX =
    Referee_Command_Command_MAX;
  static constexpr int Command_ARRAYSIZE =
    Referee_Command_Command_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Command_descriptor() {
    return Referee_Command_descriptor();
  }
  template<typename T>
  static inline const std::string& Command_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Command>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Command_Name.");
    return Referee_Command_Name(enum_t_value);
  }
  static inline bool Command_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Command* value) {
    return Referee_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventsFieldNumber = 16,
    kGameEventProposalsFieldNumber = 17,
    kSourceIdentifierFieldNumber = 18,
    kYellowFieldNumber = 7,
    kBlueFieldNumber = 8,
    kDesignatedPositionFieldNumber = 9,
    kPacketTimestampFieldNumber = 1,
    kStageFieldNumber = 2,
    kStageTimeLeftFieldNumber = 3,
    kCommandFieldNumber = 4,
    kCommandCounterFieldNumber = 5,
    kCommandTimestampFieldNumber = 6,
    kBlueTeamOnPositiveHalfFieldNumber = 10,
    kNextCommandFieldNumber = 12,
    kCurrentActionTimeRemainingFieldNumber = 15,
    kMatchTypeFieldNumber = 19,
  };
  // repeated .GameEvent game_events = 16;
  int game_events_size() const;
  private:
  int _internal_game_events_size() const;
  public:
  void clear_game_events();
  ::GameEvent* mutable_game_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
      mutable_game_events();
  private:
  const ::GameEvent& _internal_game_events(int index) const;
  ::GameEvent* _internal_add_game_events();
  public:
  const ::GameEvent& game_events(int index) const;
  ::GameEvent* add_game_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
      game_events() const;

  // repeated .GameEventProposalGroup game_event_proposals = 17;
  int game_event_proposals_size() const;
  private:
  int _internal_game_event_proposals_size() const;
  public:
  void clear_game_event_proposals();
  ::GameEventProposalGroup* mutable_game_event_proposals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEventProposalGroup >*
      mutable_game_event_proposals();
  private:
  const ::GameEventProposalGroup& _internal_game_event_proposals(int index) const;
  ::GameEventProposalGroup* _internal_add_game_event_proposals();
  public:
  const ::GameEventProposalGroup& game_event_proposals(int index) const;
  ::GameEventProposalGroup* add_game_event_proposals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEventProposalGroup >&
      game_event_proposals() const;

  // optional string source_identifier = 18;
  bool has_source_identifier() const;
  private:
  bool _internal_has_source_identifier() const;
  public:
  void clear_source_identifier();
  const std::string& source_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_identifier();
  PROTOBUF_NODISCARD std::string* release_source_identifier();
  void set_allocated_source_identifier(std::string* source_identifier);
  private:
  const std::string& _internal_source_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source_identifier(const std::string& value);
  std::string* _internal_mutable_source_identifier();
  public:

  // required .Referee.TeamInfo yellow = 7;
  bool has_yellow() const;
  private:
  bool _internal_has_yellow() const;
  public:
  void clear_yellow();
  const ::Referee_TeamInfo& yellow() const;
  PROTOBUF_NODISCARD ::Referee_TeamInfo* release_yellow();
  ::Referee_TeamInfo* mutable_yellow();
  void set_allocated_yellow(::Referee_TeamInfo* yellow);
  private:
  const ::Referee_TeamInfo& _internal_yellow() const;
  ::Referee_TeamInfo* _internal_mutable_yellow();
  public:
  void unsafe_arena_set_allocated_yellow(
      ::Referee_TeamInfo* yellow);
  ::Referee_TeamInfo* unsafe_arena_release_yellow();

  // required .Referee.TeamInfo blue = 8;
  bool has_blue() const;
  private:
  bool _internal_has_blue() const;
  public:
  void clear_blue();
  const ::Referee_TeamInfo& blue() const;
  PROTOBUF_NODISCARD ::Referee_TeamInfo* release_blue();
  ::Referee_TeamInfo* mutable_blue();
  void set_allocated_blue(::Referee_TeamInfo* blue);
  private:
  const ::Referee_TeamInfo& _internal_blue() const;
  ::Referee_TeamInfo* _internal_mutable_blue();
  public:
  void unsafe_arena_set_allocated_blue(
      ::Referee_TeamInfo* blue);
  ::Referee_TeamInfo* unsafe_arena_release_blue();

  // optional .Referee.Point designated_position = 9;
  bool has_designated_position() const;
  private:
  bool _internal_has_designated_position() const;
  public:
  void clear_designated_position();
  const ::Referee_Point& designated_position() const;
  PROTOBUF_NODISCARD ::Referee_Point* release_designated_position();
  ::Referee_Point* mutable_designated_position();
  void set_allocated_designated_position(::Referee_Point* designated_position);
  private:
  const ::Referee_Point& _internal_designated_position() const;
  ::Referee_Point* _internal_mutable_designated_position();
  public:
  void unsafe_arena_set_allocated_designated_position(
      ::Referee_Point* designated_position);
  ::Referee_Point* unsafe_arena_release_designated_position();

  // required uint64 packet_timestamp = 1;
  bool has_packet_timestamp() const;
  private:
  bool _internal_has_packet_timestamp() const;
  public:
  void clear_packet_timestamp();
  uint64_t packet_timestamp() const;
  void set_packet_timestamp(uint64_t value);
  private:
  uint64_t _internal_packet_timestamp() const;
  void _internal_set_packet_timestamp(uint64_t value);
  public:

  // required .Referee.Stage stage = 2;
  bool has_stage() const;
  private:
  bool _internal_has_stage() const;
  public:
  void clear_stage();
  ::Referee_Stage stage() const;
  void set_stage(::Referee_Stage value);
  private:
  ::Referee_Stage _internal_stage() const;
  void _internal_set_stage(::Referee_Stage value);
  public:

  // optional sint32 stage_time_left = 3;
  bool has_stage_time_left() const;
  private:
  bool _internal_has_stage_time_left() const;
  public:
  void clear_stage_time_left();
  int32_t stage_time_left() const;
  void set_stage_time_left(int32_t value);
  private:
  int32_t _internal_stage_time_left() const;
  void _internal_set_stage_time_left(int32_t value);
  public:

  // required .Referee.Command command = 4;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  ::Referee_Command command() const;
  void set_command(::Referee_Command value);
  private:
  ::Referee_Command _internal_command() const;
  void _internal_set_command(::Referee_Command value);
  public:

  // required uint32 command_counter = 5;
  bool has_command_counter() const;
  private:
  bool _internal_has_command_counter() const;
  public:
  void clear_command_counter();
  uint32_t command_counter() const;
  void set_command_counter(uint32_t value);
  private:
  uint32_t _internal_command_counter() const;
  void _internal_set_command_counter(uint32_t value);
  public:

  // required uint64 command_timestamp = 6;
  bool has_command_timestamp() const;
  private:
  bool _internal_has_command_timestamp() const;
  public:
  void clear_command_timestamp();
  uint64_t command_timestamp() const;
  void set_command_timestamp(uint64_t value);
  private:
  uint64_t _internal_command_timestamp() const;
  void _internal_set_command_timestamp(uint64_t value);
  public:

  // optional bool blue_team_on_positive_half = 10;
  bool has_blue_team_on_positive_half() const;
  private:
  bool _internal_has_blue_team_on_positive_half() const;
  public:
  void clear_blue_team_on_positive_half();
  bool blue_team_on_positive_half() const;
  void set_blue_team_on_positive_half(bool value);
  private:
  bool _internal_blue_team_on_positive_half() const;
  void _internal_set_blue_team_on_positive_half(bool value);
  public:

  // optional .Referee.Command next_command = 12;
  bool has_next_command() const;
  private:
  bool _internal_has_next_command() const;
  public:
  void clear_next_command();
  ::Referee_Command next_command() const;
  void set_next_command(::Referee_Command value);
  private:
  ::Referee_Command _internal_next_command() const;
  void _internal_set_next_command(::Referee_Command value);
  public:

  // optional int32 current_action_time_remaining = 15;
  bool has_current_action_time_remaining() const;
  private:
  bool _internal_has_current_action_time_remaining() const;
  public:
  void clear_current_action_time_remaining();
  int32_t current_action_time_remaining() const;
  void set_current_action_time_remaining(int32_t value);
  private:
  int32_t _internal_current_action_time_remaining() const;
  void _internal_set_current_action_time_remaining(int32_t value);
  public:

  // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // @@protoc_insertion_point(class_scope:Referee)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent > game_events_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEventProposalGroup > game_event_proposals_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_identifier_;
    ::Referee_TeamInfo* yellow_;
    ::Referee_TeamInfo* blue_;
    ::Referee_Point* designated_position_;
    uint64_t packet_timestamp_;
    int stage_;
    int32_t stage_time_left_;
    int command_;
    uint32_t command_counter_;
    uint64_t command_timestamp_;
    bool blue_team_on_positive_half_;
    int next_command_;
    int32_t current_action_time_remaining_;
    int match_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class GameEventProposalGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GameEventProposalGroup) */ {
 public:
  inline GameEventProposalGroup() : GameEventProposalGroup(nullptr) {}
  ~GameEventProposalGroup() override;
  explicit PROTOBUF_CONSTEXPR GameEventProposalGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameEventProposalGroup(const GameEventProposalGroup& from);
  GameEventProposalGroup(GameEventProposalGroup&& from) noexcept
    : GameEventProposalGroup() {
    *this = ::std::move(from);
  }

  inline GameEventProposalGroup& operator=(const GameEventProposalGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEventProposalGroup& operator=(GameEventProposalGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEventProposalGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEventProposalGroup* internal_default_instance() {
    return reinterpret_cast<const GameEventProposalGroup*>(
               &_GameEventProposalGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameEventProposalGroup& a, GameEventProposalGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(GameEventProposalGroup* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEventProposalGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEventProposalGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameEventProposalGroup>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameEventProposalGroup& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameEventProposalGroup& from) {
    GameEventProposalGroup::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEventProposalGroup* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GameEventProposalGroup";
  }
  protected:
  explicit GameEventProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameEventFieldNumber = 1,
    kAcceptedFieldNumber = 2,
  };
  // repeated .GameEvent game_event = 1;
  int game_event_size() const;
  private:
  int _internal_game_event_size() const;
  public:
  void clear_game_event();
  ::GameEvent* mutable_game_event(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
      mutable_game_event();
  private:
  const ::GameEvent& _internal_game_event(int index) const;
  ::GameEvent* _internal_add_game_event();
  public:
  const ::GameEvent& game_event(int index) const;
  ::GameEvent* add_game_event();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
      game_event() const;

  // optional bool accepted = 2;
  bool has_accepted() const;
  private:
  bool _internal_has_accepted() const;
  public:
  void clear_accepted();
  bool accepted() const;
  void set_accepted(bool value);
  private:
  bool _internal_accepted() const;
  void _internal_set_accepted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GameEventProposalGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent > game_event_;
    bool accepted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Referee_TeamInfo

// required string name = 1;
inline bool Referee_TeamInfo::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_name() const {
  return _internal_has_name();
}
inline void Referee_TeamInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Referee_TeamInfo::name() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Referee_TeamInfo::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.name)
}
inline std::string* Referee_TeamInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Referee.TeamInfo.name)
  return _s;
}
inline const std::string& Referee_TeamInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Referee_TeamInfo::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Referee_TeamInfo::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Referee_TeamInfo::release_name() {
  // @@protoc_insertion_point(field_release:Referee.TeamInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Referee_TeamInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Referee.TeamInfo.name)
}

// required uint32 score = 2;
inline bool Referee_TeamInfo::_internal_has_score() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_score() const {
  return _internal_has_score();
}
inline void Referee_TeamInfo::clear_score() {
  _impl_.score_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Referee_TeamInfo::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t Referee_TeamInfo::score() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.score)
  return _internal_score();
}
inline void Referee_TeamInfo::_internal_set_score(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.score_ = value;
}
inline void Referee_TeamInfo::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.score)
}

// required uint32 red_cards = 3;
inline bool Referee_TeamInfo::_internal_has_red_cards() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_red_cards() const {
  return _internal_has_red_cards();
}
inline void Referee_TeamInfo::clear_red_cards() {
  _impl_.red_cards_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Referee_TeamInfo::_internal_red_cards() const {
  return _impl_.red_cards_;
}
inline uint32_t Referee_TeamInfo::red_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.red_cards)
  return _internal_red_cards();
}
inline void Referee_TeamInfo::_internal_set_red_cards(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.red_cards_ = value;
}
inline void Referee_TeamInfo::set_red_cards(uint32_t value) {
  _internal_set_red_cards(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.red_cards)
}

// repeated uint32 yellow_card_times = 4 [packed = true];
inline int Referee_TeamInfo::_internal_yellow_card_times_size() const {
  return _impl_.yellow_card_times_.size();
}
inline int Referee_TeamInfo::yellow_card_times_size() const {
  return _internal_yellow_card_times_size();
}
inline void Referee_TeamInfo::clear_yellow_card_times() {
  _impl_.yellow_card_times_.Clear();
}
inline uint32_t Referee_TeamInfo::_internal_yellow_card_times(int index) const {
  return _impl_.yellow_card_times_.Get(index);
}
inline uint32_t Referee_TeamInfo::yellow_card_times(int index) const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_card_times)
  return _internal_yellow_card_times(index);
}
inline void Referee_TeamInfo::set_yellow_card_times(int index, uint32_t value) {
  _impl_.yellow_card_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_card_times)
}
inline void Referee_TeamInfo::_internal_add_yellow_card_times(uint32_t value) {
  _impl_.yellow_card_times_.Add(value);
}
inline void Referee_TeamInfo::add_yellow_card_times(uint32_t value) {
  _internal_add_yellow_card_times(value);
  // @@protoc_insertion_point(field_add:Referee.TeamInfo.yellow_card_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Referee_TeamInfo::_internal_yellow_card_times() const {
  return _impl_.yellow_card_times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Referee_TeamInfo::yellow_card_times() const {
  // @@protoc_insertion_point(field_list:Referee.TeamInfo.yellow_card_times)
  return _internal_yellow_card_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Referee_TeamInfo::_internal_mutable_yellow_card_times() {
  return &_impl_.yellow_card_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Referee_TeamInfo::mutable_yellow_card_times() {
  // @@protoc_insertion_point(field_mutable_list:Referee.TeamInfo.yellow_card_times)
  return _internal_mutable_yellow_card_times();
}

// required uint32 yellow_cards = 5;
inline bool Referee_TeamInfo::_internal_has_yellow_cards() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_yellow_cards() const {
  return _internal_has_yellow_cards();
}
inline void Referee_TeamInfo::clear_yellow_cards() {
  _impl_.yellow_cards_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Referee_TeamInfo::_internal_yellow_cards() const {
  return _impl_.yellow_cards_;
}
inline uint32_t Referee_TeamInfo::yellow_cards() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.yellow_cards)
  return _internal_yellow_cards();
}
inline void Referee_TeamInfo::_internal_set_yellow_cards(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.yellow_cards_ = value;
}
inline void Referee_TeamInfo::set_yellow_cards(uint32_t value) {
  _internal_set_yellow_cards(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.yellow_cards)
}

// required uint32 timeouts = 6;
inline bool Referee_TeamInfo::_internal_has_timeouts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_timeouts() const {
  return _internal_has_timeouts();
}
inline void Referee_TeamInfo::clear_timeouts() {
  _impl_.timeouts_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t Referee_TeamInfo::_internal_timeouts() const {
  return _impl_.timeouts_;
}
inline uint32_t Referee_TeamInfo::timeouts() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeouts)
  return _internal_timeouts();
}
inline void Referee_TeamInfo::_internal_set_timeouts(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.timeouts_ = value;
}
inline void Referee_TeamInfo::set_timeouts(uint32_t value) {
  _internal_set_timeouts(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeouts)
}

// required uint32 timeout_time = 7;
inline bool Referee_TeamInfo::_internal_has_timeout_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_timeout_time() const {
  return _internal_has_timeout_time();
}
inline void Referee_TeamInfo::clear_timeout_time() {
  _impl_.timeout_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t Referee_TeamInfo::_internal_timeout_time() const {
  return _impl_.timeout_time_;
}
inline uint32_t Referee_TeamInfo::timeout_time() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.timeout_time)
  return _internal_timeout_time();
}
inline void Referee_TeamInfo::_internal_set_timeout_time(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.timeout_time_ = value;
}
inline void Referee_TeamInfo::set_timeout_time(uint32_t value) {
  _internal_set_timeout_time(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.timeout_time)
}

// required uint32 goalkeeper = 8;
inline bool Referee_TeamInfo::_internal_has_goalkeeper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_goalkeeper() const {
  return _internal_has_goalkeeper();
}
inline void Referee_TeamInfo::clear_goalkeeper() {
  _impl_.goalkeeper_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Referee_TeamInfo::_internal_goalkeeper() const {
  return _impl_.goalkeeper_;
}
inline uint32_t Referee_TeamInfo::goalkeeper() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.goalkeeper)
  return _internal_goalkeeper();
}
inline void Referee_TeamInfo::_internal_set_goalkeeper(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.goalkeeper_ = value;
}
inline void Referee_TeamInfo::set_goalkeeper(uint32_t value) {
  _internal_set_goalkeeper(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.goalkeeper)
}

// optional uint32 foul_counter = 9;
inline bool Referee_TeamInfo::_internal_has_foul_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_foul_counter() const {
  return _internal_has_foul_counter();
}
inline void Referee_TeamInfo::clear_foul_counter() {
  _impl_.foul_counter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline uint32_t Referee_TeamInfo::_internal_foul_counter() const {
  return _impl_.foul_counter_;
}
inline uint32_t Referee_TeamInfo::foul_counter() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.foul_counter)
  return _internal_foul_counter();
}
inline void Referee_TeamInfo::_internal_set_foul_counter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.foul_counter_ = value;
}
inline void Referee_TeamInfo::set_foul_counter(uint32_t value) {
  _internal_set_foul_counter(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.foul_counter)
}

// optional uint32 ball_placement_failures = 10;
inline bool Referee_TeamInfo::_internal_has_ball_placement_failures() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_ball_placement_failures() const {
  return _internal_has_ball_placement_failures();
}
inline void Referee_TeamInfo::clear_ball_placement_failures() {
  _impl_.ball_placement_failures_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t Referee_TeamInfo::_internal_ball_placement_failures() const {
  return _impl_.ball_placement_failures_;
}
inline uint32_t Referee_TeamInfo::ball_placement_failures() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.ball_placement_failures)
  return _internal_ball_placement_failures();
}
inline void Referee_TeamInfo::_internal_set_ball_placement_failures(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.ball_placement_failures_ = value;
}
inline void Referee_TeamInfo::set_ball_placement_failures(uint32_t value) {
  _internal_set_ball_placement_failures(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.ball_placement_failures)
}

// optional bool can_place_ball = 12;
inline bool Referee_TeamInfo::_internal_has_can_place_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_can_place_ball() const {
  return _internal_has_can_place_ball();
}
inline void Referee_TeamInfo::clear_can_place_ball() {
  _impl_.can_place_ball_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Referee_TeamInfo::_internal_can_place_ball() const {
  return _impl_.can_place_ball_;
}
inline bool Referee_TeamInfo::can_place_ball() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.can_place_ball)
  return _internal_can_place_ball();
}
inline void Referee_TeamInfo::_internal_set_can_place_ball(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.can_place_ball_ = value;
}
inline void Referee_TeamInfo::set_can_place_ball(bool value) {
  _internal_set_can_place_ball(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.can_place_ball)
}

// optional uint32 max_allowed_bots = 13;
inline bool Referee_TeamInfo::_internal_has_max_allowed_bots() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_max_allowed_bots() const {
  return _internal_has_max_allowed_bots();
}
inline void Referee_TeamInfo::clear_max_allowed_bots() {
  _impl_.max_allowed_bots_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint32_t Referee_TeamInfo::_internal_max_allowed_bots() const {
  return _impl_.max_allowed_bots_;
}
inline uint32_t Referee_TeamInfo::max_allowed_bots() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.max_allowed_bots)
  return _internal_max_allowed_bots();
}
inline void Referee_TeamInfo::_internal_set_max_allowed_bots(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.max_allowed_bots_ = value;
}
inline void Referee_TeamInfo::set_max_allowed_bots(uint32_t value) {
  _internal_set_max_allowed_bots(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.max_allowed_bots)
}

// optional bool bot_substitution_intent = 14;
inline bool Referee_TeamInfo::_internal_has_bot_substitution_intent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_bot_substitution_intent() const {
  return _internal_has_bot_substitution_intent();
}
inline void Referee_TeamInfo::clear_bot_substitution_intent() {
  _impl_.bot_substitution_intent_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Referee_TeamInfo::_internal_bot_substitution_intent() const {
  return _impl_.bot_substitution_intent_;
}
inline bool Referee_TeamInfo::bot_substitution_intent() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.bot_substitution_intent)
  return _internal_bot_substitution_intent();
}
inline void Referee_TeamInfo::_internal_set_bot_substitution_intent(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.bot_substitution_intent_ = value;
}
inline void Referee_TeamInfo::set_bot_substitution_intent(bool value) {
  _internal_set_bot_substitution_intent(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.bot_substitution_intent)
}

// optional bool ball_placement_failures_reached = 15;
inline bool Referee_TeamInfo::_internal_has_ball_placement_failures_reached() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Referee_TeamInfo::has_ball_placement_failures_reached() const {
  return _internal_has_ball_placement_failures_reached();
}
inline void Referee_TeamInfo::clear_ball_placement_failures_reached() {
  _impl_.ball_placement_failures_reached_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Referee_TeamInfo::_internal_ball_placement_failures_reached() const {
  return _impl_.ball_placement_failures_reached_;
}
inline bool Referee_TeamInfo::ball_placement_failures_reached() const {
  // @@protoc_insertion_point(field_get:Referee.TeamInfo.ball_placement_failures_reached)
  return _internal_ball_placement_failures_reached();
}
inline void Referee_TeamInfo::_internal_set_ball_placement_failures_reached(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.ball_placement_failures_reached_ = value;
}
inline void Referee_TeamInfo::set_ball_placement_failures_reached(bool value) {
  _internal_set_ball_placement_failures_reached(value);
  // @@protoc_insertion_point(field_set:Referee.TeamInfo.ball_placement_failures_reached)
}

// -------------------------------------------------------------------

// Referee_Point

// required float x = 1;
inline bool Referee_Point::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Referee_Point::has_x() const {
  return _internal_has_x();
}
inline void Referee_Point::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Referee_Point::_internal_x() const {
  return _impl_.x_;
}
inline float Referee_Point::x() const {
  // @@protoc_insertion_point(field_get:Referee.Point.x)
  return _internal_x();
}
inline void Referee_Point::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Referee_Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Referee.Point.x)
}

// required float y = 2;
inline bool Referee_Point::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Referee_Point::has_y() const {
  return _internal_has_y();
}
inline void Referee_Point::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Referee_Point::_internal_y() const {
  return _impl_.y_;
}
inline float Referee_Point::y() const {
  // @@protoc_insertion_point(field_get:Referee.Point.y)
  return _internal_y();
}
inline void Referee_Point::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Referee_Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Referee.Point.y)
}

// -------------------------------------------------------------------

// Referee

// optional string source_identifier = 18;
inline bool Referee::_internal_has_source_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Referee::has_source_identifier() const {
  return _internal_has_source_identifier();
}
inline void Referee::clear_source_identifier() {
  _impl_.source_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Referee::source_identifier() const {
  // @@protoc_insertion_point(field_get:Referee.source_identifier)
  return _internal_source_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Referee::set_source_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.source_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Referee.source_identifier)
}
inline std::string* Referee::mutable_source_identifier() {
  std::string* _s = _internal_mutable_source_identifier();
  // @@protoc_insertion_point(field_mutable:Referee.source_identifier)
  return _s;
}
inline const std::string& Referee::_internal_source_identifier() const {
  return _impl_.source_identifier_.Get();
}
inline void Referee::_internal_set_source_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Referee::_internal_mutable_source_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.source_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* Referee::release_source_identifier() {
  // @@protoc_insertion_point(field_release:Referee.source_identifier)
  if (!_internal_has_source_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.source_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_identifier_.IsDefault()) {
    _impl_.source_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Referee::set_allocated_source_identifier(std::string* source_identifier) {
  if (source_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_identifier_.SetAllocated(source_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_identifier_.IsDefault()) {
    _impl_.source_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Referee.source_identifier)
}

// optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
inline bool Referee::_internal_has_match_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Referee::has_match_type() const {
  return _internal_has_match_type();
}
inline void Referee::clear_match_type() {
  _impl_.match_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::MatchType Referee::_internal_match_type() const {
  return static_cast< ::MatchType >(_impl_.match_type_);
}
inline ::MatchType Referee::match_type() const {
  // @@protoc_insertion_point(field_get:Referee.match_type)
  return _internal_match_type();
}
inline void Referee::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.match_type_ = value;
}
inline void Referee::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:Referee.match_type)
}

// required uint64 packet_timestamp = 1;
inline bool Referee::_internal_has_packet_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Referee::has_packet_timestamp() const {
  return _internal_has_packet_timestamp();
}
inline void Referee::clear_packet_timestamp() {
  _impl_.packet_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint64_t Referee::_internal_packet_timestamp() const {
  return _impl_.packet_timestamp_;
}
inline uint64_t Referee::packet_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.packet_timestamp)
  return _internal_packet_timestamp();
}
inline void Referee::_internal_set_packet_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.packet_timestamp_ = value;
}
inline void Referee::set_packet_timestamp(uint64_t value) {
  _internal_set_packet_timestamp(value);
  // @@protoc_insertion_point(field_set:Referee.packet_timestamp)
}

// required .Referee.Stage stage = 2;
inline bool Referee::_internal_has_stage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Referee::has_stage() const {
  return _internal_has_stage();
}
inline void Referee::clear_stage() {
  _impl_.stage_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::Referee_Stage Referee::_internal_stage() const {
  return static_cast< ::Referee_Stage >(_impl_.stage_);
}
inline ::Referee_Stage Referee::stage() const {
  // @@protoc_insertion_point(field_get:Referee.stage)
  return _internal_stage();
}
inline void Referee::_internal_set_stage(::Referee_Stage value) {
  assert(::Referee_Stage_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stage_ = value;
}
inline void Referee::set_stage(::Referee_Stage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:Referee.stage)
}

// optional sint32 stage_time_left = 3;
inline bool Referee::_internal_has_stage_time_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Referee::has_stage_time_left() const {
  return _internal_has_stage_time_left();
}
inline void Referee::clear_stage_time_left() {
  _impl_.stage_time_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t Referee::_internal_stage_time_left() const {
  return _impl_.stage_time_left_;
}
inline int32_t Referee::stage_time_left() const {
  // @@protoc_insertion_point(field_get:Referee.stage_time_left)
  return _internal_stage_time_left();
}
inline void Referee::_internal_set_stage_time_left(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.stage_time_left_ = value;
}
inline void Referee::set_stage_time_left(int32_t value) {
  _internal_set_stage_time_left(value);
  // @@protoc_insertion_point(field_set:Referee.stage_time_left)
}

// required .Referee.Command command = 4;
inline bool Referee::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Referee::has_command() const {
  return _internal_has_command();
}
inline void Referee::clear_command() {
  _impl_.command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::Referee_Command Referee::_internal_command() const {
  return static_cast< ::Referee_Command >(_impl_.command_);
}
inline ::Referee_Command Referee::command() const {
  // @@protoc_insertion_point(field_get:Referee.command)
  return _internal_command();
}
inline void Referee::_internal_set_command(::Referee_Command value) {
  assert(::Referee_Command_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.command_ = value;
}
inline void Referee::set_command(::Referee_Command value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:Referee.command)
}

// required uint32 command_counter = 5;
inline bool Referee::_internal_has_command_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Referee::has_command_counter() const {
  return _internal_has_command_counter();
}
inline void Referee::clear_command_counter() {
  _impl_.command_counter_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline uint32_t Referee::_internal_command_counter() const {
  return _impl_.command_counter_;
}
inline uint32_t Referee::command_counter() const {
  // @@protoc_insertion_point(field_get:Referee.command_counter)
  return _internal_command_counter();
}
inline void Referee::_internal_set_command_counter(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.command_counter_ = value;
}
inline void Referee::set_command_counter(uint32_t value) {
  _internal_set_command_counter(value);
  // @@protoc_insertion_point(field_set:Referee.command_counter)
}

// required uint64 command_timestamp = 6;
inline bool Referee::_internal_has_command_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Referee::has_command_timestamp() const {
  return _internal_has_command_timestamp();
}
inline void Referee::clear_command_timestamp() {
  _impl_.command_timestamp_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline uint64_t Referee::_internal_command_timestamp() const {
  return _impl_.command_timestamp_;
}
inline uint64_t Referee::command_timestamp() const {
  // @@protoc_insertion_point(field_get:Referee.command_timestamp)
  return _internal_command_timestamp();
}
inline void Referee::_internal_set_command_timestamp(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.command_timestamp_ = value;
}
inline void Referee::set_command_timestamp(uint64_t value) {
  _internal_set_command_timestamp(value);
  // @@protoc_insertion_point(field_set:Referee.command_timestamp)
}

// required .Referee.TeamInfo yellow = 7;
inline bool Referee::_internal_has_yellow() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yellow_ != nullptr);
  return value;
}
inline bool Referee::has_yellow() const {
  return _internal_has_yellow();
}
inline void Referee::clear_yellow() {
  if (_impl_.yellow_ != nullptr) _impl_.yellow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Referee_TeamInfo& Referee::_internal_yellow() const {
  const ::Referee_TeamInfo* p = _impl_.yellow_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee_TeamInfo&>(
      ::_Referee_TeamInfo_default_instance_);
}
inline const ::Referee_TeamInfo& Referee::yellow() const {
  // @@protoc_insertion_point(field_get:Referee.yellow)
  return _internal_yellow();
}
inline void Referee::unsafe_arena_set_allocated_yellow(
    ::Referee_TeamInfo* yellow) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.yellow_);
  }
  _impl_.yellow_ = yellow;
  if (yellow) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.yellow)
}
inline ::Referee_TeamInfo* Referee::release_yellow() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Referee_TeamInfo* temp = _impl_.yellow_;
  _impl_.yellow_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Referee_TeamInfo* Referee::unsafe_arena_release_yellow() {
  // @@protoc_insertion_point(field_release:Referee.yellow)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Referee_TeamInfo* temp = _impl_.yellow_;
  _impl_.yellow_ = nullptr;
  return temp;
}
inline ::Referee_TeamInfo* Referee::_internal_mutable_yellow() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.yellow_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee_TeamInfo>(GetArenaForAllocation());
    _impl_.yellow_ = p;
  }
  return _impl_.yellow_;
}
inline ::Referee_TeamInfo* Referee::mutable_yellow() {
  ::Referee_TeamInfo* _msg = _internal_mutable_yellow();
  // @@protoc_insertion_point(field_mutable:Referee.yellow)
  return _msg;
}
inline void Referee::set_allocated_yellow(::Referee_TeamInfo* yellow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.yellow_;
  }
  if (yellow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(yellow);
    if (message_arena != submessage_arena) {
      yellow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, yellow, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.yellow_ = yellow;
  // @@protoc_insertion_point(field_set_allocated:Referee.yellow)
}

// required .Referee.TeamInfo blue = 8;
inline bool Referee::_internal_has_blue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blue_ != nullptr);
  return value;
}
inline bool Referee::has_blue() const {
  return _internal_has_blue();
}
inline void Referee::clear_blue() {
  if (_impl_.blue_ != nullptr) _impl_.blue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Referee_TeamInfo& Referee::_internal_blue() const {
  const ::Referee_TeamInfo* p = _impl_.blue_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee_TeamInfo&>(
      ::_Referee_TeamInfo_default_instance_);
}
inline const ::Referee_TeamInfo& Referee::blue() const {
  // @@protoc_insertion_point(field_get:Referee.blue)
  return _internal_blue();
}
inline void Referee::unsafe_arena_set_allocated_blue(
    ::Referee_TeamInfo* blue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blue_);
  }
  _impl_.blue_ = blue;
  if (blue) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.blue)
}
inline ::Referee_TeamInfo* Referee::release_blue() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Referee_TeamInfo* temp = _impl_.blue_;
  _impl_.blue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Referee_TeamInfo* Referee::unsafe_arena_release_blue() {
  // @@protoc_insertion_point(field_release:Referee.blue)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Referee_TeamInfo* temp = _impl_.blue_;
  _impl_.blue_ = nullptr;
  return temp;
}
inline ::Referee_TeamInfo* Referee::_internal_mutable_blue() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.blue_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee_TeamInfo>(GetArenaForAllocation());
    _impl_.blue_ = p;
  }
  return _impl_.blue_;
}
inline ::Referee_TeamInfo* Referee::mutable_blue() {
  ::Referee_TeamInfo* _msg = _internal_mutable_blue();
  // @@protoc_insertion_point(field_mutable:Referee.blue)
  return _msg;
}
inline void Referee::set_allocated_blue(::Referee_TeamInfo* blue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blue_;
  }
  if (blue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blue);
    if (message_arena != submessage_arena) {
      blue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.blue_ = blue;
  // @@protoc_insertion_point(field_set_allocated:Referee.blue)
}

// optional .Referee.Point designated_position = 9;
inline bool Referee::_internal_has_designated_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.designated_position_ != nullptr);
  return value;
}
inline bool Referee::has_designated_position() const {
  return _internal_has_designated_position();
}
inline void Referee::clear_designated_position() {
  if (_impl_.designated_position_ != nullptr) _impl_.designated_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::Referee_Point& Referee::_internal_designated_position() const {
  const ::Referee_Point* p = _impl_.designated_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Referee_Point&>(
      ::_Referee_Point_default_instance_);
}
inline const ::Referee_Point& Referee::designated_position() const {
  // @@protoc_insertion_point(field_get:Referee.designated_position)
  return _internal_designated_position();
}
inline void Referee::unsafe_arena_set_allocated_designated_position(
    ::Referee_Point* designated_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.designated_position_);
  }
  _impl_.designated_position_ = designated_position;
  if (designated_position) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Referee.designated_position)
}
inline ::Referee_Point* Referee::release_designated_position() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Referee_Point* temp = _impl_.designated_position_;
  _impl_.designated_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Referee_Point* Referee::unsafe_arena_release_designated_position() {
  // @@protoc_insertion_point(field_release:Referee.designated_position)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::Referee_Point* temp = _impl_.designated_position_;
  _impl_.designated_position_ = nullptr;
  return temp;
}
inline ::Referee_Point* Referee::_internal_mutable_designated_position() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.designated_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Referee_Point>(GetArenaForAllocation());
    _impl_.designated_position_ = p;
  }
  return _impl_.designated_position_;
}
inline ::Referee_Point* Referee::mutable_designated_position() {
  ::Referee_Point* _msg = _internal_mutable_designated_position();
  // @@protoc_insertion_point(field_mutable:Referee.designated_position)
  return _msg;
}
inline void Referee::set_allocated_designated_position(::Referee_Point* designated_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.designated_position_;
  }
  if (designated_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(designated_position);
    if (message_arena != submessage_arena) {
      designated_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, designated_position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.designated_position_ = designated_position;
  // @@protoc_insertion_point(field_set_allocated:Referee.designated_position)
}

// optional bool blue_team_on_positive_half = 10;
inline bool Referee::_internal_has_blue_team_on_positive_half() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Referee::has_blue_team_on_positive_half() const {
  return _internal_has_blue_team_on_positive_half();
}
inline void Referee::clear_blue_team_on_positive_half() {
  _impl_.blue_team_on_positive_half_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Referee::_internal_blue_team_on_positive_half() const {
  return _impl_.blue_team_on_positive_half_;
}
inline bool Referee::blue_team_on_positive_half() const {
  // @@protoc_insertion_point(field_get:Referee.blue_team_on_positive_half)
  return _internal_blue_team_on_positive_half();
}
inline void Referee::_internal_set_blue_team_on_positive_half(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.blue_team_on_positive_half_ = value;
}
inline void Referee::set_blue_team_on_positive_half(bool value) {
  _internal_set_blue_team_on_positive_half(value);
  // @@protoc_insertion_point(field_set:Referee.blue_team_on_positive_half)
}

// optional .Referee.Command next_command = 12;
inline bool Referee::_internal_has_next_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Referee::has_next_command() const {
  return _internal_has_next_command();
}
inline void Referee::clear_next_command() {
  _impl_.next_command_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::Referee_Command Referee::_internal_next_command() const {
  return static_cast< ::Referee_Command >(_impl_.next_command_);
}
inline ::Referee_Command Referee::next_command() const {
  // @@protoc_insertion_point(field_get:Referee.next_command)
  return _internal_next_command();
}
inline void Referee::_internal_set_next_command(::Referee_Command value) {
  assert(::Referee_Command_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.next_command_ = value;
}
inline void Referee::set_next_command(::Referee_Command value) {
  _internal_set_next_command(value);
  // @@protoc_insertion_point(field_set:Referee.next_command)
}

// repeated .GameEvent game_events = 16;
inline int Referee::_internal_game_events_size() const {
  return _impl_.game_events_.size();
}
inline int Referee::game_events_size() const {
  return _internal_game_events_size();
}
inline ::GameEvent* Referee::mutable_game_events(int index) {
  // @@protoc_insertion_point(field_mutable:Referee.game_events)
  return _impl_.game_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
Referee::mutable_game_events() {
  // @@protoc_insertion_point(field_mutable_list:Referee.game_events)
  return &_impl_.game_events_;
}
inline const ::GameEvent& Referee::_internal_game_events(int index) const {
  return _impl_.game_events_.Get(index);
}
inline const ::GameEvent& Referee::game_events(int index) const {
  // @@protoc_insertion_point(field_get:Referee.game_events)
  return _internal_game_events(index);
}
inline ::GameEvent* Referee::_internal_add_game_events() {
  return _impl_.game_events_.Add();
}
inline ::GameEvent* Referee::add_game_events() {
  ::GameEvent* _add = _internal_add_game_events();
  // @@protoc_insertion_point(field_add:Referee.game_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
Referee::game_events() const {
  // @@protoc_insertion_point(field_list:Referee.game_events)
  return _impl_.game_events_;
}

// repeated .GameEventProposalGroup game_event_proposals = 17;
inline int Referee::_internal_game_event_proposals_size() const {
  return _impl_.game_event_proposals_.size();
}
inline int Referee::game_event_proposals_size() const {
  return _internal_game_event_proposals_size();
}
inline void Referee::clear_game_event_proposals() {
  _impl_.game_event_proposals_.Clear();
}
inline ::GameEventProposalGroup* Referee::mutable_game_event_proposals(int index) {
  // @@protoc_insertion_point(field_mutable:Referee.game_event_proposals)
  return _impl_.game_event_proposals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEventProposalGroup >*
Referee::mutable_game_event_proposals() {
  // @@protoc_insertion_point(field_mutable_list:Referee.game_event_proposals)
  return &_impl_.game_event_proposals_;
}
inline const ::GameEventProposalGroup& Referee::_internal_game_event_proposals(int index) const {
  return _impl_.game_event_proposals_.Get(index);
}
inline const ::GameEventProposalGroup& Referee::game_event_proposals(int index) const {
  // @@protoc_insertion_point(field_get:Referee.game_event_proposals)
  return _internal_game_event_proposals(index);
}
inline ::GameEventProposalGroup* Referee::_internal_add_game_event_proposals() {
  return _impl_.game_event_proposals_.Add();
}
inline ::GameEventProposalGroup* Referee::add_game_event_proposals() {
  ::GameEventProposalGroup* _add = _internal_add_game_event_proposals();
  // @@protoc_insertion_point(field_add:Referee.game_event_proposals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEventProposalGroup >&
Referee::game_event_proposals() const {
  // @@protoc_insertion_point(field_list:Referee.game_event_proposals)
  return _impl_.game_event_proposals_;
}

// optional int32 current_action_time_remaining = 15;
inline bool Referee::_internal_has_current_action_time_remaining() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Referee::has_current_action_time_remaining() const {
  return _internal_has_current_action_time_remaining();
}
inline void Referee::clear_current_action_time_remaining() {
  _impl_.current_action_time_remaining_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t Referee::_internal_current_action_time_remaining() const {
  return _impl_.current_action_time_remaining_;
}
inline int32_t Referee::current_action_time_remaining() const {
  // @@protoc_insertion_point(field_get:Referee.current_action_time_remaining)
  return _internal_current_action_time_remaining();
}
inline void Referee::_internal_set_current_action_time_remaining(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.current_action_time_remaining_ = value;
}
inline void Referee::set_current_action_time_remaining(int32_t value) {
  _internal_set_current_action_time_remaining(value);
  // @@protoc_insertion_point(field_set:Referee.current_action_time_remaining)
}

// -------------------------------------------------------------------

// GameEventProposalGroup

// repeated .GameEvent game_event = 1;
inline int GameEventProposalGroup::_internal_game_event_size() const {
  return _impl_.game_event_.size();
}
inline int GameEventProposalGroup::game_event_size() const {
  return _internal_game_event_size();
}
inline ::GameEvent* GameEventProposalGroup::mutable_game_event(int index) {
  // @@protoc_insertion_point(field_mutable:GameEventProposalGroup.game_event)
  return _impl_.game_event_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >*
GameEventProposalGroup::mutable_game_event() {
  // @@protoc_insertion_point(field_mutable_list:GameEventProposalGroup.game_event)
  return &_impl_.game_event_;
}
inline const ::GameEvent& GameEventProposalGroup::_internal_game_event(int index) const {
  return _impl_.game_event_.Get(index);
}
inline const ::GameEvent& GameEventProposalGroup::game_event(int index) const {
  // @@protoc_insertion_point(field_get:GameEventProposalGroup.game_event)
  return _internal_game_event(index);
}
inline ::GameEvent* GameEventProposalGroup::_internal_add_game_event() {
  return _impl_.game_event_.Add();
}
inline ::GameEvent* GameEventProposalGroup::add_game_event() {
  ::GameEvent* _add = _internal_add_game_event();
  // @@protoc_insertion_point(field_add:GameEventProposalGroup.game_event)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GameEvent >&
GameEventProposalGroup::game_event() const {
  // @@protoc_insertion_point(field_list:GameEventProposalGroup.game_event)
  return _impl_.game_event_;
}

// optional bool accepted = 2;
inline bool GameEventProposalGroup::_internal_has_accepted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameEventProposalGroup::has_accepted() const {
  return _internal_has_accepted();
}
inline void GameEventProposalGroup::clear_accepted() {
  _impl_.accepted_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool GameEventProposalGroup::_internal_accepted() const {
  return _impl_.accepted_;
}
inline bool GameEventProposalGroup::accepted() const {
  // @@protoc_insertion_point(field_get:GameEventProposalGroup.accepted)
  return _internal_accepted();
}
inline void GameEventProposalGroup::_internal_set_accepted(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accepted_ = value;
}
inline void GameEventProposalGroup::set_accepted(bool value) {
  _internal_set_accepted(value);
  // @@protoc_insertion_point(field_set:GameEventProposalGroup.accepted)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Referee_Stage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Referee_Stage>() {
  return ::Referee_Stage_descriptor();
}
template <> struct is_proto_enum< ::Referee_Command> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Referee_Command>() {
  return ::Referee_Command_descriptor();
}
template <> struct is_proto_enum< ::MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MatchType>() {
  return ::MatchType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fgc_5freferee_5fmessage_2eproto
