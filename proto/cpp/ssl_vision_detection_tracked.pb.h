// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_detection_tracked.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_5ftracked_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_5ftracked_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_common.pb.h"
#include "ssl_gc_geometry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fvision_5fdetection_5ftracked_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fvision_5fdetection_5ftracked_2eproto;
class KickedBall;
struct KickedBallDefaultTypeInternal;
extern KickedBallDefaultTypeInternal _KickedBall_default_instance_;
class TrackedBall;
struct TrackedBallDefaultTypeInternal;
extern TrackedBallDefaultTypeInternal _TrackedBall_default_instance_;
class TrackedFrame;
struct TrackedFrameDefaultTypeInternal;
extern TrackedFrameDefaultTypeInternal _TrackedFrame_default_instance_;
class TrackedRobot;
struct TrackedRobotDefaultTypeInternal;
extern TrackedRobotDefaultTypeInternal _TrackedRobot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::KickedBall* Arena::CreateMaybeMessage<::KickedBall>(Arena*);
template<> ::TrackedBall* Arena::CreateMaybeMessage<::TrackedBall>(Arena*);
template<> ::TrackedFrame* Arena::CreateMaybeMessage<::TrackedFrame>(Arena*);
template<> ::TrackedRobot* Arena::CreateMaybeMessage<::TrackedRobot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Capability : int {
  CAPABILITY_UNKNOWN = 0,
  CAPABILITY_DETECT_FLYING_BALLS = 1,
  CAPABILITY_DETECT_MULTIPLE_BALLS = 2,
  CAPABILITY_DETECT_KICKED_BALLS = 3
};
bool Capability_IsValid(int value);
constexpr Capability Capability_MIN = CAPABILITY_UNKNOWN;
constexpr Capability Capability_MAX = CAPABILITY_DETECT_KICKED_BALLS;
constexpr int Capability_ARRAYSIZE = Capability_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Capability_descriptor();
template<typename T>
inline const std::string& Capability_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Capability>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Capability_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Capability_descriptor(), enum_t_value);
}
inline bool Capability_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Capability* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Capability>(
    Capability_descriptor(), name, value);
}
// ===================================================================

class TrackedBall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackedBall) */ {
 public:
  inline TrackedBall() : TrackedBall(nullptr) {}
  ~TrackedBall() override;
  explicit PROTOBUF_CONSTEXPR TrackedBall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedBall(const TrackedBall& from);
  TrackedBall(TrackedBall&& from) noexcept
    : TrackedBall() {
    *this = ::std::move(from);
  }

  inline TrackedBall& operator=(const TrackedBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedBall& operator=(TrackedBall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedBall* internal_default_instance() {
    return reinterpret_cast<const TrackedBall*>(
               &_TrackedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrackedBall& a, TrackedBall& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedBall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackedBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackedBall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackedBall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackedBall& from) {
    TrackedBall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedBall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackedBall";
  }
  protected:
  explicit TrackedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kVelFieldNumber = 2,
    kVisibilityFieldNumber = 3,
  };
  // required .Vector3 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector3& pos() const;
  PROTOBUF_NODISCARD ::Vector3* release_pos();
  ::Vector3* mutable_pos();
  void set_allocated_pos(::Vector3* pos);
  private:
  const ::Vector3& _internal_pos() const;
  ::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector3* pos);
  ::Vector3* unsafe_arena_release_pos();

  // optional .Vector3 vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Vector3& vel() const;
  PROTOBUF_NODISCARD ::Vector3* release_vel();
  ::Vector3* mutable_vel();
  void set_allocated_vel(::Vector3* vel);
  private:
  const ::Vector3& _internal_vel() const;
  ::Vector3* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Vector3* vel);
  ::Vector3* unsafe_arena_release_vel();

  // optional float visibility = 3;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // @@protoc_insertion_point(class_scope:TrackedBall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Vector3* pos_;
    ::Vector3* vel_;
    float visibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// -------------------------------------------------------------------

class KickedBall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KickedBall) */ {
 public:
  inline KickedBall() : KickedBall(nullptr) {}
  ~KickedBall() override;
  explicit PROTOBUF_CONSTEXPR KickedBall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KickedBall(const KickedBall& from);
  KickedBall(KickedBall&& from) noexcept
    : KickedBall() {
    *this = ::std::move(from);
  }

  inline KickedBall& operator=(const KickedBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline KickedBall& operator=(KickedBall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KickedBall& default_instance() {
    return *internal_default_instance();
  }
  static inline const KickedBall* internal_default_instance() {
    return reinterpret_cast<const KickedBall*>(
               &_KickedBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KickedBall& a, KickedBall& b) {
    a.Swap(&b);
  }
  inline void Swap(KickedBall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KickedBall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KickedBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KickedBall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KickedBall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KickedBall& from) {
    KickedBall::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KickedBall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KickedBall";
  }
  protected:
  explicit KickedBall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kVelFieldNumber = 2,
    kStopPosFieldNumber = 5,
    kRobotIdFieldNumber = 6,
    kStartTimestampFieldNumber = 3,
    kStopTimestampFieldNumber = 4,
  };
  // required .Vector2 pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector2& pos() const;
  PROTOBUF_NODISCARD ::Vector2* release_pos();
  ::Vector2* mutable_pos();
  void set_allocated_pos(::Vector2* pos);
  private:
  const ::Vector2& _internal_pos() const;
  ::Vector2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector2* pos);
  ::Vector2* unsafe_arena_release_pos();

  // required .Vector3 vel = 2;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Vector3& vel() const;
  PROTOBUF_NODISCARD ::Vector3* release_vel();
  ::Vector3* mutable_vel();
  void set_allocated_vel(::Vector3* vel);
  private:
  const ::Vector3& _internal_vel() const;
  ::Vector3* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Vector3* vel);
  ::Vector3* unsafe_arena_release_vel();

  // optional .Vector2 stop_pos = 5;
  bool has_stop_pos() const;
  private:
  bool _internal_has_stop_pos() const;
  public:
  void clear_stop_pos();
  const ::Vector2& stop_pos() const;
  PROTOBUF_NODISCARD ::Vector2* release_stop_pos();
  ::Vector2* mutable_stop_pos();
  void set_allocated_stop_pos(::Vector2* stop_pos);
  private:
  const ::Vector2& _internal_stop_pos() const;
  ::Vector2* _internal_mutable_stop_pos();
  public:
  void unsafe_arena_set_allocated_stop_pos(
      ::Vector2* stop_pos);
  ::Vector2* unsafe_arena_release_stop_pos();

  // optional .RobotId robot_id = 6;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const ::RobotId& robot_id() const;
  PROTOBUF_NODISCARD ::RobotId* release_robot_id();
  ::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::RobotId* robot_id);
  private:
  const ::RobotId& _internal_robot_id() const;
  ::RobotId* _internal_mutable_robot_id();
  public:
  void unsafe_arena_set_allocated_robot_id(
      ::RobotId* robot_id);
  ::RobotId* unsafe_arena_release_robot_id();

  // required double start_timestamp = 3;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  double start_timestamp() const;
  void set_start_timestamp(double value);
  private:
  double _internal_start_timestamp() const;
  void _internal_set_start_timestamp(double value);
  public:

  // optional double stop_timestamp = 4;
  bool has_stop_timestamp() const;
  private:
  bool _internal_has_stop_timestamp() const;
  public:
  void clear_stop_timestamp();
  double stop_timestamp() const;
  void set_stop_timestamp(double value);
  private:
  double _internal_stop_timestamp() const;
  void _internal_set_stop_timestamp(double value);
  public:

  // @@protoc_insertion_point(class_scope:KickedBall)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Vector2* pos_;
    ::Vector3* vel_;
    ::Vector2* stop_pos_;
    ::RobotId* robot_id_;
    double start_timestamp_;
    double stop_timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// -------------------------------------------------------------------

class TrackedRobot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackedRobot) */ {
 public:
  inline TrackedRobot() : TrackedRobot(nullptr) {}
  ~TrackedRobot() override;
  explicit PROTOBUF_CONSTEXPR TrackedRobot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedRobot(const TrackedRobot& from);
  TrackedRobot(TrackedRobot&& from) noexcept
    : TrackedRobot() {
    *this = ::std::move(from);
  }

  inline TrackedRobot& operator=(const TrackedRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedRobot& operator=(TrackedRobot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedRobot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedRobot* internal_default_instance() {
    return reinterpret_cast<const TrackedRobot*>(
               &_TrackedRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackedRobot& a, TrackedRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedRobot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedRobot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackedRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackedRobot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackedRobot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackedRobot& from) {
    TrackedRobot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedRobot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackedRobot";
  }
  protected:
  explicit TrackedRobot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kPosFieldNumber = 2,
    kVelFieldNumber = 4,
    kOrientationFieldNumber = 3,
    kVelAngularFieldNumber = 5,
    kVisibilityFieldNumber = 6,
  };
  // required .RobotId robot_id = 1;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const ::RobotId& robot_id() const;
  PROTOBUF_NODISCARD ::RobotId* release_robot_id();
  ::RobotId* mutable_robot_id();
  void set_allocated_robot_id(::RobotId* robot_id);
  private:
  const ::RobotId& _internal_robot_id() const;
  ::RobotId* _internal_mutable_robot_id();
  public:
  void unsafe_arena_set_allocated_robot_id(
      ::RobotId* robot_id);
  ::RobotId* unsafe_arena_release_robot_id();

  // required .Vector2 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector2& pos() const;
  PROTOBUF_NODISCARD ::Vector2* release_pos();
  ::Vector2* mutable_pos();
  void set_allocated_pos(::Vector2* pos);
  private:
  const ::Vector2& _internal_pos() const;
  ::Vector2* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector2* pos);
  ::Vector2* unsafe_arena_release_pos();

  // optional .Vector2 vel = 4;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Vector2& vel() const;
  PROTOBUF_NODISCARD ::Vector2* release_vel();
  ::Vector2* mutable_vel();
  void set_allocated_vel(::Vector2* vel);
  private:
  const ::Vector2& _internal_vel() const;
  ::Vector2* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Vector2* vel);
  ::Vector2* unsafe_arena_release_vel();

  // required float orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // optional float vel_angular = 5;
  bool has_vel_angular() const;
  private:
  bool _internal_has_vel_angular() const;
  public:
  void clear_vel_angular();
  float vel_angular() const;
  void set_vel_angular(float value);
  private:
  float _internal_vel_angular() const;
  void _internal_set_vel_angular(float value);
  public:

  // optional float visibility = 6;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  float visibility() const;
  void set_visibility(float value);
  private:
  float _internal_visibility() const;
  void _internal_set_visibility(float value);
  public:

  // @@protoc_insertion_point(class_scope:TrackedRobot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::RobotId* robot_id_;
    ::Vector2* pos_;
    ::Vector2* vel_;
    float orientation_;
    float vel_angular_;
    float visibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// -------------------------------------------------------------------

class TrackedFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrackedFrame) */ {
 public:
  inline TrackedFrame() : TrackedFrame(nullptr) {}
  ~TrackedFrame() override;
  explicit PROTOBUF_CONSTEXPR TrackedFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrackedFrame(const TrackedFrame& from);
  TrackedFrame(TrackedFrame&& from) noexcept
    : TrackedFrame() {
    *this = ::std::move(from);
  }

  inline TrackedFrame& operator=(const TrackedFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackedFrame& operator=(TrackedFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrackedFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrackedFrame* internal_default_instance() {
    return reinterpret_cast<const TrackedFrame*>(
               &_TrackedFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrackedFrame& a, TrackedFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackedFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackedFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TrackedFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TrackedFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrackedFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TrackedFrame& from) {
    TrackedFrame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackedFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrackedFrame";
  }
  protected:
  explicit TrackedFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBallsFieldNumber = 3,
    kRobotsFieldNumber = 4,
    kCapabilitiesFieldNumber = 6,
    kKickedBallFieldNumber = 5,
    kTimestampFieldNumber = 2,
    kFrameNumberFieldNumber = 1,
  };
  // repeated .TrackedBall balls = 3;
  int balls_size() const;
  private:
  int _internal_balls_size() const;
  public:
  void clear_balls();
  ::TrackedBall* mutable_balls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedBall >*
      mutable_balls();
  private:
  const ::TrackedBall& _internal_balls(int index) const;
  ::TrackedBall* _internal_add_balls();
  public:
  const ::TrackedBall& balls(int index) const;
  ::TrackedBall* add_balls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedBall >&
      balls() const;

  // repeated .TrackedRobot robots = 4;
  int robots_size() const;
  private:
  int _internal_robots_size() const;
  public:
  void clear_robots();
  ::TrackedRobot* mutable_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedRobot >*
      mutable_robots();
  private:
  const ::TrackedRobot& _internal_robots(int index) const;
  ::TrackedRobot* _internal_add_robots();
  public:
  const ::TrackedRobot& robots(int index) const;
  ::TrackedRobot* add_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedRobot >&
      robots() const;

  // repeated .Capability capabilities = 6;
  int capabilities_size() const;
  private:
  int _internal_capabilities_size() const;
  public:
  void clear_capabilities();
  private:
  ::Capability _internal_capabilities(int index) const;
  void _internal_add_capabilities(::Capability value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_capabilities();
  public:
  ::Capability capabilities(int index) const;
  void set_capabilities(int index, ::Capability value);
  void add_capabilities(::Capability value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& capabilities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_capabilities();

  // optional .KickedBall kicked_ball = 5;
  bool has_kicked_ball() const;
  private:
  bool _internal_has_kicked_ball() const;
  public:
  void clear_kicked_ball();
  const ::KickedBall& kicked_ball() const;
  PROTOBUF_NODISCARD ::KickedBall* release_kicked_ball();
  ::KickedBall* mutable_kicked_ball();
  void set_allocated_kicked_ball(::KickedBall* kicked_ball);
  private:
  const ::KickedBall& _internal_kicked_ball() const;
  ::KickedBall* _internal_mutable_kicked_ball();
  public:
  void unsafe_arena_set_allocated_kicked_ball(
      ::KickedBall* kicked_ball);
  ::KickedBall* unsafe_arena_release_kicked_ball();

  // required double timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // required uint32 frame_number = 1;
  bool has_frame_number() const;
  private:
  bool _internal_has_frame_number() const;
  public:
  void clear_frame_number();
  uint32_t frame_number() const;
  void set_frame_number(uint32_t value);
  private:
  uint32_t _internal_frame_number() const;
  void _internal_set_frame_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TrackedFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedBall > balls_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedRobot > robots_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> capabilities_;
    ::KickedBall* kicked_ball_;
    double timestamp_;
    uint32_t frame_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fvision_5fdetection_5ftracked_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrackedBall

// required .Vector3 pos = 1;
inline bool TrackedBall::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool TrackedBall::has_pos() const {
  return _internal_has_pos();
}
inline const ::Vector3& TrackedBall::_internal_pos() const {
  const ::Vector3* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& TrackedBall::pos() const {
  // @@protoc_insertion_point(field_get:TrackedBall.pos)
  return _internal_pos();
}
inline void TrackedBall::unsafe_arena_set_allocated_pos(
    ::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackedBall.pos)
}
inline ::Vector3* TrackedBall::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* TrackedBall::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:TrackedBall.pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector3* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Vector3* TrackedBall::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Vector3* TrackedBall::mutable_pos() {
  ::Vector3* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:TrackedBall.pos)
  return _msg;
}
inline void TrackedBall::set_allocated_pos(::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:TrackedBall.pos)
}

// optional .Vector3 vel = 2;
inline bool TrackedBall::_internal_has_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vel_ != nullptr);
  return value;
}
inline bool TrackedBall::has_vel() const {
  return _internal_has_vel();
}
inline const ::Vector3& TrackedBall::_internal_vel() const {
  const ::Vector3* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& TrackedBall::vel() const {
  // @@protoc_insertion_point(field_get:TrackedBall.vel)
  return _internal_vel();
}
inline void TrackedBall::unsafe_arena_set_allocated_vel(
    ::Vector3* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackedBall.vel)
}
inline ::Vector3* TrackedBall::release_vel() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* TrackedBall::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:TrackedBall.vel)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Vector3* TrackedBall::_internal_mutable_vel() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Vector3* TrackedBall::mutable_vel() {
  ::Vector3* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:TrackedBall.vel)
  return _msg;
}
inline void TrackedBall::set_allocated_vel(::Vector3* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel));
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:TrackedBall.vel)
}

// optional float visibility = 3;
inline bool TrackedBall::_internal_has_visibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackedBall::has_visibility() const {
  return _internal_has_visibility();
}
inline void TrackedBall::clear_visibility() {
  _impl_.visibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float TrackedBall::_internal_visibility() const {
  return _impl_.visibility_;
}
inline float TrackedBall::visibility() const {
  // @@protoc_insertion_point(field_get:TrackedBall.visibility)
  return _internal_visibility();
}
inline void TrackedBall::_internal_set_visibility(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.visibility_ = value;
}
inline void TrackedBall::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:TrackedBall.visibility)
}

// -------------------------------------------------------------------

// KickedBall

// required .Vector2 pos = 1;
inline bool KickedBall::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool KickedBall::has_pos() const {
  return _internal_has_pos();
}
inline const ::Vector2& KickedBall::_internal_pos() const {
  const ::Vector2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& KickedBall::pos() const {
  // @@protoc_insertion_point(field_get:KickedBall.pos)
  return _internal_pos();
}
inline void KickedBall::unsafe_arena_set_allocated_pos(
    ::Vector2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KickedBall.pos)
}
inline ::Vector2* KickedBall::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* KickedBall::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:KickedBall.pos)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Vector2* KickedBall::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Vector2* KickedBall::mutable_pos() {
  ::Vector2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:KickedBall.pos)
  return _msg;
}
inline void KickedBall::set_allocated_pos(::Vector2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:KickedBall.pos)
}

// required .Vector3 vel = 2;
inline bool KickedBall::_internal_has_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vel_ != nullptr);
  return value;
}
inline bool KickedBall::has_vel() const {
  return _internal_has_vel();
}
inline const ::Vector3& KickedBall::_internal_vel() const {
  const ::Vector3* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& KickedBall::vel() const {
  // @@protoc_insertion_point(field_get:KickedBall.vel)
  return _internal_vel();
}
inline void KickedBall::unsafe_arena_set_allocated_vel(
    ::Vector3* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KickedBall.vel)
}
inline ::Vector3* KickedBall::release_vel() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* KickedBall::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:KickedBall.vel)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector3* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Vector3* KickedBall::_internal_mutable_vel() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Vector3* KickedBall::mutable_vel() {
  ::Vector3* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:KickedBall.vel)
  return _msg;
}
inline void KickedBall::set_allocated_vel(::Vector3* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel));
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:KickedBall.vel)
}

// required double start_timestamp = 3;
inline bool KickedBall::_internal_has_start_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool KickedBall::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void KickedBall::clear_start_timestamp() {
  _impl_.start_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double KickedBall::_internal_start_timestamp() const {
  return _impl_.start_timestamp_;
}
inline double KickedBall::start_timestamp() const {
  // @@protoc_insertion_point(field_get:KickedBall.start_timestamp)
  return _internal_start_timestamp();
}
inline void KickedBall::_internal_set_start_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.start_timestamp_ = value;
}
inline void KickedBall::set_start_timestamp(double value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:KickedBall.start_timestamp)
}

// optional double stop_timestamp = 4;
inline bool KickedBall::_internal_has_stop_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool KickedBall::has_stop_timestamp() const {
  return _internal_has_stop_timestamp();
}
inline void KickedBall::clear_stop_timestamp() {
  _impl_.stop_timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double KickedBall::_internal_stop_timestamp() const {
  return _impl_.stop_timestamp_;
}
inline double KickedBall::stop_timestamp() const {
  // @@protoc_insertion_point(field_get:KickedBall.stop_timestamp)
  return _internal_stop_timestamp();
}
inline void KickedBall::_internal_set_stop_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.stop_timestamp_ = value;
}
inline void KickedBall::set_stop_timestamp(double value) {
  _internal_set_stop_timestamp(value);
  // @@protoc_insertion_point(field_set:KickedBall.stop_timestamp)
}

// optional .Vector2 stop_pos = 5;
inline bool KickedBall::_internal_has_stop_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_pos_ != nullptr);
  return value;
}
inline bool KickedBall::has_stop_pos() const {
  return _internal_has_stop_pos();
}
inline const ::Vector2& KickedBall::_internal_stop_pos() const {
  const ::Vector2* p = _impl_.stop_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& KickedBall::stop_pos() const {
  // @@protoc_insertion_point(field_get:KickedBall.stop_pos)
  return _internal_stop_pos();
}
inline void KickedBall::unsafe_arena_set_allocated_stop_pos(
    ::Vector2* stop_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_pos_);
  }
  _impl_.stop_pos_ = stop_pos;
  if (stop_pos) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KickedBall.stop_pos)
}
inline ::Vector2* KickedBall::release_stop_pos() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2* temp = _impl_.stop_pos_;
  _impl_.stop_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* KickedBall::unsafe_arena_release_stop_pos() {
  // @@protoc_insertion_point(field_release:KickedBall.stop_pos)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2* temp = _impl_.stop_pos_;
  _impl_.stop_pos_ = nullptr;
  return temp;
}
inline ::Vector2* KickedBall::_internal_mutable_stop_pos() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stop_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.stop_pos_ = p;
  }
  return _impl_.stop_pos_;
}
inline ::Vector2* KickedBall::mutable_stop_pos() {
  ::Vector2* _msg = _internal_mutable_stop_pos();
  // @@protoc_insertion_point(field_mutable:KickedBall.stop_pos)
  return _msg;
}
inline void KickedBall::set_allocated_stop_pos(::Vector2* stop_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_pos_);
  }
  if (stop_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_pos));
    if (message_arena != submessage_arena) {
      stop_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stop_pos_ = stop_pos;
  // @@protoc_insertion_point(field_set_allocated:KickedBall.stop_pos)
}

// optional .RobotId robot_id = 6;
inline bool KickedBall::_internal_has_robot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.robot_id_ != nullptr);
  return value;
}
inline bool KickedBall::has_robot_id() const {
  return _internal_has_robot_id();
}
inline const ::RobotId& KickedBall::_internal_robot_id() const {
  const ::RobotId* p = _impl_.robot_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotId&>(
      ::_RobotId_default_instance_);
}
inline const ::RobotId& KickedBall::robot_id() const {
  // @@protoc_insertion_point(field_get:KickedBall.robot_id)
  return _internal_robot_id();
}
inline void KickedBall::unsafe_arena_set_allocated_robot_id(
    ::RobotId* robot_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_id_);
  }
  _impl_.robot_id_ = robot_id;
  if (robot_id) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KickedBall.robot_id)
}
inline ::RobotId* KickedBall::release_robot_id() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::RobotId* temp = _impl_.robot_id_;
  _impl_.robot_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotId* KickedBall::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_release:KickedBall.robot_id)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::RobotId* temp = _impl_.robot_id_;
  _impl_.robot_id_ = nullptr;
  return temp;
}
inline ::RobotId* KickedBall::_internal_mutable_robot_id() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.robot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotId>(GetArenaForAllocation());
    _impl_.robot_id_ = p;
  }
  return _impl_.robot_id_;
}
inline ::RobotId* KickedBall::mutable_robot_id() {
  ::RobotId* _msg = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:KickedBall.robot_id)
  return _msg;
}
inline void KickedBall::set_allocated_robot_id(::RobotId* robot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_id_);
  }
  if (robot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id));
    if (message_arena != submessage_arena) {
      robot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:KickedBall.robot_id)
}

// -------------------------------------------------------------------

// TrackedRobot

// required .RobotId robot_id = 1;
inline bool TrackedRobot::_internal_has_robot_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.robot_id_ != nullptr);
  return value;
}
inline bool TrackedRobot::has_robot_id() const {
  return _internal_has_robot_id();
}
inline const ::RobotId& TrackedRobot::_internal_robot_id() const {
  const ::RobotId* p = _impl_.robot_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotId&>(
      ::_RobotId_default_instance_);
}
inline const ::RobotId& TrackedRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.robot_id)
  return _internal_robot_id();
}
inline void TrackedRobot::unsafe_arena_set_allocated_robot_id(
    ::RobotId* robot_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_id_);
  }
  _impl_.robot_id_ = robot_id;
  if (robot_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackedRobot.robot_id)
}
inline ::RobotId* TrackedRobot::release_robot_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotId* temp = _impl_.robot_id_;
  _impl_.robot_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotId* TrackedRobot::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_release:TrackedRobot.robot_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotId* temp = _impl_.robot_id_;
  _impl_.robot_id_ = nullptr;
  return temp;
}
inline ::RobotId* TrackedRobot::_internal_mutable_robot_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.robot_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotId>(GetArenaForAllocation());
    _impl_.robot_id_ = p;
  }
  return _impl_.robot_id_;
}
inline ::RobotId* TrackedRobot::mutable_robot_id() {
  ::RobotId* _msg = _internal_mutable_robot_id();
  // @@protoc_insertion_point(field_mutable:TrackedRobot.robot_id)
  return _msg;
}
inline void TrackedRobot::set_allocated_robot_id(::RobotId* robot_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_id_);
  }
  if (robot_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_id));
    if (message_arena != submessage_arena) {
      robot_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.robot_id_ = robot_id;
  // @@protoc_insertion_point(field_set_allocated:TrackedRobot.robot_id)
}

// required .Vector2 pos = 2;
inline bool TrackedRobot::_internal_has_pos() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pos_ != nullptr);
  return value;
}
inline bool TrackedRobot::has_pos() const {
  return _internal_has_pos();
}
inline const ::Vector2& TrackedRobot::_internal_pos() const {
  const ::Vector2* p = _impl_.pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& TrackedRobot::pos() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.pos)
  return _internal_pos();
}
inline void TrackedRobot::unsafe_arena_set_allocated_pos(
    ::Vector2* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  _impl_.pos_ = pos;
  if (pos) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackedRobot.pos)
}
inline ::Vector2* TrackedRobot::release_pos() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* TrackedRobot::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:TrackedRobot.pos)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Vector2* temp = _impl_.pos_;
  _impl_.pos_ = nullptr;
  return temp;
}
inline ::Vector2* TrackedRobot::_internal_mutable_pos() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.pos_ = p;
  }
  return _impl_.pos_;
}
inline ::Vector2* TrackedRobot::mutable_pos() {
  ::Vector2* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:TrackedRobot.pos)
  return _msg;
}
inline void TrackedRobot::set_allocated_pos(::Vector2* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:TrackedRobot.pos)
}

// required float orientation = 3;
inline bool TrackedRobot::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrackedRobot::has_orientation() const {
  return _internal_has_orientation();
}
inline void TrackedRobot::clear_orientation() {
  _impl_.orientation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float TrackedRobot::_internal_orientation() const {
  return _impl_.orientation_;
}
inline float TrackedRobot::orientation() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.orientation)
  return _internal_orientation();
}
inline void TrackedRobot::_internal_set_orientation(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.orientation_ = value;
}
inline void TrackedRobot::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:TrackedRobot.orientation)
}

// optional .Vector2 vel = 4;
inline bool TrackedRobot::_internal_has_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vel_ != nullptr);
  return value;
}
inline bool TrackedRobot::has_vel() const {
  return _internal_has_vel();
}
inline const ::Vector2& TrackedRobot::_internal_vel() const {
  const ::Vector2* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector2&>(
      ::_Vector2_default_instance_);
}
inline const ::Vector2& TrackedRobot::vel() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.vel)
  return _internal_vel();
}
inline void TrackedRobot::unsafe_arena_set_allocated_vel(
    ::Vector2* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackedRobot.vel)
}
inline ::Vector2* TrackedRobot::release_vel() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector2* TrackedRobot::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:TrackedRobot.vel)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Vector2* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Vector2* TrackedRobot::_internal_mutable_vel() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Vector2* TrackedRobot::mutable_vel() {
  ::Vector2* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:TrackedRobot.vel)
  return _msg;
}
inline void TrackedRobot::set_allocated_vel(::Vector2* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vel));
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:TrackedRobot.vel)
}

// optional float vel_angular = 5;
inline bool TrackedRobot::_internal_has_vel_angular() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackedRobot::has_vel_angular() const {
  return _internal_has_vel_angular();
}
inline void TrackedRobot::clear_vel_angular() {
  _impl_.vel_angular_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float TrackedRobot::_internal_vel_angular() const {
  return _impl_.vel_angular_;
}
inline float TrackedRobot::vel_angular() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.vel_angular)
  return _internal_vel_angular();
}
inline void TrackedRobot::_internal_set_vel_angular(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vel_angular_ = value;
}
inline void TrackedRobot::set_vel_angular(float value) {
  _internal_set_vel_angular(value);
  // @@protoc_insertion_point(field_set:TrackedRobot.vel_angular)
}

// optional float visibility = 6;
inline bool TrackedRobot::_internal_has_visibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackedRobot::has_visibility() const {
  return _internal_has_visibility();
}
inline void TrackedRobot::clear_visibility() {
  _impl_.visibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float TrackedRobot::_internal_visibility() const {
  return _impl_.visibility_;
}
inline float TrackedRobot::visibility() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.visibility)
  return _internal_visibility();
}
inline void TrackedRobot::_internal_set_visibility(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.visibility_ = value;
}
inline void TrackedRobot::set_visibility(float value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:TrackedRobot.visibility)
}

// -------------------------------------------------------------------

// TrackedFrame

// required uint32 frame_number = 1;
inline bool TrackedFrame::_internal_has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackedFrame::has_frame_number() const {
  return _internal_has_frame_number();
}
inline void TrackedFrame::clear_frame_number() {
  _impl_.frame_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TrackedFrame::_internal_frame_number() const {
  return _impl_.frame_number_;
}
inline uint32_t TrackedFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:TrackedFrame.frame_number)
  return _internal_frame_number();
}
inline void TrackedFrame::_internal_set_frame_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.frame_number_ = value;
}
inline void TrackedFrame::set_frame_number(uint32_t value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:TrackedFrame.frame_number)
}

// required double timestamp = 2;
inline bool TrackedFrame::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackedFrame::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void TrackedFrame::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double TrackedFrame::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double TrackedFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:TrackedFrame.timestamp)
  return _internal_timestamp();
}
inline void TrackedFrame::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.timestamp_ = value;
}
inline void TrackedFrame::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:TrackedFrame.timestamp)
}

// repeated .TrackedBall balls = 3;
inline int TrackedFrame::_internal_balls_size() const {
  return _impl_.balls_.size();
}
inline int TrackedFrame::balls_size() const {
  return _internal_balls_size();
}
inline void TrackedFrame::clear_balls() {
  _impl_.balls_.Clear();
}
inline ::TrackedBall* TrackedFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:TrackedFrame.balls)
  return _impl_.balls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedBall >*
TrackedFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:TrackedFrame.balls)
  return &_impl_.balls_;
}
inline const ::TrackedBall& TrackedFrame::_internal_balls(int index) const {
  return _impl_.balls_.Get(index);
}
inline const ::TrackedBall& TrackedFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:TrackedFrame.balls)
  return _internal_balls(index);
}
inline ::TrackedBall* TrackedFrame::_internal_add_balls() {
  return _impl_.balls_.Add();
}
inline ::TrackedBall* TrackedFrame::add_balls() {
  ::TrackedBall* _add = _internal_add_balls();
  // @@protoc_insertion_point(field_add:TrackedFrame.balls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedBall >&
TrackedFrame::balls() const {
  // @@protoc_insertion_point(field_list:TrackedFrame.balls)
  return _impl_.balls_;
}

// repeated .TrackedRobot robots = 4;
inline int TrackedFrame::_internal_robots_size() const {
  return _impl_.robots_.size();
}
inline int TrackedFrame::robots_size() const {
  return _internal_robots_size();
}
inline void TrackedFrame::clear_robots() {
  _impl_.robots_.Clear();
}
inline ::TrackedRobot* TrackedFrame::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:TrackedFrame.robots)
  return _impl_.robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedRobot >*
TrackedFrame::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:TrackedFrame.robots)
  return &_impl_.robots_;
}
inline const ::TrackedRobot& TrackedFrame::_internal_robots(int index) const {
  return _impl_.robots_.Get(index);
}
inline const ::TrackedRobot& TrackedFrame::robots(int index) const {
  // @@protoc_insertion_point(field_get:TrackedFrame.robots)
  return _internal_robots(index);
}
inline ::TrackedRobot* TrackedFrame::_internal_add_robots() {
  return _impl_.robots_.Add();
}
inline ::TrackedRobot* TrackedFrame::add_robots() {
  ::TrackedRobot* _add = _internal_add_robots();
  // @@protoc_insertion_point(field_add:TrackedFrame.robots)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TrackedRobot >&
TrackedFrame::robots() const {
  // @@protoc_insertion_point(field_list:TrackedFrame.robots)
  return _impl_.robots_;
}

// optional .KickedBall kicked_ball = 5;
inline bool TrackedFrame::_internal_has_kicked_ball() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kicked_ball_ != nullptr);
  return value;
}
inline bool TrackedFrame::has_kicked_ball() const {
  return _internal_has_kicked_ball();
}
inline void TrackedFrame::clear_kicked_ball() {
  if (_impl_.kicked_ball_ != nullptr) _impl_.kicked_ball_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::KickedBall& TrackedFrame::_internal_kicked_ball() const {
  const ::KickedBall* p = _impl_.kicked_ball_;
  return p != nullptr ? *p : reinterpret_cast<const ::KickedBall&>(
      ::_KickedBall_default_instance_);
}
inline const ::KickedBall& TrackedFrame::kicked_ball() const {
  // @@protoc_insertion_point(field_get:TrackedFrame.kicked_ball)
  return _internal_kicked_ball();
}
inline void TrackedFrame::unsafe_arena_set_allocated_kicked_ball(
    ::KickedBall* kicked_ball) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kicked_ball_);
  }
  _impl_.kicked_ball_ = kicked_ball;
  if (kicked_ball) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TrackedFrame.kicked_ball)
}
inline ::KickedBall* TrackedFrame::release_kicked_ball() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::KickedBall* temp = _impl_.kicked_ball_;
  _impl_.kicked_ball_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::KickedBall* TrackedFrame::unsafe_arena_release_kicked_ball() {
  // @@protoc_insertion_point(field_release:TrackedFrame.kicked_ball)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::KickedBall* temp = _impl_.kicked_ball_;
  _impl_.kicked_ball_ = nullptr;
  return temp;
}
inline ::KickedBall* TrackedFrame::_internal_mutable_kicked_ball() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.kicked_ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::KickedBall>(GetArenaForAllocation());
    _impl_.kicked_ball_ = p;
  }
  return _impl_.kicked_ball_;
}
inline ::KickedBall* TrackedFrame::mutable_kicked_ball() {
  ::KickedBall* _msg = _internal_mutable_kicked_ball();
  // @@protoc_insertion_point(field_mutable:TrackedFrame.kicked_ball)
  return _msg;
}
inline void TrackedFrame::set_allocated_kicked_ball(::KickedBall* kicked_ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kicked_ball_;
  }
  if (kicked_ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kicked_ball);
    if (message_arena != submessage_arena) {
      kicked_ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kicked_ball, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kicked_ball_ = kicked_ball;
  // @@protoc_insertion_point(field_set_allocated:TrackedFrame.kicked_ball)
}

// repeated .Capability capabilities = 6;
inline int TrackedFrame::_internal_capabilities_size() const {
  return _impl_.capabilities_.size();
}
inline int TrackedFrame::capabilities_size() const {
  return _internal_capabilities_size();
}
inline void TrackedFrame::clear_capabilities() {
  _impl_.capabilities_.Clear();
}
inline ::Capability TrackedFrame::_internal_capabilities(int index) const {
  return static_cast< ::Capability >(_impl_.capabilities_.Get(index));
}
inline ::Capability TrackedFrame::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:TrackedFrame.capabilities)
  return _internal_capabilities(index);
}
inline void TrackedFrame::set_capabilities(int index, ::Capability value) {
  assert(::Capability_IsValid(value));
  _impl_.capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:TrackedFrame.capabilities)
}
inline void TrackedFrame::_internal_add_capabilities(::Capability value) {
  assert(::Capability_IsValid(value));
  _impl_.capabilities_.Add(value);
}
inline void TrackedFrame::add_capabilities(::Capability value) {
  _internal_add_capabilities(value);
  // @@protoc_insertion_point(field_add:TrackedFrame.capabilities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrackedFrame::capabilities() const {
  // @@protoc_insertion_point(field_list:TrackedFrame.capabilities)
  return _impl_.capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrackedFrame::_internal_mutable_capabilities() {
  return &_impl_.capabilities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrackedFrame::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:TrackedFrame.capabilities)
  return _internal_mutable_capabilities();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Capability> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Capability>() {
  return ::Capability_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fvision_5fdetection_5ftracked_2eproto
