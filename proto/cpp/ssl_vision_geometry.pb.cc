// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_vision_geometry.proto

#include "ssl_vision_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Vector2f::Vector2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_CONSTEXPR SSL_FieldLineSegment::SSL_FieldLineSegment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.p1_)*/nullptr
  , /*decltype(_impl_.p2_)*/nullptr
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct SSL_FieldLineSegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_FieldLineSegmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_FieldLineSegmentDefaultTypeInternal() {}
  union {
    SSL_FieldLineSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_FieldLineSegmentDefaultTypeInternal _SSL_FieldLineSegment_default_instance_;
PROTOBUF_CONSTEXPR SSL_FieldCircularArc::SSL_FieldCircularArc(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.radius_)*/0
  , /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.thickness_)*/0
  , /*decltype(_impl_.type_)*/0} {}
struct SSL_FieldCircularArcDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_FieldCircularArcDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_FieldCircularArcDefaultTypeInternal() {}
  union {
    SSL_FieldCircularArc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_FieldCircularArcDefaultTypeInternal _SSL_FieldCircularArc_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryFieldSize::SSL_GeometryFieldSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_lines_)*/{}
  , /*decltype(_impl_.field_arcs_)*/{}
  , /*decltype(_impl_.field_length_)*/0
  , /*decltype(_impl_.field_width_)*/0
  , /*decltype(_impl_.goal_width_)*/0
  , /*decltype(_impl_.goal_depth_)*/0
  , /*decltype(_impl_.boundary_width_)*/0
  , /*decltype(_impl_.penalty_area_depth_)*/0
  , /*decltype(_impl_.penalty_area_width_)*/0
  , /*decltype(_impl_.center_circle_radius_)*/0
  , /*decltype(_impl_.line_thickness_)*/0
  , /*decltype(_impl_.goal_center_to_penalty_mark_)*/0
  , /*decltype(_impl_.goal_height_)*/0
  , /*decltype(_impl_.ball_radius_)*/0
  , /*decltype(_impl_.max_robot_radius_)*/0} {}
struct SSL_GeometryFieldSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryFieldSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryFieldSizeDefaultTypeInternal() {}
  union {
    SSL_GeometryFieldSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_id_)*/0u
  , /*decltype(_impl_.focal_length_)*/0
  , /*decltype(_impl_.principal_point_x_)*/0
  , /*decltype(_impl_.principal_point_y_)*/0
  , /*decltype(_impl_.distortion_)*/0
  , /*decltype(_impl_.q0_)*/0
  , /*decltype(_impl_.q1_)*/0
  , /*decltype(_impl_.q2_)*/0
  , /*decltype(_impl_.q3_)*/0
  , /*decltype(_impl_.tx_)*/0
  , /*decltype(_impl_.ty_)*/0
  , /*decltype(_impl_.tz_)*/0
  , /*decltype(_impl_.derived_camera_world_tx_)*/0
  , /*decltype(_impl_.derived_camera_world_ty_)*/0
  , /*decltype(_impl_.derived_camera_world_tz_)*/0
  , /*decltype(_impl_.pixel_image_width_)*/0u
  , /*decltype(_impl_.pixel_image_height_)*/0u} {}
struct SSL_GeometryCameraCalibrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryCameraCalibrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryCameraCalibrationDefaultTypeInternal() {}
  union {
    SSL_GeometryCameraCalibration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
PROTOBUF_CONSTEXPR SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acc_slide_)*/0
  , /*decltype(_impl_.acc_roll_)*/0
  , /*decltype(_impl_.k_switch_)*/0} {}
struct SSL_BallModelStraightTwoPhaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_BallModelStraightTwoPhaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_BallModelStraightTwoPhaseDefaultTypeInternal() {}
  union {
    SSL_BallModelStraightTwoPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_BallModelStraightTwoPhaseDefaultTypeInternal _SSL_BallModelStraightTwoPhase_default_instance_;
PROTOBUF_CONSTEXPR SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.damping_xy_first_hop_)*/0
  , /*decltype(_impl_.damping_xy_other_hops_)*/0
  , /*decltype(_impl_.damping_z_)*/0} {}
struct SSL_BallModelChipFixedLossDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_BallModelChipFixedLossDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_BallModelChipFixedLossDefaultTypeInternal() {}
  union {
    SSL_BallModelChipFixedLoss _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_BallModelChipFixedLossDefaultTypeInternal _SSL_BallModelChipFixedLoss_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryModels::SSL_GeometryModels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.straight_two_phase_)*/nullptr
  , /*decltype(_impl_.chip_fixed_loss_)*/nullptr} {}
struct SSL_GeometryModelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryModelsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryModelsDefaultTypeInternal() {}
  union {
    SSL_GeometryModels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryModelsDefaultTypeInternal _SSL_GeometryModels_default_instance_;
PROTOBUF_CONSTEXPR SSL_GeometryData::SSL_GeometryData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.calib_)*/{}
  , /*decltype(_impl_.field_)*/nullptr
  , /*decltype(_impl_.models_)*/nullptr} {}
struct SSL_GeometryDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SSL_GeometryDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SSL_GeometryDataDefaultTypeInternal() {}
  union {
    SSL_GeometryData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
static ::_pb::Metadata file_level_metadata_ssl_5fvision_5fgeometry_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fvision_5fgeometry_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ssl_5fvision_5fgeometry_2eproto = nullptr;

const uint32_t TableStruct_ssl_5fvision_5fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Vector2f, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.p1_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.p2_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.thickness_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldLineSegment, _impl_.type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.radius_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.thickness_),
  PROTOBUF_FIELD_OFFSET(::SSL_FieldCircularArc, _impl_.type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_length_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_depth_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.boundary_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_lines_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.field_arcs_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.penalty_area_depth_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.penalty_area_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.center_circle_radius_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.line_thickness_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_center_to_penalty_mark_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.goal_height_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.ball_radius_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryFieldSize, _impl_.max_robot_radius_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.camera_id_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.focal_length_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.principal_point_x_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.principal_point_y_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.distortion_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q0_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q1_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q2_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.q3_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.tx_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.ty_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.tz_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tx_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_ty_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.derived_camera_world_tz_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.pixel_image_width_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryCameraCalibration, _impl_.pixel_image_height_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_.acc_slide_),
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_.acc_roll_),
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelStraightTwoPhase, _impl_.k_switch_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_.damping_xy_first_hop_),
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_.damping_xy_other_hops_),
  PROTOBUF_FIELD_OFFSET(::SSL_BallModelChipFixedLoss, _impl_.damping_z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _impl_.straight_two_phase_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryModels, _impl_.chip_fixed_loss_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.field_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.calib_),
  PROTOBUF_FIELD_OFFSET(::SSL_GeometryData, _impl_.models_),
  0,
  ~0u,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::Vector2f)},
  { 10, 21, -1, sizeof(::SSL_FieldLineSegment)},
  { 26, 39, -1, sizeof(::SSL_FieldCircularArc)},
  { 46, 67, -1, sizeof(::SSL_GeometryFieldSize)},
  { 82, 105, -1, sizeof(::SSL_GeometryCameraCalibration)},
  { 122, 131, -1, sizeof(::SSL_BallModelStraightTwoPhase)},
  { 134, 143, -1, sizeof(::SSL_BallModelChipFixedLoss)},
  { 146, 154, -1, sizeof(::SSL_GeometryModels)},
  { 156, 165, -1, sizeof(::SSL_GeometryData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Vector2f_default_instance_._instance,
  &::_SSL_FieldLineSegment_default_instance_._instance,
  &::_SSL_FieldCircularArc_default_instance_._instance,
  &::_SSL_GeometryFieldSize_default_instance_._instance,
  &::_SSL_GeometryCameraCalibration_default_instance_._instance,
  &::_SSL_BallModelStraightTwoPhase_default_instance_._instance,
  &::_SSL_BallModelChipFixedLoss_default_instance_._instance,
  &::_SSL_GeometryModels_default_instance_._instance,
  &::_SSL_GeometryData_default_instance_._instance,
};

const char descriptor_table_protodef_ssl_5fvision_5fgeometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031ssl_vision_geometry.proto\" \n\010Vector2f\022"
  "\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"\210\001\n\024SSL_FieldLineS"
  "egment\022\014\n\004name\030\001 \002(\t\022\025\n\002p1\030\002 \002(\0132\t.Vecto"
  "r2f\022\025\n\002p2\030\003 \002(\0132\t.Vector2f\022\021\n\tthickness\030"
  "\004 \002(\002\022!\n\004type\030\005 \001(\0162\023.SSL_FieldShapeType"
  "\"\235\001\n\024SSL_FieldCircularArc\022\014\n\004name\030\001 \002(\t\022"
  "\031\n\006center\030\002 \002(\0132\t.Vector2f\022\016\n\006radius\030\003 \002"
  "(\002\022\n\n\002a1\030\004 \002(\002\022\n\n\002a2\030\005 \002(\002\022\021\n\tthickness\030"
  "\006 \002(\002\022!\n\004type\030\007 \001(\0162\023.SSL_FieldShapeType"
  "\"\260\003\n\025SSL_GeometryFieldSize\022\024\n\014field_leng"
  "th\030\001 \002(\005\022\023\n\013field_width\030\002 \002(\005\022\022\n\ngoal_wi"
  "dth\030\003 \002(\005\022\022\n\ngoal_depth\030\004 \002(\005\022\026\n\016boundar"
  "y_width\030\005 \002(\005\022*\n\013field_lines\030\006 \003(\0132\025.SSL"
  "_FieldLineSegment\022)\n\nfield_arcs\030\007 \003(\0132\025."
  "SSL_FieldCircularArc\022\032\n\022penalty_area_dep"
  "th\030\010 \001(\005\022\032\n\022penalty_area_width\030\t \001(\005\022\034\n\024"
  "center_circle_radius\030\n \001(\005\022\026\n\016line_thick"
  "ness\030\013 \001(\005\022#\n\033goal_center_to_penalty_mar"
  "k\030\014 \001(\005\022\023\n\013goal_height\030\r \001(\005\022\023\n\013ball_rad"
  "ius\030\016 \001(\002\022\030\n\020max_robot_radius\030\017 \001(\002\"\200\003\n\035"
  "SSL_GeometryCameraCalibration\022\021\n\tcamera_"
  "id\030\001 \002(\r\022\024\n\014focal_length\030\002 \002(\002\022\031\n\021princi"
  "pal_point_x\030\003 \002(\002\022\031\n\021principal_point_y\030\004"
  " \002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n\n\002q0\030\006 \002(\002\022\n\n\002"
  "q1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3\030\t \002(\002\022\n\n\002tx\030\n"
  " \002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002(\002\022\037\n\027derived_"
  "camera_world_tx\030\r \001(\002\022\037\n\027derived_camera_"
  "world_ty\030\016 \001(\002\022\037\n\027derived_camera_world_t"
  "z\030\017 \001(\002\022\031\n\021pixel_image_width\030\020 \001(\r\022\032\n\022pi"
  "xel_image_height\030\021 \001(\r\"V\n\035SSL_BallModelS"
  "traightTwoPhase\022\021\n\tacc_slide\030\001 \002(\001\022\020\n\010ac"
  "c_roll\030\002 \002(\001\022\020\n\010k_switch\030\003 \002(\001\"l\n\032SSL_Ba"
  "llModelChipFixedLoss\022\034\n\024damping_xy_first"
  "_hop\030\001 \002(\001\022\035\n\025damping_xy_other_hops\030\002 \002("
  "\001\022\021\n\tdamping_z\030\003 \002(\001\"\206\001\n\022SSL_GeometryMod"
  "els\022:\n\022straight_two_phase\030\001 \001(\0132\036.SSL_Ba"
  "llModelStraightTwoPhase\0224\n\017chip_fixed_lo"
  "ss\030\002 \001(\0132\033.SSL_BallModelChipFixedLoss\"\215\001"
  "\n\020SSL_GeometryData\022%\n\005field\030\001 \002(\0132\026.SSL_"
  "GeometryFieldSize\022-\n\005calib\030\002 \003(\0132\036.SSL_G"
  "eometryCameraCalibration\022#\n\006models\030\003 \001(\013"
  "2\023.SSL_GeometryModels*\333\002\n\022SSL_FieldShape"
  "Type\022\r\n\tUndefined\020\000\022\020\n\014CenterCircle\020\001\022\020\n"
  "\014TopTouchLine\020\002\022\023\n\017BottomTouchLine\020\003\022\020\n\014"
  "LeftGoalLine\020\004\022\021\n\rRightGoalLine\020\005\022\017\n\013Hal"
  "fwayLine\020\006\022\016\n\nCenterLine\020\007\022\026\n\022LeftPenalt"
  "yStretch\020\010\022\027\n\023RightPenaltyStretch\020\t\022\037\n\033L"
  "eftFieldLeftPenaltyStretch\020\n\022 \n\034LeftFiel"
  "dRightPenaltyStretch\020\013\022 \n\034RightFieldLeft"
  "PenaltyStretch\020\014\022!\n\035RightFieldRightPenal"
  "tyStretch\020\rB-Z+github.com/Rione-SSL/RACO"
  "ON-Pi/proto/pb_gen"
  ;
static ::_pbi::once_flag descriptor_table_ssl_5fvision_5fgeometry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ssl_5fvision_5fgeometry_2eproto = {
    false, false, 2058, descriptor_table_protodef_ssl_5fvision_5fgeometry_2eproto,
    "ssl_vision_geometry.proto",
    &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_ssl_5fvision_5fgeometry_2eproto::offsets,
    file_level_metadata_ssl_5fvision_5fgeometry_2eproto, file_level_enum_descriptors_ssl_5fvision_5fgeometry_2eproto,
    file_level_service_descriptors_ssl_5fvision_5fgeometry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter() {
  return &descriptor_table_ssl_5fvision_5fgeometry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ssl_5fvision_5fgeometry_2eproto(&descriptor_table_ssl_5fvision_5fgeometry_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SSL_FieldShapeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fvision_5fgeometry_2eproto);
  return file_level_enum_descriptors_ssl_5fvision_5fgeometry_2eproto[0];
}
bool SSL_FieldShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vector2f::_Internal {
 public:
  using HasBits = decltype(std::declval<Vector2f>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Vector2f::Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Vector2f)
}

inline void Vector2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:Vector2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2f)
  return target;
}

size_t Vector2f::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Vector2f)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2f)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2f::GetClassData() const { return &_class_data_; }


void Vector2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vector2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.y_)
      + sizeof(Vector2f::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[0]);
}

// ===================================================================

class SSL_FieldLineSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_FieldLineSegment>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2f& p1(const SSL_FieldLineSegment* msg);
  static void set_has_p1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Vector2f& p2(const SSL_FieldLineSegment* msg);
  static void set_has_p2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::Vector2f&
SSL_FieldLineSegment::_Internal::p1(const SSL_FieldLineSegment* msg) {
  return *msg->_impl_.p1_;
}
const ::Vector2f&
SSL_FieldLineSegment::_Internal::p2(const SSL_FieldLineSegment* msg) {
  return *msg->_impl_.p2_;
}
SSL_FieldLineSegment::SSL_FieldLineSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_FieldLineSegment)
}
SSL_FieldLineSegment::SSL_FieldLineSegment(const SSL_FieldLineSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_FieldLineSegment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.p1_){nullptr}
    , decltype(_impl_.p2_){nullptr}
    , decltype(_impl_.thickness_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_p1()) {
    _this->_impl_.p1_ = new ::Vector2f(*from._impl_.p1_);
  }
  if (from._internal_has_p2()) {
    _this->_impl_.p2_ = new ::Vector2f(*from._impl_.p2_);
  }
  ::memcpy(&_impl_.thickness_, &from._impl_.thickness_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.thickness_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldLineSegment)
}

inline void SSL_FieldLineSegment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.p1_){nullptr}
    , decltype(_impl_.p2_){nullptr}
    , decltype(_impl_.thickness_){0}
    , decltype(_impl_.type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSL_FieldLineSegment::~SSL_FieldLineSegment() {
  // @@protoc_insertion_point(destructor:SSL_FieldLineSegment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_FieldLineSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.p1_;
  if (this != internal_default_instance()) delete _impl_.p2_;
}

void SSL_FieldLineSegment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_FieldLineSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldLineSegment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.p1_ != nullptr);
      _impl_.p1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.p2_ != nullptr);
      _impl_.p2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.thickness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.thickness_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_FieldLineSegment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SSL_FieldLineSegment.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .Vector2f p1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_p1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Vector2f p2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float thickness = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_thickness(&has_bits);
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .SSL_FieldShapeType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_FieldShapeType_IsValid(val))) {
            _internal_set_type(static_cast<::SSL_FieldShapeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_FieldLineSegment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldLineSegment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SSL_FieldLineSegment.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .Vector2f p1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::p1(this),
        _Internal::p1(this).GetCachedSize(), target, stream);
  }

  // required .Vector2f p2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::p2(this),
        _Internal::p2(this).GetCachedSize(), target, stream);
  }

  // required float thickness = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_thickness(), target);
  }

  // optional .SSL_FieldShapeType type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldLineSegment)
  return target;
}

size_t SSL_FieldLineSegment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_p1()) {
    // required .Vector2f p1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p1_);
  }

  if (_internal_has_p2()) {
    // required .Vector2f p2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p2_);
  }

  if (_internal_has_thickness()) {
    // required float thickness = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_FieldLineSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldLineSegment)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .Vector2f p1 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p1_);

    // required .Vector2f p2 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.p2_);

    // required float thickness = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SSL_FieldShapeType type = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_FieldLineSegment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_FieldLineSegment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_FieldLineSegment::GetClassData() const { return &_class_data_; }


void SSL_FieldLineSegment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_FieldLineSegment*>(&to_msg);
  auto& from = static_cast<const SSL_FieldLineSegment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldLineSegment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_p1()->::Vector2f::MergeFrom(
          from._internal_p1());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_p2()->::Vector2f::MergeFrom(
          from._internal_p2());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.thickness_ = from._impl_.thickness_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_FieldLineSegment::CopyFrom(const SSL_FieldLineSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldLineSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldLineSegment::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_p1()) {
    if (!_impl_.p1_->IsInitialized()) return false;
  }
  if (_internal_has_p2()) {
    if (!_impl_.p2_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldLineSegment::InternalSwap(SSL_FieldLineSegment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.type_)
      + sizeof(SSL_FieldLineSegment::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SSL_FieldLineSegment, _impl_.p1_)>(
          reinterpret_cast<char*>(&_impl_.p1_),
          reinterpret_cast<char*>(&other->_impl_.p1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_FieldLineSegment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[1]);
}

// ===================================================================

class SSL_FieldCircularArc::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_FieldCircularArc>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Vector2f& center(const SSL_FieldCircularArc* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::Vector2f&
SSL_FieldCircularArc::_Internal::center(const SSL_FieldCircularArc* msg) {
  return *msg->_impl_.center_;
}
SSL_FieldCircularArc::SSL_FieldCircularArc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_FieldCircularArc)
}
SSL_FieldCircularArc::SSL_FieldCircularArc(const SSL_FieldCircularArc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_FieldCircularArc* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.radius_){}
    , decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.thickness_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::Vector2f(*from._impl_.center_);
  }
  ::memcpy(&_impl_.radius_, &from._impl_.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:SSL_FieldCircularArc)
}

inline void SSL_FieldCircularArc::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.radius_){0}
    , decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.thickness_){0}
    , decltype(_impl_.type_){0}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SSL_FieldCircularArc::~SSL_FieldCircularArc() {
  // @@protoc_insertion_point(destructor:SSL_FieldCircularArc)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_FieldCircularArc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.center_;
}

void SSL_FieldCircularArc::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_FieldCircularArc::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_FieldCircularArc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.center_ != nullptr);
      _impl_.center_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.type_) -
        reinterpret_cast<char*>(&_impl_.radius_)) + sizeof(_impl_.type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_FieldCircularArc::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "SSL_FieldCircularArc.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .Vector2f center = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float radius = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_radius(&has_bits);
          _impl_.radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float a1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_a1(&has_bits);
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float a2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_a2(&has_bits);
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float thickness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_thickness(&has_bits);
          _impl_.thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .SSL_FieldShapeType type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::SSL_FieldShapeType_IsValid(val))) {
            _internal_set_type(static_cast<::SSL_FieldShapeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_FieldCircularArc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_FieldCircularArc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "SSL_FieldCircularArc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .Vector2f center = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // required float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_radius(), target);
  }

  // required float a1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a1(), target);
  }

  // required float a2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_a2(), target);
  }

  // required float thickness = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_thickness(), target);
  }

  // optional .SSL_FieldShapeType type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_FieldCircularArc)
  return target;
}

size_t SSL_FieldCircularArc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_FieldCircularArc)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_center()) {
    // required .Vector2f center = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  if (_internal_has_radius()) {
    // required float radius = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_a1()) {
    // required float a1 = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_a2()) {
    // required float a2 = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_thickness()) {
    // required float thickness = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_FieldCircularArc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_FieldCircularArc)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .Vector2f center = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);

    // required float radius = 3;
    total_size += 1 + 4;

    // required float a1 = 4;
    total_size += 1 + 4;

    // required float a2 = 5;
    total_size += 1 + 4;

    // required float thickness = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .SSL_FieldShapeType type = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_FieldCircularArc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_FieldCircularArc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_FieldCircularArc::GetClassData() const { return &_class_data_; }


void SSL_FieldCircularArc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_FieldCircularArc*>(&to_msg);
  auto& from = static_cast<const SSL_FieldCircularArc&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_FieldCircularArc)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_center()->::Vector2f::MergeFrom(
          from._internal_center());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.radius_ = from._impl_.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.a1_ = from._impl_.a1_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.a2_ = from._impl_.a2_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.thickness_ = from._impl_.thickness_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_FieldCircularArc::CopyFrom(const SSL_FieldCircularArc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_FieldCircularArc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_FieldCircularArc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_center()) {
    if (!_impl_.center_->IsInitialized()) return false;
  }
  return true;
}

void SSL_FieldCircularArc::InternalSwap(SSL_FieldCircularArc* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.type_)
      + sizeof(SSL_FieldCircularArc::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SSL_FieldCircularArc, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_FieldCircularArc::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[2]);
}

// ===================================================================

class SSL_GeometryFieldSize::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryFieldSize>()._impl_._has_bits_);
  static void set_has_field_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_goal_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_goal_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boundary_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_penalty_area_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_penalty_area_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_center_circle_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_line_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_goal_center_to_penalty_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_goal_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ball_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_robot_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

SSL_GeometryFieldSize::SSL_GeometryFieldSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryFieldSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_lines_){from._impl_.field_lines_}
    , decltype(_impl_.field_arcs_){from._impl_.field_arcs_}
    , decltype(_impl_.field_length_){}
    , decltype(_impl_.field_width_){}
    , decltype(_impl_.goal_width_){}
    , decltype(_impl_.goal_depth_){}
    , decltype(_impl_.boundary_width_){}
    , decltype(_impl_.penalty_area_depth_){}
    , decltype(_impl_.penalty_area_width_){}
    , decltype(_impl_.center_circle_radius_){}
    , decltype(_impl_.line_thickness_){}
    , decltype(_impl_.goal_center_to_penalty_mark_){}
    , decltype(_impl_.goal_height_){}
    , decltype(_impl_.ball_radius_){}
    , decltype(_impl_.max_robot_radius_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.field_length_, &from._impl_.field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.max_robot_radius_) -
    reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.max_robot_radius_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}

inline void SSL_GeometryFieldSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_lines_){arena}
    , decltype(_impl_.field_arcs_){arena}
    , decltype(_impl_.field_length_){0}
    , decltype(_impl_.field_width_){0}
    , decltype(_impl_.goal_width_){0}
    , decltype(_impl_.goal_depth_){0}
    , decltype(_impl_.boundary_width_){0}
    , decltype(_impl_.penalty_area_depth_){0}
    , decltype(_impl_.penalty_area_width_){0}
    , decltype(_impl_.center_circle_radius_){0}
    , decltype(_impl_.line_thickness_){0}
    , decltype(_impl_.goal_center_to_penalty_mark_){0}
    , decltype(_impl_.goal_height_){0}
    , decltype(_impl_.ball_radius_){0}
    , decltype(_impl_.max_robot_radius_){0}
  };
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryFieldSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.field_lines_.~RepeatedPtrField();
  _impl_.field_arcs_.~RepeatedPtrField();
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_lines_.Clear();
  _impl_.field_arcs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.center_circle_radius_) -
        reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.center_circle_radius_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.line_thickness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.max_robot_radius_) -
        reinterpret_cast<char*>(&_impl_.line_thickness_)) + sizeof(_impl_.max_robot_radius_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryFieldSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 field_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field_length(&has_bits);
          _impl_.field_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 field_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field_width(&has_bits);
          _impl_.field_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 goal_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_goal_width(&has_bits);
          _impl_.goal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 goal_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_goal_depth(&has_bits);
          _impl_.goal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 boundary_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_boundary_width(&has_bits);
          _impl_.boundary_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_FieldLineSegment field_lines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_FieldCircularArc field_arcs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_arcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 penalty_area_depth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_penalty_area_depth(&has_bits);
          _impl_.penalty_area_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 penalty_area_width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_penalty_area_width(&has_bits);
          _impl_.penalty_area_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 center_circle_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_center_circle_radius(&has_bits);
          _impl_.center_circle_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 line_thickness = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_line_thickness(&has_bits);
          _impl_.line_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 goal_center_to_penalty_mark = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_goal_center_to_penalty_mark(&has_bits);
          _impl_.goal_center_to_penalty_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 goal_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_goal_height(&has_bits);
          _impl_.goal_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float ball_radius = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_ball_radius(&has_bits);
          _impl_.ball_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_robot_radius = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_max_robot_radius(&has_bits);
          _impl_.max_robot_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryFieldSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 field_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_length(), target);
  }

  // required int32 field_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_field_width(), target);
  }

  // required int32 goal_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_goal_width(), target);
  }

  // required int32 goal_depth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_goal_depth(), target);
  }

  // required int32 boundary_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_boundary_width(), target);
  }

  // repeated .SSL_FieldLineSegment field_lines = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .SSL_FieldCircularArc field_arcs = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_arcs_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_arcs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 penalty_area_depth = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_penalty_area_depth(), target);
  }

  // optional int32 penalty_area_width = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_penalty_area_width(), target);
  }

  // optional int32 center_circle_radius = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_center_circle_radius(), target);
  }

  // optional int32 line_thickness = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_line_thickness(), target);
  }

  // optional int32 goal_center_to_penalty_mark = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_goal_center_to_penalty_mark(), target);
  }

  // optional int32 goal_height = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_goal_height(), target);
  }

  // optional float ball_radius = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_ball_radius(), target);
  }

  // optional float max_robot_radius = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_max_robot_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_has_field_length()) {
    // required int32 field_length = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_length());
  }

  if (_internal_has_field_width()) {
    // required int32 field_width = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_width());
  }

  if (_internal_has_goal_width()) {
    // required int32 goal_width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_width());
  }

  if (_internal_has_goal_depth()) {
    // required int32 goal_depth = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_depth());
  }

  if (_internal_has_boundary_width()) {
    // required int32 boundary_width = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_boundary_width());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 field_length = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_length());

    // required int32 field_width = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_width());

    // required int32 goal_width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_width());

    // required int32 goal_depth = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_depth());

    // required int32 boundary_width = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_boundary_width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_FieldLineSegment field_lines = 6;
  total_size += 1UL * this->_internal_field_lines_size();
  for (const auto& msg : this->_impl_.field_lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .SSL_FieldCircularArc field_arcs = 7;
  total_size += 1UL * this->_internal_field_arcs_size();
  for (const auto& msg : this->_impl_.field_arcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional int32 penalty_area_depth = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_penalty_area_depth());
    }

    // optional int32 penalty_area_width = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_penalty_area_width());
    }

    // optional int32 center_circle_radius = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_center_circle_radius());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 line_thickness = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line_thickness());
    }

    // optional int32 goal_center_to_penalty_mark = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_center_to_penalty_mark());
    }

    // optional int32 goal_height = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_height());
    }

    // optional float ball_radius = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float max_robot_radius = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryFieldSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryFieldSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryFieldSize::GetClassData() const { return &_class_data_; }


void SSL_GeometryFieldSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryFieldSize*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryFieldSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_lines_.MergeFrom(from._impl_.field_lines_);
  _this->_impl_.field_arcs_.MergeFrom(from._impl_.field_arcs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_length_ = from._impl_.field_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_width_ = from._impl_.field_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.goal_width_ = from._impl_.goal_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.goal_depth_ = from._impl_.goal_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.boundary_width_ = from._impl_.boundary_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.penalty_area_depth_ = from._impl_.penalty_area_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.penalty_area_width_ = from._impl_.penalty_area_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.center_circle_radius_ = from._impl_.center_circle_radius_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.line_thickness_ = from._impl_.line_thickness_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.goal_center_to_penalty_mark_ = from._impl_.goal_center_to_penalty_mark_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.goal_height_ = from._impl_.goal_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ball_radius_ = from._impl_.ball_radius_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.max_robot_radius_ = from._impl_.max_robot_radius_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.field_lines_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.field_arcs_))
    return false;
  return true;
}

void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.field_lines_.InternalSwap(&other->_impl_.field_lines_);
  _impl_.field_arcs_.InternalSwap(&other->_impl_.field_arcs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.max_robot_radius_)
      + sizeof(SSL_GeometryFieldSize::_impl_.max_robot_radius_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryFieldSize, _impl_.field_length_)>(
          reinterpret_cast<char*>(&_impl_.field_length_),
          reinterpret_cast<char*>(&other->_impl_.field_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[3]);
}

// ===================================================================

class SSL_GeometryCameraCalibration::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryCameraCalibration>()._impl_._has_bits_);
  static void set_has_camera_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_focal_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_principal_point_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_principal_point_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distortion(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_q0(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_q1(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_q2(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_q3(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ty(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tz(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_derived_camera_world_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_derived_camera_world_ty(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_derived_camera_world_tz(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_pixel_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_pixel_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryCameraCalibration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_id_){}
    , decltype(_impl_.focal_length_){}
    , decltype(_impl_.principal_point_x_){}
    , decltype(_impl_.principal_point_y_){}
    , decltype(_impl_.distortion_){}
    , decltype(_impl_.q0_){}
    , decltype(_impl_.q1_){}
    , decltype(_impl_.q2_){}
    , decltype(_impl_.q3_){}
    , decltype(_impl_.tx_){}
    , decltype(_impl_.ty_){}
    , decltype(_impl_.tz_){}
    , decltype(_impl_.derived_camera_world_tx_){}
    , decltype(_impl_.derived_camera_world_ty_){}
    , decltype(_impl_.derived_camera_world_tz_){}
    , decltype(_impl_.pixel_image_width_){}
    , decltype(_impl_.pixel_image_height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.camera_id_, &from._impl_.camera_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pixel_image_height_) -
    reinterpret_cast<char*>(&_impl_.camera_id_)) + sizeof(_impl_.pixel_image_height_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryCameraCalibration)
}

inline void SSL_GeometryCameraCalibration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_id_){0u}
    , decltype(_impl_.focal_length_){0}
    , decltype(_impl_.principal_point_x_){0}
    , decltype(_impl_.principal_point_y_){0}
    , decltype(_impl_.distortion_){0}
    , decltype(_impl_.q0_){0}
    , decltype(_impl_.q1_){0}
    , decltype(_impl_.q2_){0}
    , decltype(_impl_.q3_){0}
    , decltype(_impl_.tx_){0}
    , decltype(_impl_.ty_){0}
    , decltype(_impl_.tz_){0}
    , decltype(_impl_.derived_camera_world_tx_){0}
    , decltype(_impl_.derived_camera_world_ty_){0}
    , decltype(_impl_.derived_camera_world_tz_){0}
    , decltype(_impl_.pixel_image_width_){0u}
    , decltype(_impl_.pixel_image_height_){0u}
  };
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryCameraCalibration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.camera_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.q2_) -
        reinterpret_cast<char*>(&_impl_.camera_id_)) + sizeof(_impl_.q2_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.q3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.pixel_image_width_) -
        reinterpret_cast<char*>(&_impl_.q3_)) + sizeof(_impl_.pixel_image_width_));
  }
  _impl_.pixel_image_height_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryCameraCalibration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_camera_id(&has_bits);
          _impl_.camera_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float focal_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_focal_length(&has_bits);
          _impl_.focal_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float principal_point_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_principal_point_x(&has_bits);
          _impl_.principal_point_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float principal_point_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_principal_point_y(&has_bits);
          _impl_.principal_point_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float distortion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_distortion(&has_bits);
          _impl_.distortion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float q0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_q0(&has_bits);
          _impl_.q0_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float q1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_q1(&has_bits);
          _impl_.q1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float q2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_q2(&has_bits);
          _impl_.q2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float q3 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_q3(&has_bits);
          _impl_.q3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float tx = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tx(&has_bits);
          _impl_.tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float ty = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_ty(&has_bits);
          _impl_.ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float tz = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tz(&has_bits);
          _impl_.tz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derived_camera_world_tx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_derived_camera_world_tx(&has_bits);
          _impl_.derived_camera_world_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derived_camera_world_ty = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_derived_camera_world_ty(&has_bits);
          _impl_.derived_camera_world_ty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float derived_camera_world_tz = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_derived_camera_world_tz(&has_bits);
          _impl_.derived_camera_world_tz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pixel_image_width = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_pixel_image_width(&has_bits);
          _impl_.pixel_image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pixel_image_height = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_pixel_image_height(&has_bits);
          _impl_.pixel_image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryCameraCalibration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 camera_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_camera_id(), target);
  }

  // required float focal_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_focal_length(), target);
  }

  // required float principal_point_x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_principal_point_x(), target);
  }

  // required float principal_point_y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_principal_point_y(), target);
  }

  // required float distortion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_distortion(), target);
  }

  // required float q0 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_q0(), target);
  }

  // required float q1 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_q1(), target);
  }

  // required float q2 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_q2(), target);
  }

  // required float q3 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_q3(), target);
  }

  // required float tx = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tx(), target);
  }

  // required float ty = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_ty(), target);
  }

  // required float tz = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tz(), target);
  }

  // optional float derived_camera_world_tx = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_derived_camera_world_tx(), target);
  }

  // optional float derived_camera_world_ty = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_derived_camera_world_ty(), target);
  }

  // optional float derived_camera_world_tz = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_derived_camera_world_tz(), target);
  }

  // optional uint32 pixel_image_width = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_pixel_image_width(), target);
  }

  // optional uint32 pixel_image_height = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_pixel_image_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
  return target;
}

size_t SSL_GeometryCameraCalibration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (_internal_has_camera_id()) {
    // required uint32 camera_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camera_id());
  }

  if (_internal_has_focal_length()) {
    // required float focal_length = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_principal_point_x()) {
    // required float principal_point_x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_principal_point_y()) {
    // required float principal_point_y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_distortion()) {
    // required float distortion = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_q0()) {
    // required float q0 = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_q1()) {
    // required float q1 = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_q2()) {
    // required float q2 = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_q3()) {
    // required float q3 = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_tx()) {
    // required float tx = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_ty()) {
    // required float ty = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_tz()) {
    // required float tz = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 camera_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_camera_id());

    // required float focal_length = 2;
    total_size += 1 + 4;

    // required float principal_point_x = 3;
    total_size += 1 + 4;

    // required float principal_point_y = 4;
    total_size += 1 + 4;

    // required float distortion = 5;
    total_size += 1 + 4;

    // required float q0 = 6;
    total_size += 1 + 4;

    // required float q1 = 7;
    total_size += 1 + 4;

    // required float q2 = 8;
    total_size += 1 + 4;

    // required float q3 = 9;
    total_size += 1 + 4;

    // required float tx = 10;
    total_size += 1 + 4;

    // required float ty = 11;
    total_size += 1 + 4;

    // required float tz = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000f000u) {
    // optional float derived_camera_world_tx = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_ty = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_tz = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 pixel_image_width = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_pixel_image_width());
    }

  }
  // optional uint32 pixel_image_height = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_pixel_image_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryCameraCalibration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryCameraCalibration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryCameraCalibration::GetClassData() const { return &_class_data_; }


void SSL_GeometryCameraCalibration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryCameraCalibration*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryCameraCalibration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.camera_id_ = from._impl_.camera_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.focal_length_ = from._impl_.focal_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.principal_point_x_ = from._impl_.principal_point_x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.principal_point_y_ = from._impl_.principal_point_y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distortion_ = from._impl_.distortion_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.q0_ = from._impl_.q0_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.q1_ = from._impl_.q1_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.q2_ = from._impl_.q2_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.q3_ = from._impl_.q3_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tx_ = from._impl_.tx_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.ty_ = from._impl_.ty_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tz_ = from._impl_.tz_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.derived_camera_world_tx_ = from._impl_.derived_camera_world_tx_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.derived_camera_world_ty_ = from._impl_.derived_camera_world_ty_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.derived_camera_world_tz_ = from._impl_.derived_camera_world_tz_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.pixel_image_width_ = from._impl_.pixel_image_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_pixel_image_height(from._internal_pixel_image_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.pixel_image_height_)
      + sizeof(SSL_GeometryCameraCalibration::_impl_.pixel_image_height_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryCameraCalibration, _impl_.camera_id_)>(
          reinterpret_cast<char*>(&_impl_.camera_id_),
          reinterpret_cast<char*>(&other->_impl_.camera_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[4]);
}

// ===================================================================

class SSL_BallModelStraightTwoPhase::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_BallModelStraightTwoPhase>()._impl_._has_bits_);
  static void set_has_acc_slide(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acc_roll(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_k_switch(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_BallModelStraightTwoPhase)
}
SSL_BallModelStraightTwoPhase::SSL_BallModelStraightTwoPhase(const SSL_BallModelStraightTwoPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_BallModelStraightTwoPhase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acc_slide_){}
    , decltype(_impl_.acc_roll_){}
    , decltype(_impl_.k_switch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.acc_slide_, &from._impl_.acc_slide_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.k_switch_) -
    reinterpret_cast<char*>(&_impl_.acc_slide_)) + sizeof(_impl_.k_switch_));
  // @@protoc_insertion_point(copy_constructor:SSL_BallModelStraightTwoPhase)
}

inline void SSL_BallModelStraightTwoPhase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acc_slide_){0}
    , decltype(_impl_.acc_roll_){0}
    , decltype(_impl_.k_switch_){0}
  };
}

SSL_BallModelStraightTwoPhase::~SSL_BallModelStraightTwoPhase() {
  // @@protoc_insertion_point(destructor:SSL_BallModelStraightTwoPhase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_BallModelStraightTwoPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSL_BallModelStraightTwoPhase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_BallModelStraightTwoPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_BallModelStraightTwoPhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.acc_slide_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.k_switch_) -
        reinterpret_cast<char*>(&_impl_.acc_slide_)) + sizeof(_impl_.k_switch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_BallModelStraightTwoPhase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double acc_slide = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_acc_slide(&has_bits);
          _impl_.acc_slide_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double acc_roll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_acc_roll(&has_bits);
          _impl_.acc_roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double k_switch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_k_switch(&has_bits);
          _impl_.k_switch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_BallModelStraightTwoPhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_BallModelStraightTwoPhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double acc_slide = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_acc_slide(), target);
  }

  // required double acc_roll = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_acc_roll(), target);
  }

  // required double k_switch = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_k_switch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_BallModelStraightTwoPhase)
  return target;
}

size_t SSL_BallModelStraightTwoPhase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_BallModelStraightTwoPhase)
  size_t total_size = 0;

  if (_internal_has_acc_slide()) {
    // required double acc_slide = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_acc_roll()) {
    // required double acc_roll = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_k_switch()) {
    // required double k_switch = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_BallModelStraightTwoPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_BallModelStraightTwoPhase)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double acc_slide = 1;
    total_size += 1 + 8;

    // required double acc_roll = 2;
    total_size += 1 + 8;

    // required double k_switch = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_BallModelStraightTwoPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_BallModelStraightTwoPhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_BallModelStraightTwoPhase::GetClassData() const { return &_class_data_; }


void SSL_BallModelStraightTwoPhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_BallModelStraightTwoPhase*>(&to_msg);
  auto& from = static_cast<const SSL_BallModelStraightTwoPhase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_BallModelStraightTwoPhase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.acc_slide_ = from._impl_.acc_slide_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.acc_roll_ = from._impl_.acc_roll_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.k_switch_ = from._impl_.k_switch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_BallModelStraightTwoPhase::CopyFrom(const SSL_BallModelStraightTwoPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_BallModelStraightTwoPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_BallModelStraightTwoPhase::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SSL_BallModelStraightTwoPhase::InternalSwap(SSL_BallModelStraightTwoPhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.k_switch_)
      + sizeof(SSL_BallModelStraightTwoPhase::_impl_.k_switch_)
      - PROTOBUF_FIELD_OFFSET(SSL_BallModelStraightTwoPhase, _impl_.acc_slide_)>(
          reinterpret_cast<char*>(&_impl_.acc_slide_),
          reinterpret_cast<char*>(&other->_impl_.acc_slide_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_BallModelStraightTwoPhase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[5]);
}

// ===================================================================

class SSL_BallModelChipFixedLoss::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_BallModelChipFixedLoss>()._impl_._has_bits_);
  static void set_has_damping_xy_first_hop(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damping_xy_other_hops(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damping_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_BallModelChipFixedLoss)
}
SSL_BallModelChipFixedLoss::SSL_BallModelChipFixedLoss(const SSL_BallModelChipFixedLoss& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_BallModelChipFixedLoss* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damping_xy_first_hop_){}
    , decltype(_impl_.damping_xy_other_hops_){}
    , decltype(_impl_.damping_z_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.damping_xy_first_hop_, &from._impl_.damping_xy_first_hop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.damping_z_) -
    reinterpret_cast<char*>(&_impl_.damping_xy_first_hop_)) + sizeof(_impl_.damping_z_));
  // @@protoc_insertion_point(copy_constructor:SSL_BallModelChipFixedLoss)
}

inline void SSL_BallModelChipFixedLoss::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.damping_xy_first_hop_){0}
    , decltype(_impl_.damping_xy_other_hops_){0}
    , decltype(_impl_.damping_z_){0}
  };
}

SSL_BallModelChipFixedLoss::~SSL_BallModelChipFixedLoss() {
  // @@protoc_insertion_point(destructor:SSL_BallModelChipFixedLoss)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_BallModelChipFixedLoss::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SSL_BallModelChipFixedLoss::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_BallModelChipFixedLoss::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_BallModelChipFixedLoss)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.damping_xy_first_hop_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.damping_z_) -
        reinterpret_cast<char*>(&_impl_.damping_xy_first_hop_)) + sizeof(_impl_.damping_z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_BallModelChipFixedLoss::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double damping_xy_first_hop = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_damping_xy_first_hop(&has_bits);
          _impl_.damping_xy_first_hop_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double damping_xy_other_hops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_damping_xy_other_hops(&has_bits);
          _impl_.damping_xy_other_hops_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double damping_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_damping_z(&has_bits);
          _impl_.damping_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_BallModelChipFixedLoss::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_BallModelChipFixedLoss)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double damping_xy_first_hop = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_damping_xy_first_hop(), target);
  }

  // required double damping_xy_other_hops = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_damping_xy_other_hops(), target);
  }

  // required double damping_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_damping_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_BallModelChipFixedLoss)
  return target;
}

size_t SSL_BallModelChipFixedLoss::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_BallModelChipFixedLoss)
  size_t total_size = 0;

  if (_internal_has_damping_xy_first_hop()) {
    // required double damping_xy_first_hop = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_damping_xy_other_hops()) {
    // required double damping_xy_other_hops = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_damping_z()) {
    // required double damping_z = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t SSL_BallModelChipFixedLoss::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_BallModelChipFixedLoss)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double damping_xy_first_hop = 1;
    total_size += 1 + 8;

    // required double damping_xy_other_hops = 2;
    total_size += 1 + 8;

    // required double damping_z = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_BallModelChipFixedLoss::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_BallModelChipFixedLoss::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_BallModelChipFixedLoss::GetClassData() const { return &_class_data_; }


void SSL_BallModelChipFixedLoss::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_BallModelChipFixedLoss*>(&to_msg);
  auto& from = static_cast<const SSL_BallModelChipFixedLoss&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_BallModelChipFixedLoss)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.damping_xy_first_hop_ = from._impl_.damping_xy_first_hop_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.damping_xy_other_hops_ = from._impl_.damping_xy_other_hops_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.damping_z_ = from._impl_.damping_z_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_BallModelChipFixedLoss::CopyFrom(const SSL_BallModelChipFixedLoss& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_BallModelChipFixedLoss)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_BallModelChipFixedLoss::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SSL_BallModelChipFixedLoss::InternalSwap(SSL_BallModelChipFixedLoss* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_z_)
      + sizeof(SSL_BallModelChipFixedLoss::_impl_.damping_z_)
      - PROTOBUF_FIELD_OFFSET(SSL_BallModelChipFixedLoss, _impl_.damping_xy_first_hop_)>(
          reinterpret_cast<char*>(&_impl_.damping_xy_first_hop_),
          reinterpret_cast<char*>(&other->_impl_.damping_xy_first_hop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_BallModelChipFixedLoss::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[6]);
}

// ===================================================================

class SSL_GeometryModels::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryModels>()._impl_._has_bits_);
  static const ::SSL_BallModelStraightTwoPhase& straight_two_phase(const SSL_GeometryModels* msg);
  static void set_has_straight_two_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SSL_BallModelChipFixedLoss& chip_fixed_loss(const SSL_GeometryModels* msg);
  static void set_has_chip_fixed_loss(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::SSL_BallModelStraightTwoPhase&
SSL_GeometryModels::_Internal::straight_two_phase(const SSL_GeometryModels* msg) {
  return *msg->_impl_.straight_two_phase_;
}
const ::SSL_BallModelChipFixedLoss&
SSL_GeometryModels::_Internal::chip_fixed_loss(const SSL_GeometryModels* msg) {
  return *msg->_impl_.chip_fixed_loss_;
}
SSL_GeometryModels::SSL_GeometryModels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryModels)
}
SSL_GeometryModels::SSL_GeometryModels(const SSL_GeometryModels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryModels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.straight_two_phase_){nullptr}
    , decltype(_impl_.chip_fixed_loss_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_straight_two_phase()) {
    _this->_impl_.straight_two_phase_ = new ::SSL_BallModelStraightTwoPhase(*from._impl_.straight_two_phase_);
  }
  if (from._internal_has_chip_fixed_loss()) {
    _this->_impl_.chip_fixed_loss_ = new ::SSL_BallModelChipFixedLoss(*from._impl_.chip_fixed_loss_);
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryModels)
}

inline void SSL_GeometryModels::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.straight_two_phase_){nullptr}
    , decltype(_impl_.chip_fixed_loss_){nullptr}
  };
}

SSL_GeometryModels::~SSL_GeometryModels() {
  // @@protoc_insertion_point(destructor:SSL_GeometryModels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryModels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.straight_two_phase_;
  if (this != internal_default_instance()) delete _impl_.chip_fixed_loss_;
}

void SSL_GeometryModels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryModels::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryModels)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.straight_two_phase_ != nullptr);
      _impl_.straight_two_phase_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.chip_fixed_loss_ != nullptr);
      _impl_.chip_fixed_loss_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryModels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_straight_two_phase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chip_fixed_loss(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryModels::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryModels)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::straight_two_phase(this),
        _Internal::straight_two_phase(this).GetCachedSize(), target, stream);
  }

  // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chip_fixed_loss(this),
        _Internal::chip_fixed_loss(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryModels)
  return target;
}

size_t SSL_GeometryModels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryModels)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .SSL_BallModelStraightTwoPhase straight_two_phase = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.straight_two_phase_);
    }

    // optional .SSL_BallModelChipFixedLoss chip_fixed_loss = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.chip_fixed_loss_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryModels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryModels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryModels::GetClassData() const { return &_class_data_; }


void SSL_GeometryModels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryModels*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryModels&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryModels)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_straight_two_phase()->::SSL_BallModelStraightTwoPhase::MergeFrom(
          from._internal_straight_two_phase());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_chip_fixed_loss()->::SSL_BallModelChipFixedLoss::MergeFrom(
          from._internal_chip_fixed_loss());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryModels::CopyFrom(const SSL_GeometryModels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryModels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryModels::IsInitialized() const {
  if (_internal_has_straight_two_phase()) {
    if (!_impl_.straight_two_phase_->IsInitialized()) return false;
  }
  if (_internal_has_chip_fixed_loss()) {
    if (!_impl_.chip_fixed_loss_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryModels::InternalSwap(SSL_GeometryModels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.chip_fixed_loss_)
      + sizeof(SSL_GeometryModels::_impl_.chip_fixed_loss_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryModels, _impl_.straight_two_phase_)>(
          reinterpret_cast<char*>(&_impl_.straight_two_phase_),
          reinterpret_cast<char*>(&other->_impl_.straight_two_phase_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryModels::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[7]);
}

// ===================================================================

class SSL_GeometryData::_Internal {
 public:
  using HasBits = decltype(std::declval<SSL_GeometryData>()._impl_._has_bits_);
  static const ::SSL_GeometryFieldSize& field(const SSL_GeometryData* msg);
  static void set_has_field(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::SSL_GeometryModels& models(const SSL_GeometryData* msg);
  static void set_has_models(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::SSL_GeometryFieldSize&
SSL_GeometryData::_Internal::field(const SSL_GeometryData* msg) {
  return *msg->_impl_.field_;
}
const ::SSL_GeometryModels&
SSL_GeometryData::_Internal::models(const SSL_GeometryData* msg) {
  return *msg->_impl_.models_;
}
SSL_GeometryData::SSL_GeometryData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SSL_GeometryData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.calib_){from._impl_.calib_}
    , decltype(_impl_.field_){nullptr}
    , decltype(_impl_.models_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_field()) {
    _this->_impl_.field_ = new ::SSL_GeometryFieldSize(*from._impl_.field_);
  }
  if (from._internal_has_models()) {
    _this->_impl_.models_ = new ::SSL_GeometryModels(*from._impl_.models_);
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}

inline void SSL_GeometryData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.calib_){arena}
    , decltype(_impl_.field_){nullptr}
    , decltype(_impl_.models_){nullptr}
  };
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SSL_GeometryData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.calib_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.field_;
  if (this != internal_default_instance()) delete _impl_.models_;
}

void SSL_GeometryData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.calib_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.field_ != nullptr);
      _impl_.field_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.models_ != nullptr);
      _impl_.models_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSL_GeometryData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .SSL_GeometryFieldSize field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_field(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_calib(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .SSL_GeometryModels models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_models(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SSL_GeometryData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .SSL_GeometryFieldSize field = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::field(this),
        _Internal::field(this).GetCachedSize(), target, stream);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_calib_size()); i < n; i++) {
    const auto& repfield = this->_internal_calib(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .SSL_GeometryModels models = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::models(this),
        _Internal::models(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
  size_t total_size = 0;

  // required .SSL_GeometryFieldSize field = 1;
  if (_internal_has_field()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.field_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  total_size += 1UL * this->_internal_calib_size();
  for (const auto& msg : this->_impl_.calib_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .SSL_GeometryModels models = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.models_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SSL_GeometryData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SSL_GeometryData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SSL_GeometryData::GetClassData() const { return &_class_data_; }


void SSL_GeometryData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SSL_GeometryData*>(&to_msg);
  auto& from = static_cast<const SSL_GeometryData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.calib_.MergeFrom(from._impl_.calib_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_field()->::SSL_GeometryFieldSize::MergeFrom(
          from._internal_field());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_models()->::SSL_GeometryModels::MergeFrom(
          from._internal_models());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.calib_))
    return false;
  if (_internal_has_field()) {
    if (!_impl_.field_->IsInitialized()) return false;
  }
  if (_internal_has_models()) {
    if (!_impl_.models_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.calib_.InternalSwap(&other->_impl_.calib_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.models_)
      + sizeof(SSL_GeometryData::_impl_.models_)
      - PROTOBUF_FIELD_OFFSET(SSL_GeometryData, _impl_.field_)>(
          reinterpret_cast<char*>(&_impl_.field_),
          reinterpret_cast<char*>(&other->_impl_.field_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSL_GeometryData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fvision_5fgeometry_2eproto_getter, &descriptor_table_ssl_5fvision_5fgeometry_2eproto_once,
      file_level_metadata_ssl_5fvision_5fgeometry_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector2f*
Arena::CreateMaybeMessage< ::Vector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_FieldLineSegment*
Arena::CreateMaybeMessage< ::SSL_FieldLineSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_FieldLineSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_FieldCircularArc*
Arena::CreateMaybeMessage< ::SSL_FieldCircularArc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_FieldCircularArc >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryFieldSize*
Arena::CreateMaybeMessage< ::SSL_GeometryFieldSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryFieldSize >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryCameraCalibration*
Arena::CreateMaybeMessage< ::SSL_GeometryCameraCalibration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryCameraCalibration >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_BallModelStraightTwoPhase*
Arena::CreateMaybeMessage< ::SSL_BallModelStraightTwoPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_BallModelStraightTwoPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_BallModelChipFixedLoss*
Arena::CreateMaybeMessage< ::SSL_BallModelChipFixedLoss >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_BallModelChipFixedLoss >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryModels*
Arena::CreateMaybeMessage< ::SSL_GeometryModels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryModels >(arena);
}
template<> PROTOBUF_NOINLINE ::SSL_GeometryData*
Arena::CreateMaybeMessage< ::SSL_GeometryData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SSL_GeometryData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
