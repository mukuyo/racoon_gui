// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: to_racoonai.proto

#include "to_racoonai.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Robot_Infos::Robot_Infos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.robot_id_)*/0u
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.theta_)*/0
  , /*decltype(_impl_.distance_ball_robot_)*/0
  , /*decltype(_impl_.radian_ball_robot_)*/0
  , /*decltype(_impl_.diff_x_)*/0
  , /*decltype(_impl_.diff_y_)*/0
  , /*decltype(_impl_.diff_theta_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.slope_)*/0
  , /*decltype(_impl_.intercept_)*/0
  , /*decltype(_impl_.angular_velocity_)*/0
  , /*decltype(_impl_.visible_)*/false
  , /*decltype(_impl_.ball_catch_)*/false
  , /*decltype(_impl_.online_)*/false
  , /*decltype(_impl_.battery_voltage_)*/0} {}
struct Robot_InfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Robot_InfosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Robot_InfosDefaultTypeInternal() {}
  union {
    Robot_Infos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Robot_InfosDefaultTypeInternal _Robot_Infos_default_instance_;
PROTOBUF_CONSTEXPR Ball_Info::Ball_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.filtered_x_)*/0
  , /*decltype(_impl_.filtered_y_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.diff_x_)*/0
  , /*decltype(_impl_.diff_y_)*/0
  , /*decltype(_impl_.slope_radian_)*/0
  , /*decltype(_impl_.intercept_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_.slope_)*/0} {}
struct Ball_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ball_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ball_InfoDefaultTypeInternal() {}
  union {
    Ball_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ball_InfoDefaultTypeInternal _Ball_Info_default_instance_;
PROTOBUF_CONSTEXPR Geometry_Info::Geometry_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.field_length_)*/0
  , /*decltype(_impl_.field_width_)*/0
  , /*decltype(_impl_.goal_width_)*/0
  , /*decltype(_impl_.goal_depth_)*/0
  , /*decltype(_impl_.boundary_width_)*/0
  , /*decltype(_impl_.penalty_area_depth_)*/0
  , /*decltype(_impl_.penalty_area_width_)*/0
  , /*decltype(_impl_.center_circle_radius_)*/0
  , /*decltype(_impl_.line_thickness_)*/0
  , /*decltype(_impl_.goal_center_to_penalty_mark_)*/0
  , /*decltype(_impl_.goal_height_)*/0
  , /*decltype(_impl_.ball_radius_)*/0
  , /*decltype(_impl_.max_robot_radius_)*/0
  , /*decltype(_impl_.goal_x_)*/0
  , /*decltype(_impl_.goal_y_)*/0} {}
struct Geometry_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Geometry_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Geometry_InfoDefaultTypeInternal() {}
  union {
    Geometry_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Geometry_InfoDefaultTypeInternal _Geometry_Info_default_instance_;
PROTOBUF_CONSTEXPR Referee_Info::Referee_Info(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_.stage_)*/0
  , /*decltype(_impl_.yellow_cards_)*/0u
  , /*decltype(_impl_.red_cards_)*/0u
  , /*decltype(_impl_.pre_command_)*/0
  , /*decltype(_impl_.next_command_)*/0
  , /*decltype(_impl_.ball_placement_x_)*/0
  , /*decltype(_impl_.ball_placement_y_)*/0} {}
struct Referee_InfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Referee_InfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Referee_InfoDefaultTypeInternal() {}
  union {
    Referee_Info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Referee_InfoDefaultTypeInternal _Referee_Info_default_instance_;
PROTOBUF_CONSTEXPR RobotIP_Infos::RobotIP_Infos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.robot_id_)*/0u} {}
struct RobotIP_InfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotIP_InfosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotIP_InfosDefaultTypeInternal() {}
  union {
    RobotIP_Infos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotIP_InfosDefaultTypeInternal _RobotIP_Infos_default_instance_;
PROTOBUF_CONSTEXPR Other_Infos::Other_Infos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_of_cameras_)*/0
  , /*decltype(_impl_.num_of_our_robots_)*/0
  , /*decltype(_impl_.num_of_enemy_robots_)*/0
  , /*decltype(_impl_.secperframe_)*/0
  , /*decltype(_impl_.attack_direction_)*/0
  , /*decltype(_impl_.is_vision_recv_)*/false
  , /*decltype(_impl_.is_ball_moving_)*/false} {}
struct Other_InfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Other_InfosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Other_InfosDefaultTypeInternal() {}
  union {
    Other_Infos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Other_InfosDefaultTypeInternal _Other_Infos_default_instance_;
PROTOBUF_CONSTEXPR RacoonMW_Packet::RacoonMW_Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.our_robots_)*/{}
  , /*decltype(_impl_.enemy_robots_)*/{}
  , /*decltype(_impl_.robot_ips_)*/{}
  , /*decltype(_impl_.geometry_)*/nullptr
  , /*decltype(_impl_.ball_)*/nullptr
  , /*decltype(_impl_.referee_)*/nullptr
  , /*decltype(_impl_.info_)*/nullptr} {}
struct RacoonMW_PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RacoonMW_PacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RacoonMW_PacketDefaultTypeInternal() {}
  union {
    RacoonMW_Packet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RacoonMW_PacketDefaultTypeInternal _RacoonMW_Packet_default_instance_;
static ::_pb::Metadata file_level_metadata_to_5fracoonai_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_to_5fracoonai_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_to_5fracoonai_2eproto = nullptr;

const uint32_t TableStruct_to_5fracoonai_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.theta_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.distance_ball_robot_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.radian_ball_robot_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.diff_x_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.diff_y_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.diff_theta_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.slope_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.intercept_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.visible_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.ball_catch_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.online_),
  PROTOBUF_FIELD_OFFSET(::Robot_Infos, _impl_.battery_voltage_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.filtered_x_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.filtered_y_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.diff_x_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.diff_y_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.slope_radian_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.intercept_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.speed_),
  PROTOBUF_FIELD_OFFSET(::Ball_Info, _impl_.slope_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.field_length_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.field_width_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.goal_width_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.goal_depth_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.boundary_width_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.penalty_area_depth_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.penalty_area_width_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.center_circle_radius_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.line_thickness_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.goal_center_to_penalty_mark_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.goal_height_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.ball_radius_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.max_robot_radius_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.goal_x_),
  PROTOBUF_FIELD_OFFSET(::Geometry_Info, _impl_.goal_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.yellow_cards_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.red_cards_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.pre_command_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.next_command_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.ball_placement_x_),
  PROTOBUF_FIELD_OFFSET(::Referee_Info, _impl_.ball_placement_y_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::RobotIP_Infos, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RobotIP_Infos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RobotIP_Infos, _impl_.robot_id_),
  PROTOBUF_FIELD_OFFSET(::RobotIP_Infos, _impl_.ip_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.num_of_cameras_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.num_of_our_robots_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.num_of_enemy_robots_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.secperframe_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.is_vision_recv_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.attack_direction_),
  PROTOBUF_FIELD_OFFSET(::Other_Infos, _impl_.is_ball_moving_),
  0,
  1,
  2,
  3,
  5,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.our_robots_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.enemy_robots_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.geometry_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.ball_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.referee_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.robot_ips_),
  PROTOBUF_FIELD_OFFSET(::RacoonMW_Packet, _impl_.info_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, -1, sizeof(::Robot_Infos)},
  { 40, 57, -1, sizeof(::Ball_Info)},
  { 68, 89, -1, sizeof(::Geometry_Info)},
  { 104, 118, -1, sizeof(::Referee_Info)},
  { 126, 134, -1, sizeof(::RobotIP_Infos)},
  { 136, 149, -1, sizeof(::Other_Infos)},
  { 156, 169, -1, sizeof(::RacoonMW_Packet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Robot_Infos_default_instance_._instance,
  &::_Ball_Info_default_instance_._instance,
  &::_Geometry_Info_default_instance_._instance,
  &::_Referee_Info_default_instance_._instance,
  &::_RobotIP_Infos_default_instance_._instance,
  &::_Other_Infos_default_instance_._instance,
  &::_RacoonMW_Packet_default_instance_._instance,
};

const char descriptor_table_protodef_to_5fracoonai_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021to_racoonai.proto\"\311\002\n\013Robot_Infos\022\020\n\010r"
  "obot_id\030\001 \002(\r\022\t\n\001x\030\002 \002(\002\022\t\n\001y\030\003 \002(\002\022\r\n\005t"
  "heta\030\004 \002(\002\022\033\n\023distance_ball_robot\030\005 \001(\002\022"
  "\031\n\021radian_ball_robot\030\006 \001(\002\022\016\n\006diff_x\030\007 \002"
  "(\002\022\016\n\006diff_y\030\010 \002(\002\022\022\n\ndiff_theta\030\t \002(\002\022\r"
  "\n\005speed\030\n \002(\002\022\r\n\005slope\030\013 \002(\002\022\021\n\tintercep"
  "t\030\014 \002(\002\022\030\n\020angular_velocity\030\r \002(\002\022\017\n\007vis"
  "ible\030\016 \002(\010\022\022\n\nball_catch\030\017 \001(\010\022\016\n\006online"
  "\030\020 \001(\010\022\027\n\017battery_voltage\030\021 \001(\002\"\273\001\n\tBall"
  "_Info\022\022\n\nfiltered_x\030\001 \002(\002\022\022\n\nfiltered_y\030"
  "\002 \002(\002\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\t\n\001z\030\005 \002(\002\022\016"
  "\n\006diff_x\030\006 \002(\002\022\016\n\006diff_y\030\007 \002(\002\022\024\n\014slope_"
  "radian\030\010 \002(\002\022\021\n\tintercept\030\t \002(\002\022\r\n\005speed"
  "\030\n \002(\002\022\r\n\005slope\030\013 \002(\002\"\361\002\n\rGeometry_Info\022"
  "\024\n\014field_length\030\001 \002(\005\022\023\n\013field_width\030\002 \002"
  "(\005\022\022\n\ngoal_width\030\003 \002(\005\022\022\n\ngoal_depth\030\004 \002"
  "(\005\022\026\n\016boundary_width\030\005 \002(\005\022\032\n\022penalty_ar"
  "ea_depth\030\006 \001(\005\022\032\n\022penalty_area_width\030\007 \001"
  "(\005\022\034\n\024center_circle_radius\030\010 \001(\005\022\026\n\016line"
  "_thickness\030\t \001(\005\022#\n\033goal_center_to_penal"
  "ty_mark\030\n \001(\005\022\023\n\013goal_height\030\013 \001(\005\022\023\n\013ba"
  "ll_radius\030\014 \001(\002\022\030\n\020max_robot_radius\030\r \001("
  "\002\022\016\n\006goal_x\030\016 \002(\002\022\016\n\006goal_y\030\017 \002(\002\"\365\007\n\014Re"
  "feree_Info\022&\n\007command\030\001 \002(\0162\025.Referee_In"
  "fo.Command\022\"\n\005stage\030\002 \002(\0162\023.Referee_Info"
  ".Stage\022\024\n\014yellow_cards\030\003 \002(\r\022\021\n\tred_card"
  "s\030\004 \002(\r\022*\n\013pre_command\030\005 \001(\0162\025.Referee_I"
  "nfo.Command\022+\n\014next_command\030\006 \001(\0162\025.Refe"
  "ree_Info.Command\022\030\n\020ball_placement_x\030\007 \001"
  "(\002\022\030\n\020ball_placement_y\030\010 \001(\002\"\216\003\n\007Command"
  "\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL_START\020\002\022\017"
  "\n\013FORCE_START\020\003\022\032\n\026PREPARE_KICKOFF_YELLO"
  "W\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022\032\n\026PREPARE"
  "_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_PENALTY_BLU"
  "E\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n\020DIRECT_FR"
  "EE_BLUE\020\t\022\030\n\024INDIRECT_FREE_YELLOW\020\n\022\026\n\022I"
  "NDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEOUT_YELLOW\020\014\022"
  "\020\n\014TIMEOUT_BLUE\020\r\022\023\n\013GOAL_YELLOW\020\016\032\002\010\001\022\021"
  "\n\tGOAL_BLUE\020\017\032\002\010\001\022\031\n\025BALL_PLACEMENT_YELL"
  "OW\020\020\022\027\n\023BALL_PLACEMENT_BLUE\020\021\"\321\002\n\005Stage\022"
  "\031\n\025NORMAL_FIRST_HALF_PRE\020\000\022\025\n\021NORMAL_FIR"
  "ST_HALF\020\001\022\024\n\020NORMAL_HALF_TIME\020\002\022\032\n\026NORMA"
  "L_SECOND_HALF_PRE\020\003\022\026\n\022NORMAL_SECOND_HAL"
  "F\020\004\022\024\n\020EXTRA_TIME_BREAK\020\005\022\030\n\024EXTRA_FIRST"
  "_HALF_PRE\020\006\022\024\n\020EXTRA_FIRST_HALF\020\007\022\023\n\017EXT"
  "RA_HALF_TIME\020\010\022\031\n\025EXTRA_SECOND_HALF_PRE\020"
  "\t\022\025\n\021EXTRA_SECOND_HALF\020\n\022\032\n\026PENALTY_SHOO"
  "TOUT_BREAK\020\013\022\024\n\020PENALTY_SHOOTOUT\020\014\022\r\n\tPO"
  "ST_GAME\020\r\"-\n\rRobotIP_Infos\022\020\n\010robot_id\030\001"
  " \002(\r\022\n\n\002ip\030\002 \002(\t\"\274\001\n\013Other_Infos\022\026\n\016num_"
  "of_cameras\030\001 \002(\005\022\031\n\021num_of_our_robots\030\002 "
  "\002(\005\022\033\n\023num_of_enemy_robots\030\003 \002(\005\022\023\n\013secp"
  "erframe\030\004 \002(\002\022\026\n\016is_vision_recv\030\005 \002(\010\022\030\n"
  "\020attack_direction\030\006 \002(\005\022\026\n\016is_ball_movin"
  "g\030\007 \002(\010\"\362\001\n\017RacoonMW_Packet\022 \n\nour_robot"
  "s\030\001 \003(\0132\014.Robot_Infos\022\"\n\014enemy_robots\030\002 "
  "\003(\0132\014.Robot_Infos\022 \n\010geometry\030\003 \002(\0132\016.Ge"
  "ometry_Info\022\030\n\004ball\030\004 \002(\0132\n.Ball_Info\022\036\n"
  "\007referee\030\005 \002(\0132\r.Referee_Info\022!\n\trobot_i"
  "ps\030\006 \003(\0132\016.RobotIP_Infos\022\032\n\004info\030\007 \002(\0132\014"
  ".Other_InfosB-Z+github.com/Rione-SSL/RAC"
  "OON-Pi/proto/pb_gen"
  ;
static ::_pbi::once_flag descriptor_table_to_5fracoonai_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_to_5fracoonai_2eproto = {
    false, false, 2459, descriptor_table_protodef_to_5fracoonai_2eproto,
    "to_racoonai.proto",
    &descriptor_table_to_5fracoonai_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_to_5fracoonai_2eproto::offsets,
    file_level_metadata_to_5fracoonai_2eproto, file_level_enum_descriptors_to_5fracoonai_2eproto,
    file_level_service_descriptors_to_5fracoonai_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_to_5fracoonai_2eproto_getter() {
  return &descriptor_table_to_5fracoonai_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_to_5fracoonai_2eproto(&descriptor_table_to_5fracoonai_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Info_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_to_5fracoonai_2eproto);
  return file_level_enum_descriptors_to_5fracoonai_2eproto[0];
}
bool Referee_Info_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Referee_Info_Command Referee_Info::HALT;
constexpr Referee_Info_Command Referee_Info::STOP;
constexpr Referee_Info_Command Referee_Info::NORMAL_START;
constexpr Referee_Info_Command Referee_Info::FORCE_START;
constexpr Referee_Info_Command Referee_Info::PREPARE_KICKOFF_YELLOW;
constexpr Referee_Info_Command Referee_Info::PREPARE_KICKOFF_BLUE;
constexpr Referee_Info_Command Referee_Info::PREPARE_PENALTY_YELLOW;
constexpr Referee_Info_Command Referee_Info::PREPARE_PENALTY_BLUE;
constexpr Referee_Info_Command Referee_Info::DIRECT_FREE_YELLOW;
constexpr Referee_Info_Command Referee_Info::DIRECT_FREE_BLUE;
constexpr Referee_Info_Command Referee_Info::INDIRECT_FREE_YELLOW;
constexpr Referee_Info_Command Referee_Info::INDIRECT_FREE_BLUE;
constexpr Referee_Info_Command Referee_Info::TIMEOUT_YELLOW;
constexpr Referee_Info_Command Referee_Info::TIMEOUT_BLUE;
constexpr Referee_Info_Command Referee_Info::GOAL_YELLOW;
constexpr Referee_Info_Command Referee_Info::GOAL_BLUE;
constexpr Referee_Info_Command Referee_Info::BALL_PLACEMENT_YELLOW;
constexpr Referee_Info_Command Referee_Info::BALL_PLACEMENT_BLUE;
constexpr Referee_Info_Command Referee_Info::Command_MIN;
constexpr Referee_Info_Command Referee_Info::Command_MAX;
constexpr int Referee_Info::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Info_Stage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_to_5fracoonai_2eproto);
  return file_level_enum_descriptors_to_5fracoonai_2eproto[1];
}
bool Referee_Info_Stage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Referee_Info_Stage Referee_Info::NORMAL_FIRST_HALF_PRE;
constexpr Referee_Info_Stage Referee_Info::NORMAL_FIRST_HALF;
constexpr Referee_Info_Stage Referee_Info::NORMAL_HALF_TIME;
constexpr Referee_Info_Stage Referee_Info::NORMAL_SECOND_HALF_PRE;
constexpr Referee_Info_Stage Referee_Info::NORMAL_SECOND_HALF;
constexpr Referee_Info_Stage Referee_Info::EXTRA_TIME_BREAK;
constexpr Referee_Info_Stage Referee_Info::EXTRA_FIRST_HALF_PRE;
constexpr Referee_Info_Stage Referee_Info::EXTRA_FIRST_HALF;
constexpr Referee_Info_Stage Referee_Info::EXTRA_HALF_TIME;
constexpr Referee_Info_Stage Referee_Info::EXTRA_SECOND_HALF_PRE;
constexpr Referee_Info_Stage Referee_Info::EXTRA_SECOND_HALF;
constexpr Referee_Info_Stage Referee_Info::PENALTY_SHOOTOUT_BREAK;
constexpr Referee_Info_Stage Referee_Info::PENALTY_SHOOTOUT;
constexpr Referee_Info_Stage Referee_Info::POST_GAME;
constexpr Referee_Info_Stage Referee_Info::Stage_MIN;
constexpr Referee_Info_Stage Referee_Info::Stage_MAX;
constexpr int Referee_Info::Stage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Robot_Infos::_Internal {
 public:
  using HasBits = decltype(std::declval<Robot_Infos>()._impl_._has_bits_);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance_ball_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radian_ball_robot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_diff_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_diff_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_diff_theta(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_slope(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_intercept(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_visible(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ball_catch(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_battery_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fcf) ^ 0x00003fcf) != 0;
  }
};

Robot_Infos::Robot_Infos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Robot_Infos)
}
Robot_Infos::Robot_Infos(const Robot_Infos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Robot_Infos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robot_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.theta_){}
    , decltype(_impl_.distance_ball_robot_){}
    , decltype(_impl_.radian_ball_robot_){}
    , decltype(_impl_.diff_x_){}
    , decltype(_impl_.diff_y_){}
    , decltype(_impl_.diff_theta_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.slope_){}
    , decltype(_impl_.intercept_){}
    , decltype(_impl_.angular_velocity_){}
    , decltype(_impl_.visible_){}
    , decltype(_impl_.ball_catch_){}
    , decltype(_impl_.online_){}
    , decltype(_impl_.battery_voltage_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.robot_id_, &from._impl_.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.battery_voltage_) -
    reinterpret_cast<char*>(&_impl_.robot_id_)) + sizeof(_impl_.battery_voltage_));
  // @@protoc_insertion_point(copy_constructor:Robot_Infos)
}

inline void Robot_Infos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.robot_id_){0u}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.theta_){0}
    , decltype(_impl_.distance_ball_robot_){0}
    , decltype(_impl_.radian_ball_robot_){0}
    , decltype(_impl_.diff_x_){0}
    , decltype(_impl_.diff_y_){0}
    , decltype(_impl_.diff_theta_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.slope_){0}
    , decltype(_impl_.intercept_){0}
    , decltype(_impl_.angular_velocity_){0}
    , decltype(_impl_.visible_){false}
    , decltype(_impl_.ball_catch_){false}
    , decltype(_impl_.online_){false}
    , decltype(_impl_.battery_voltage_){0}
  };
}

Robot_Infos::~Robot_Infos() {
  // @@protoc_insertion_point(destructor:Robot_Infos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Robot_Infos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Robot_Infos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Robot_Infos::Clear() {
// @@protoc_insertion_point(message_clear_start:Robot_Infos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.robot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.diff_y_) -
        reinterpret_cast<char*>(&_impl_.robot_id_)) + sizeof(_impl_.diff_y_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.diff_theta_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.online_) -
        reinterpret_cast<char*>(&_impl_.diff_theta_)) + sizeof(_impl_.online_));
  }
  _impl_.battery_voltage_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Infos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_robot_id(&has_bits);
          _impl_.robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float theta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_theta(&has_bits);
          _impl_.theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float distance_ball_robot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_distance_ball_robot(&has_bits);
          _impl_.distance_ball_robot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float radian_ball_robot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_radian_ball_robot(&has_bits);
          _impl_.radian_ball_robot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float diff_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_diff_x(&has_bits);
          _impl_.diff_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float diff_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_diff_y(&has_bits);
          _impl_.diff_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float diff_theta = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_diff_theta(&has_bits);
          _impl_.diff_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float slope = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_slope(&has_bits);
          _impl_.slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float intercept = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_intercept(&has_bits);
          _impl_.intercept_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float angular_velocity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_angular_velocity(&has_bits);
          _impl_.angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool visible = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_visible(&has_bits);
          _impl_.visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ball_catch = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_ball_catch(&has_bits);
          _impl_.ball_catch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool online = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_online(&has_bits);
          _impl_.online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float battery_voltage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_battery_voltage(&has_bits);
          _impl_.battery_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Robot_Infos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Robot_Infos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 robot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_robot_id(), target);
  }

  // required float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // required float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // required float theta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_theta(), target);
  }

  // optional float distance_ball_robot = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_distance_ball_robot(), target);
  }

  // optional float radian_ball_robot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_radian_ball_robot(), target);
  }

  // required float diff_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_diff_x(), target);
  }

  // required float diff_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_diff_y(), target);
  }

  // required float diff_theta = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_diff_theta(), target);
  }

  // required float speed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_speed(), target);
  }

  // required float slope = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_slope(), target);
  }

  // required float intercept = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_intercept(), target);
  }

  // required float angular_velocity = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_angular_velocity(), target);
  }

  // required bool visible = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_visible(), target);
  }

  // optional bool ball_catch = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_ball_catch(), target);
  }

  // optional bool online = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_online(), target);
  }

  // optional float battery_voltage = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_battery_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Robot_Infos)
  return target;
}

size_t Robot_Infos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Robot_Infos)
  size_t total_size = 0;

  if (_internal_has_robot_id()) {
    // required uint32 robot_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_robot_id());
  }

  if (_internal_has_x()) {
    // required float x = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_theta()) {
    // required float theta = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_x()) {
    // required float diff_x = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_y()) {
    // required float diff_y = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_theta()) {
    // required float diff_theta = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_speed()) {
    // required float speed = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_slope()) {
    // required float slope = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_intercept()) {
    // required float intercept = 12;
    total_size += 1 + 4;
  }

  if (_internal_has_angular_velocity()) {
    // required float angular_velocity = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_visible()) {
    // required bool visible = 14;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Robot_Infos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Robot_Infos)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00003fcf) ^ 0x00003fcf) == 0) {  // All required fields are present.
    // required uint32 robot_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_robot_id());

    // required float x = 2;
    total_size += 1 + 4;

    // required float y = 3;
    total_size += 1 + 4;

    // required float theta = 4;
    total_size += 1 + 4;

    // required float diff_x = 7;
    total_size += 1 + 4;

    // required float diff_y = 8;
    total_size += 1 + 4;

    // required float diff_theta = 9;
    total_size += 1 + 4;

    // required float speed = 10;
    total_size += 1 + 4;

    // required float slope = 11;
    total_size += 1 + 4;

    // required float intercept = 12;
    total_size += 1 + 4;

    // required float angular_velocity = 13;
    total_size += 1 + 4;

    // required bool visible = 14;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000030u) {
    // optional float distance_ball_robot = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float radian_ball_robot = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000c000u) {
    // optional bool ball_catch = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool online = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional float battery_voltage = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Robot_Infos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Robot_Infos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Robot_Infos::GetClassData() const { return &_class_data_; }


void Robot_Infos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Robot_Infos*>(&to_msg);
  auto& from = static_cast<const Robot_Infos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Robot_Infos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.robot_id_ = from._impl_.robot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.theta_ = from._impl_.theta_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_ball_robot_ = from._impl_.distance_ball_robot_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.radian_ball_robot_ = from._impl_.radian_ball_robot_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.diff_x_ = from._impl_.diff_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.diff_y_ = from._impl_.diff_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.diff_theta_ = from._impl_.diff_theta_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.slope_ = from._impl_.slope_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.intercept_ = from._impl_.intercept_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.angular_velocity_ = from._impl_.angular_velocity_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.visible_ = from._impl_.visible_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.ball_catch_ = from._impl_.ball_catch_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.online_ = from._impl_.online_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_battery_voltage(from._internal_battery_voltage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Robot_Infos::CopyFrom(const Robot_Infos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Robot_Infos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Infos::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Robot_Infos::InternalSwap(Robot_Infos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Infos, _impl_.battery_voltage_)
      + sizeof(Robot_Infos::_impl_.battery_voltage_)
      - PROTOBUF_FIELD_OFFSET(Robot_Infos, _impl_.robot_id_)>(
          reinterpret_cast<char*>(&_impl_.robot_id_),
          reinterpret_cast<char*>(&other->_impl_.robot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Infos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[0]);
}

// ===================================================================

class Ball_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Ball_Info>()._impl_._has_bits_);
  static void set_has_filtered_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_filtered_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_diff_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_diff_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_slope_radian(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_intercept(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_slope(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

Ball_Info::Ball_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Ball_Info)
}
Ball_Info::Ball_Info(const Ball_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Ball_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filtered_x_){}
    , decltype(_impl_.filtered_y_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.diff_x_){}
    , decltype(_impl_.diff_y_){}
    , decltype(_impl_.slope_radian_){}
    , decltype(_impl_.intercept_){}
    , decltype(_impl_.speed_){}
    , decltype(_impl_.slope_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.filtered_x_, &from._impl_.filtered_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slope_) -
    reinterpret_cast<char*>(&_impl_.filtered_x_)) + sizeof(_impl_.slope_));
  // @@protoc_insertion_point(copy_constructor:Ball_Info)
}

inline void Ball_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.filtered_x_){0}
    , decltype(_impl_.filtered_y_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.diff_x_){0}
    , decltype(_impl_.diff_y_){0}
    , decltype(_impl_.slope_radian_){0}
    , decltype(_impl_.intercept_){0}
    , decltype(_impl_.speed_){0}
    , decltype(_impl_.slope_){0}
  };
}

Ball_Info::~Ball_Info() {
  // @@protoc_insertion_point(destructor:Ball_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ball_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ball_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ball_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Ball_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.filtered_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slope_radian_) -
        reinterpret_cast<char*>(&_impl_.filtered_x_)) + sizeof(_impl_.slope_radian_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.intercept_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.slope_) -
        reinterpret_cast<char*>(&_impl_.intercept_)) + sizeof(_impl_.slope_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ball_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float filtered_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_filtered_x(&has_bits);
          _impl_.filtered_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float filtered_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_filtered_y(&has_bits);
          _impl_.filtered_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float z = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_z(&has_bits);
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float diff_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_diff_x(&has_bits);
          _impl_.diff_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float diff_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_diff_y(&has_bits);
          _impl_.diff_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float slope_radian = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_slope_radian(&has_bits);
          _impl_.slope_radian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float intercept = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_intercept(&has_bits);
          _impl_.intercept_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_speed(&has_bits);
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float slope = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_slope(&has_bits);
          _impl_.slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ball_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ball_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float filtered_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_filtered_x(), target);
  }

  // required float filtered_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_filtered_y(), target);
  }

  // required float x = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_x(), target);
  }

  // required float y = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_y(), target);
  }

  // required float z = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_z(), target);
  }

  // required float diff_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_diff_x(), target);
  }

  // required float diff_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_diff_y(), target);
  }

  // required float slope_radian = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_slope_radian(), target);
  }

  // required float intercept = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_intercept(), target);
  }

  // required float speed = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_speed(), target);
  }

  // required float slope = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_slope(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ball_Info)
  return target;
}

size_t Ball_Info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Ball_Info)
  size_t total_size = 0;

  if (_internal_has_filtered_x()) {
    // required float filtered_x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_filtered_y()) {
    // required float filtered_y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_z()) {
    // required float z = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_x()) {
    // required float diff_x = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_diff_y()) {
    // required float diff_y = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_slope_radian()) {
    // required float slope_radian = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_intercept()) {
    // required float intercept = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_speed()) {
    // required float speed = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_slope()) {
    // required float slope = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Ball_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ball_Info)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required float filtered_x = 1;
    total_size += 1 + 4;

    // required float filtered_y = 2;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float z = 5;
    total_size += 1 + 4;

    // required float diff_x = 6;
    total_size += 1 + 4;

    // required float diff_y = 7;
    total_size += 1 + 4;

    // required float slope_radian = 8;
    total_size += 1 + 4;

    // required float intercept = 9;
    total_size += 1 + 4;

    // required float speed = 10;
    total_size += 1 + 4;

    // required float slope = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ball_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Ball_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ball_Info::GetClassData() const { return &_class_data_; }


void Ball_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Ball_Info*>(&to_msg);
  auto& from = static_cast<const Ball_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Ball_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.filtered_x_ = from._impl_.filtered_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.filtered_y_ = from._impl_.filtered_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.diff_x_ = from._impl_.diff_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.diff_y_ = from._impl_.diff_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.slope_radian_ = from._impl_.slope_radian_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.intercept_ = from._impl_.intercept_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.slope_ = from._impl_.slope_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ball_Info::CopyFrom(const Ball_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ball_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ball_Info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Ball_Info::InternalSwap(Ball_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ball_Info, _impl_.slope_)
      + sizeof(Ball_Info::_impl_.slope_)
      - PROTOBUF_FIELD_OFFSET(Ball_Info, _impl_.filtered_x_)>(
          reinterpret_cast<char*>(&_impl_.filtered_x_),
          reinterpret_cast<char*>(&other->_impl_.filtered_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ball_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[1]);
}

// ===================================================================

class Geometry_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Geometry_Info>()._impl_._has_bits_);
  static void set_has_field_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_field_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_goal_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_goal_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_boundary_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_penalty_area_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_penalty_area_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_center_circle_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_line_thickness(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_goal_center_to_penalty_mark(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_goal_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ball_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_max_robot_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_goal_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_goal_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000601f) ^ 0x0000601f) != 0;
  }
};

Geometry_Info::Geometry_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Geometry_Info)
}
Geometry_Info::Geometry_Info(const Geometry_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Geometry_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_length_){}
    , decltype(_impl_.field_width_){}
    , decltype(_impl_.goal_width_){}
    , decltype(_impl_.goal_depth_){}
    , decltype(_impl_.boundary_width_){}
    , decltype(_impl_.penalty_area_depth_){}
    , decltype(_impl_.penalty_area_width_){}
    , decltype(_impl_.center_circle_radius_){}
    , decltype(_impl_.line_thickness_){}
    , decltype(_impl_.goal_center_to_penalty_mark_){}
    , decltype(_impl_.goal_height_){}
    , decltype(_impl_.ball_radius_){}
    , decltype(_impl_.max_robot_radius_){}
    , decltype(_impl_.goal_x_){}
    , decltype(_impl_.goal_y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.field_length_, &from._impl_.field_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.goal_y_) -
    reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.goal_y_));
  // @@protoc_insertion_point(copy_constructor:Geometry_Info)
}

inline void Geometry_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.field_length_){0}
    , decltype(_impl_.field_width_){0}
    , decltype(_impl_.goal_width_){0}
    , decltype(_impl_.goal_depth_){0}
    , decltype(_impl_.boundary_width_){0}
    , decltype(_impl_.penalty_area_depth_){0}
    , decltype(_impl_.penalty_area_width_){0}
    , decltype(_impl_.center_circle_radius_){0}
    , decltype(_impl_.line_thickness_){0}
    , decltype(_impl_.goal_center_to_penalty_mark_){0}
    , decltype(_impl_.goal_height_){0}
    , decltype(_impl_.ball_radius_){0}
    , decltype(_impl_.max_robot_radius_){0}
    , decltype(_impl_.goal_x_){0}
    , decltype(_impl_.goal_y_){0}
  };
}

Geometry_Info::~Geometry_Info() {
  // @@protoc_insertion_point(destructor:Geometry_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Geometry_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Geometry_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Geometry_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Geometry_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.field_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.center_circle_radius_) -
        reinterpret_cast<char*>(&_impl_.field_length_)) + sizeof(_impl_.center_circle_radius_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&_impl_.line_thickness_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.goal_y_) -
        reinterpret_cast<char*>(&_impl_.line_thickness_)) + sizeof(_impl_.goal_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geometry_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 field_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_field_length(&has_bits);
          _impl_.field_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 field_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_field_width(&has_bits);
          _impl_.field_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 goal_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_goal_width(&has_bits);
          _impl_.goal_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 goal_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_goal_depth(&has_bits);
          _impl_.goal_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 boundary_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_boundary_width(&has_bits);
          _impl_.boundary_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 penalty_area_depth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_penalty_area_depth(&has_bits);
          _impl_.penalty_area_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 penalty_area_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_penalty_area_width(&has_bits);
          _impl_.penalty_area_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 center_circle_radius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_center_circle_radius(&has_bits);
          _impl_.center_circle_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 line_thickness = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_line_thickness(&has_bits);
          _impl_.line_thickness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 goal_center_to_penalty_mark = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_goal_center_to_penalty_mark(&has_bits);
          _impl_.goal_center_to_penalty_mark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 goal_height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_goal_height(&has_bits);
          _impl_.goal_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float ball_radius = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_ball_radius(&has_bits);
          _impl_.ball_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float max_robot_radius = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_max_robot_radius(&has_bits);
          _impl_.max_robot_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float goal_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_goal_x(&has_bits);
          _impl_.goal_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float goal_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_goal_y(&has_bits);
          _impl_.goal_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Geometry_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Geometry_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 field_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_field_length(), target);
  }

  // required int32 field_width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_field_width(), target);
  }

  // required int32 goal_width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_goal_width(), target);
  }

  // required int32 goal_depth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_goal_depth(), target);
  }

  // required int32 boundary_width = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_boundary_width(), target);
  }

  // optional int32 penalty_area_depth = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_penalty_area_depth(), target);
  }

  // optional int32 penalty_area_width = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_penalty_area_width(), target);
  }

  // optional int32 center_circle_radius = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_center_circle_radius(), target);
  }

  // optional int32 line_thickness = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_line_thickness(), target);
  }

  // optional int32 goal_center_to_penalty_mark = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_goal_center_to_penalty_mark(), target);
  }

  // optional int32 goal_height = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_goal_height(), target);
  }

  // optional float ball_radius = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_ball_radius(), target);
  }

  // optional float max_robot_radius = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_max_robot_radius(), target);
  }

  // required float goal_x = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_goal_x(), target);
  }

  // required float goal_y = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_goal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Geometry_Info)
  return target;
}

size_t Geometry_Info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Geometry_Info)
  size_t total_size = 0;

  if (_internal_has_field_length()) {
    // required int32 field_length = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_length());
  }

  if (_internal_has_field_width()) {
    // required int32 field_width = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_width());
  }

  if (_internal_has_goal_width()) {
    // required int32 goal_width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_width());
  }

  if (_internal_has_goal_depth()) {
    // required int32 goal_depth = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_depth());
  }

  if (_internal_has_boundary_width()) {
    // required int32 boundary_width = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_boundary_width());
  }

  if (_internal_has_goal_x()) {
    // required float goal_x = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_goal_y()) {
    // required float goal_y = 15;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Geometry_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Geometry_Info)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000601f) ^ 0x0000601f) == 0) {  // All required fields are present.
    // required int32 field_length = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_length());

    // required int32 field_width = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_field_width());

    // required int32 goal_width = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_width());

    // required int32 goal_depth = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_depth());

    // required int32 boundary_width = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_boundary_width());

    // required float goal_x = 14;
    total_size += 1 + 4;

    // required float goal_y = 15;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional int32 penalty_area_depth = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_penalty_area_depth());
    }

    // optional int32 penalty_area_width = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_penalty_area_width());
    }

    // optional int32 center_circle_radius = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_center_circle_radius());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 line_thickness = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line_thickness());
    }

    // optional int32 goal_center_to_penalty_mark = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_center_to_penalty_mark());
    }

    // optional int32 goal_height = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_goal_height());
    }

    // optional float ball_radius = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float max_robot_radius = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Geometry_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Geometry_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Geometry_Info::GetClassData() const { return &_class_data_; }


void Geometry_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Geometry_Info*>(&to_msg);
  auto& from = static_cast<const Geometry_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Geometry_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.field_length_ = from._impl_.field_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.field_width_ = from._impl_.field_width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.goal_width_ = from._impl_.goal_width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.goal_depth_ = from._impl_.goal_depth_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.boundary_width_ = from._impl_.boundary_width_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.penalty_area_depth_ = from._impl_.penalty_area_depth_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.penalty_area_width_ = from._impl_.penalty_area_width_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.center_circle_radius_ = from._impl_.center_circle_radius_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.line_thickness_ = from._impl_.line_thickness_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.goal_center_to_penalty_mark_ = from._impl_.goal_center_to_penalty_mark_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.goal_height_ = from._impl_.goal_height_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.ball_radius_ = from._impl_.ball_radius_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.max_robot_radius_ = from._impl_.max_robot_radius_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.goal_x_ = from._impl_.goal_x_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.goal_y_ = from._impl_.goal_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Geometry_Info::CopyFrom(const Geometry_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Geometry_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry_Info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Geometry_Info::InternalSwap(Geometry_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geometry_Info, _impl_.goal_y_)
      + sizeof(Geometry_Info::_impl_.goal_y_)
      - PROTOBUF_FIELD_OFFSET(Geometry_Info, _impl_.field_length_)>(
          reinterpret_cast<char*>(&_impl_.field_length_),
          reinterpret_cast<char*>(&other->_impl_.field_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Geometry_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[2]);
}

// ===================================================================

class Referee_Info::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee_Info>()._impl_._has_bits_);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_yellow_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_red_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pre_command(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_next_command(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ball_placement_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ball_placement_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

Referee_Info::Referee_Info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Referee_Info)
}
Referee_Info::Referee_Info(const Referee_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Referee_Info* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.yellow_cards_){}
    , decltype(_impl_.red_cards_){}
    , decltype(_impl_.pre_command_){}
    , decltype(_impl_.next_command_){}
    , decltype(_impl_.ball_placement_x_){}
    , decltype(_impl_.ball_placement_y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.command_, &from._impl_.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ball_placement_y_) -
    reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.ball_placement_y_));
  // @@protoc_insertion_point(copy_constructor:Referee_Info)
}

inline void Referee_Info::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.command_){0}
    , decltype(_impl_.stage_){0}
    , decltype(_impl_.yellow_cards_){0u}
    , decltype(_impl_.red_cards_){0u}
    , decltype(_impl_.pre_command_){0}
    , decltype(_impl_.next_command_){0}
    , decltype(_impl_.ball_placement_x_){0}
    , decltype(_impl_.ball_placement_y_){0}
  };
}

Referee_Info::~Referee_Info() {
  // @@protoc_insertion_point(destructor:Referee_Info)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Referee_Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Referee_Info::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Referee_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee_Info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ball_placement_y_) -
        reinterpret_cast<char*>(&_impl_.command_)) + sizeof(_impl_.ball_placement_y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee_Info::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .Referee_Info.Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Info_Command_IsValid(val))) {
            _internal_set_command(static_cast<::Referee_Info_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .Referee_Info.Stage stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Info_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::Referee_Info_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 yellow_cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_yellow_cards(&has_bits);
          _impl_.yellow_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 red_cards = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_red_cards(&has_bits);
          _impl_.red_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Referee_Info.Command pre_command = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Info_Command_IsValid(val))) {
            _internal_set_pre_command(static_cast<::Referee_Info_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .Referee_Info.Command next_command = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Info_Command_IsValid(val))) {
            _internal_set_next_command(static_cast<::Referee_Info_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional float ball_placement_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_ball_placement_x(&has_bits);
          _impl_.ball_placement_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float ball_placement_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_ball_placement_y(&has_bits);
          _impl_.ball_placement_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Referee_Info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee_Info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .Referee_Info.Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_command(), target);
  }

  // required .Referee_Info.Stage stage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage(), target);
  }

  // required uint32 yellow_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_yellow_cards(), target);
  }

  // required uint32 red_cards = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_red_cards(), target);
  }

  // optional .Referee_Info.Command pre_command = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_pre_command(), target);
  }

  // optional .Referee_Info.Command next_command = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_next_command(), target);
  }

  // optional float ball_placement_x = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_ball_placement_x(), target);
  }

  // optional float ball_placement_y = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_ball_placement_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee_Info)
  return target;
}

size_t Referee_Info::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee_Info)
  size_t total_size = 0;

  if (_internal_has_command()) {
    // required .Referee_Info.Command command = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (_internal_has_stage()) {
    // required .Referee_Info.Stage stage = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (_internal_has_yellow_cards()) {
    // required uint32 yellow_cards = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yellow_cards());
  }

  if (_internal_has_red_cards()) {
    // required uint32 red_cards = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red_cards());
  }

  return total_size;
}
size_t Referee_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee_Info)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Referee_Info.Command command = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());

    // required .Referee_Info.Stage stage = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());

    // required uint32 yellow_cards = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yellow_cards());

    // required uint32 red_cards = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red_cards());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional .Referee_Info.Command pre_command = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_pre_command());
    }

    // optional .Referee_Info.Command next_command = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_next_command());
    }

    // optional float ball_placement_x = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float ball_placement_y = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Referee_Info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Referee_Info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Referee_Info::GetClassData() const { return &_class_data_; }


void Referee_Info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Referee_Info*>(&to_msg);
  auto& from = static_cast<const Referee_Info&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee_Info)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stage_ = from._impl_.stage_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.yellow_cards_ = from._impl_.yellow_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.red_cards_ = from._impl_.red_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.pre_command_ = from._impl_.pre_command_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.next_command_ = from._impl_.next_command_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ball_placement_x_ = from._impl_.ball_placement_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ball_placement_y_ = from._impl_.ball_placement_y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Referee_Info::CopyFrom(const Referee_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_Info::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Referee_Info::InternalSwap(Referee_Info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_Info, _impl_.ball_placement_y_)
      + sizeof(Referee_Info::_impl_.ball_placement_y_)
      - PROTOBUF_FIELD_OFFSET(Referee_Info, _impl_.command_)>(
          reinterpret_cast<char*>(&_impl_.command_),
          reinterpret_cast<char*>(&other->_impl_.command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee_Info::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[3]);
}

// ===================================================================

class RobotIP_Infos::_Internal {
 public:
  using HasBits = decltype(std::declval<RobotIP_Infos>()._impl_._has_bits_);
  static void set_has_robot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RobotIP_Infos::RobotIP_Infos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RobotIP_Infos)
}
RobotIP_Infos::RobotIP_Infos(const RobotIP_Infos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotIP_Infos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.robot_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ip()) {
    _this->_impl_.ip_.Set(from._internal_ip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.robot_id_ = from._impl_.robot_id_;
  // @@protoc_insertion_point(copy_constructor:RobotIP_Infos)
}

inline void RobotIP_Infos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ip_){}
    , decltype(_impl_.robot_id_){0u}
  };
  _impl_.ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RobotIP_Infos::~RobotIP_Infos() {
  // @@protoc_insertion_point(destructor:RobotIP_Infos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotIP_Infos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_.Destroy();
}

void RobotIP_Infos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotIP_Infos::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotIP_Infos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.ip_.ClearNonDefaultToEmpty();
  }
  _impl_.robot_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotIP_Infos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_robot_id(&has_bits);
          _impl_.robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "RobotIP_Infos.ip");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotIP_Infos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RobotIP_Infos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 robot_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_robot_id(), target);
  }

  // required string ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "RobotIP_Infos.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotIP_Infos)
  return target;
}

size_t RobotIP_Infos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotIP_Infos)
  size_t total_size = 0;

  if (_internal_has_ip()) {
    // required string ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (_internal_has_robot_id()) {
    // required uint32 robot_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_robot_id());
  }

  return total_size;
}
size_t RobotIP_Infos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotIP_Infos)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string ip = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());

    // required uint32 robot_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_robot_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotIP_Infos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotIP_Infos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotIP_Infos::GetClassData() const { return &_class_data_; }


void RobotIP_Infos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotIP_Infos*>(&to_msg);
  auto& from = static_cast<const RobotIP_Infos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RobotIP_Infos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.robot_id_ = from._impl_.robot_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotIP_Infos::CopyFrom(const RobotIP_Infos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotIP_Infos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotIP_Infos::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RobotIP_Infos::InternalSwap(RobotIP_Infos* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_, lhs_arena,
      &other->_impl_.ip_, rhs_arena
  );
  swap(_impl_.robot_id_, other->_impl_.robot_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotIP_Infos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[4]);
}

// ===================================================================

class Other_Infos::_Internal {
 public:
  using HasBits = decltype(std::declval<Other_Infos>()._impl_._has_bits_);
  static void set_has_num_of_cameras(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_of_our_robots(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_of_enemy_robots(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_secperframe(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_vision_recv(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_attack_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_ball_moving(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

Other_Infos::Other_Infos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Other_Infos)
}
Other_Infos::Other_Infos(const Other_Infos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Other_Infos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_of_cameras_){}
    , decltype(_impl_.num_of_our_robots_){}
    , decltype(_impl_.num_of_enemy_robots_){}
    , decltype(_impl_.secperframe_){}
    , decltype(_impl_.attack_direction_){}
    , decltype(_impl_.is_vision_recv_){}
    , decltype(_impl_.is_ball_moving_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_of_cameras_, &from._impl_.num_of_cameras_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_ball_moving_) -
    reinterpret_cast<char*>(&_impl_.num_of_cameras_)) + sizeof(_impl_.is_ball_moving_));
  // @@protoc_insertion_point(copy_constructor:Other_Infos)
}

inline void Other_Infos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_of_cameras_){0}
    , decltype(_impl_.num_of_our_robots_){0}
    , decltype(_impl_.num_of_enemy_robots_){0}
    , decltype(_impl_.secperframe_){0}
    , decltype(_impl_.attack_direction_){0}
    , decltype(_impl_.is_vision_recv_){false}
    , decltype(_impl_.is_ball_moving_){false}
  };
}

Other_Infos::~Other_Infos() {
  // @@protoc_insertion_point(destructor:Other_Infos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Other_Infos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Other_Infos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Other_Infos::Clear() {
// @@protoc_insertion_point(message_clear_start:Other_Infos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.num_of_cameras_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_ball_moving_) -
        reinterpret_cast<char*>(&_impl_.num_of_cameras_)) + sizeof(_impl_.is_ball_moving_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Other_Infos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 num_of_cameras = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_of_cameras(&has_bits);
          _impl_.num_of_cameras_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_of_our_robots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_of_our_robots(&has_bits);
          _impl_.num_of_our_robots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_of_enemy_robots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_num_of_enemy_robots(&has_bits);
          _impl_.num_of_enemy_robots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required float secperframe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_secperframe(&has_bits);
          _impl_.secperframe_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required bool is_vision_recv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_vision_recv(&has_bits);
          _impl_.is_vision_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 attack_direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_attack_direction(&has_bits);
          _impl_.attack_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_ball_moving = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_ball_moving(&has_bits);
          _impl_.is_ball_moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Other_Infos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Other_Infos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 num_of_cameras = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_of_cameras(), target);
  }

  // required int32 num_of_our_robots = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_of_our_robots(), target);
  }

  // required int32 num_of_enemy_robots = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_of_enemy_robots(), target);
  }

  // required float secperframe = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_secperframe(), target);
  }

  // required bool is_vision_recv = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_vision_recv(), target);
  }

  // required int32 attack_direction = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_attack_direction(), target);
  }

  // required bool is_ball_moving = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_ball_moving(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Other_Infos)
  return target;
}

size_t Other_Infos::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Other_Infos)
  size_t total_size = 0;

  if (_internal_has_num_of_cameras()) {
    // required int32 num_of_cameras = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_cameras());
  }

  if (_internal_has_num_of_our_robots()) {
    // required int32 num_of_our_robots = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_our_robots());
  }

  if (_internal_has_num_of_enemy_robots()) {
    // required int32 num_of_enemy_robots = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_enemy_robots());
  }

  if (_internal_has_secperframe()) {
    // required float secperframe = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_attack_direction()) {
    // required int32 attack_direction = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attack_direction());
  }

  if (_internal_has_is_vision_recv()) {
    // required bool is_vision_recv = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_is_ball_moving()) {
    // required bool is_ball_moving = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Other_Infos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Other_Infos)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 num_of_cameras = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_cameras());

    // required int32 num_of_our_robots = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_our_robots());

    // required int32 num_of_enemy_robots = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_of_enemy_robots());

    // required float secperframe = 4;
    total_size += 1 + 4;

    // required int32 attack_direction = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attack_direction());

    // required bool is_vision_recv = 5;
    total_size += 1 + 1;

    // required bool is_ball_moving = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Other_Infos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Other_Infos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Other_Infos::GetClassData() const { return &_class_data_; }


void Other_Infos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Other_Infos*>(&to_msg);
  auto& from = static_cast<const Other_Infos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Other_Infos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_of_cameras_ = from._impl_.num_of_cameras_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_of_our_robots_ = from._impl_.num_of_our_robots_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.num_of_enemy_robots_ = from._impl_.num_of_enemy_robots_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.secperframe_ = from._impl_.secperframe_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.attack_direction_ = from._impl_.attack_direction_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_vision_recv_ = from._impl_.is_vision_recv_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_ball_moving_ = from._impl_.is_ball_moving_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Other_Infos::CopyFrom(const Other_Infos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Other_Infos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Other_Infos::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Other_Infos::InternalSwap(Other_Infos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Other_Infos, _impl_.is_ball_moving_)
      + sizeof(Other_Infos::_impl_.is_ball_moving_)
      - PROTOBUF_FIELD_OFFSET(Other_Infos, _impl_.num_of_cameras_)>(
          reinterpret_cast<char*>(&_impl_.num_of_cameras_),
          reinterpret_cast<char*>(&other->_impl_.num_of_cameras_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Other_Infos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[5]);
}

// ===================================================================

class RacoonMW_Packet::_Internal {
 public:
  using HasBits = decltype(std::declval<RacoonMW_Packet>()._impl_._has_bits_);
  static const ::Geometry_Info& geometry(const RacoonMW_Packet* msg);
  static void set_has_geometry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Ball_Info& ball(const RacoonMW_Packet* msg);
  static void set_has_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Referee_Info& referee(const RacoonMW_Packet* msg);
  static void set_has_referee(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Other_Infos& info(const RacoonMW_Packet* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::Geometry_Info&
RacoonMW_Packet::_Internal::geometry(const RacoonMW_Packet* msg) {
  return *msg->_impl_.geometry_;
}
const ::Ball_Info&
RacoonMW_Packet::_Internal::ball(const RacoonMW_Packet* msg) {
  return *msg->_impl_.ball_;
}
const ::Referee_Info&
RacoonMW_Packet::_Internal::referee(const RacoonMW_Packet* msg) {
  return *msg->_impl_.referee_;
}
const ::Other_Infos&
RacoonMW_Packet::_Internal::info(const RacoonMW_Packet* msg) {
  return *msg->_impl_.info_;
}
RacoonMW_Packet::RacoonMW_Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RacoonMW_Packet)
}
RacoonMW_Packet::RacoonMW_Packet(const RacoonMW_Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RacoonMW_Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.our_robots_){from._impl_.our_robots_}
    , decltype(_impl_.enemy_robots_){from._impl_.enemy_robots_}
    , decltype(_impl_.robot_ips_){from._impl_.robot_ips_}
    , decltype(_impl_.geometry_){nullptr}
    , decltype(_impl_.ball_){nullptr}
    , decltype(_impl_.referee_){nullptr}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_geometry()) {
    _this->_impl_.geometry_ = new ::Geometry_Info(*from._impl_.geometry_);
  }
  if (from._internal_has_ball()) {
    _this->_impl_.ball_ = new ::Ball_Info(*from._impl_.ball_);
  }
  if (from._internal_has_referee()) {
    _this->_impl_.referee_ = new ::Referee_Info(*from._impl_.referee_);
  }
  if (from._internal_has_info()) {
    _this->_impl_.info_ = new ::Other_Infos(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:RacoonMW_Packet)
}

inline void RacoonMW_Packet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.our_robots_){arena}
    , decltype(_impl_.enemy_robots_){arena}
    , decltype(_impl_.robot_ips_){arena}
    , decltype(_impl_.geometry_){nullptr}
    , decltype(_impl_.ball_){nullptr}
    , decltype(_impl_.referee_){nullptr}
    , decltype(_impl_.info_){nullptr}
  };
}

RacoonMW_Packet::~RacoonMW_Packet() {
  // @@protoc_insertion_point(destructor:RacoonMW_Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RacoonMW_Packet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.our_robots_.~RepeatedPtrField();
  _impl_.enemy_robots_.~RepeatedPtrField();
  _impl_.robot_ips_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.geometry_;
  if (this != internal_default_instance()) delete _impl_.ball_;
  if (this != internal_default_instance()) delete _impl_.referee_;
  if (this != internal_default_instance()) delete _impl_.info_;
}

void RacoonMW_Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RacoonMW_Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:RacoonMW_Packet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.our_robots_.Clear();
  _impl_.enemy_robots_.Clear();
  _impl_.robot_ips_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.geometry_ != nullptr);
      _impl_.geometry_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.ball_ != nullptr);
      _impl_.ball_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.referee_ != nullptr);
      _impl_.referee_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.info_ != nullptr);
      _impl_.info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RacoonMW_Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Robot_Infos our_robots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_our_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Robot_Infos enemy_robots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_enemy_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .Geometry_Info geometry = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Ball_Info ball = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Referee_Info referee = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_referee(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .RobotIP_Infos robot_ips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_ips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .Other_Infos info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RacoonMW_Packet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RacoonMW_Packet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Robot_Infos our_robots = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_our_robots_size()); i < n; i++) {
    const auto& repfield = this->_internal_our_robots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Robot_Infos enemy_robots = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_enemy_robots_size()); i < n; i++) {
    const auto& repfield = this->_internal_enemy_robots(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .Geometry_Info geometry = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::geometry(this),
        _Internal::geometry(this).GetCachedSize(), target, stream);
  }

  // required .Ball_Info ball = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ball(this),
        _Internal::ball(this).GetCachedSize(), target, stream);
  }

  // required .Referee_Info referee = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::referee(this),
        _Internal::referee(this).GetCachedSize(), target, stream);
  }

  // repeated .RobotIP_Infos robot_ips = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robot_ips_size()); i < n; i++) {
    const auto& repfield = this->_internal_robot_ips(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .Other_Infos info = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RacoonMW_Packet)
  return target;
}

size_t RacoonMW_Packet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RacoonMW_Packet)
  size_t total_size = 0;

  if (_internal_has_geometry()) {
    // required .Geometry_Info geometry = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geometry_);
  }

  if (_internal_has_ball()) {
    // required .Ball_Info ball = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ball_);
  }

  if (_internal_has_referee()) {
    // required .Referee_Info referee = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referee_);
  }

  if (_internal_has_info()) {
    // required .Other_Infos info = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  return total_size;
}
size_t RacoonMW_Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RacoonMW_Packet)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Geometry_Info geometry = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.geometry_);

    // required .Ball_Info ball = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ball_);

    // required .Referee_Info referee = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.referee_);

    // required .Other_Infos info = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Robot_Infos our_robots = 1;
  total_size += 1UL * this->_internal_our_robots_size();
  for (const auto& msg : this->_impl_.our_robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Robot_Infos enemy_robots = 2;
  total_size += 1UL * this->_internal_enemy_robots_size();
  for (const auto& msg : this->_impl_.enemy_robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .RobotIP_Infos robot_ips = 6;
  total_size += 1UL * this->_internal_robot_ips_size();
  for (const auto& msg : this->_impl_.robot_ips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RacoonMW_Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RacoonMW_Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RacoonMW_Packet::GetClassData() const { return &_class_data_; }


void RacoonMW_Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RacoonMW_Packet*>(&to_msg);
  auto& from = static_cast<const RacoonMW_Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RacoonMW_Packet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.our_robots_.MergeFrom(from._impl_.our_robots_);
  _this->_impl_.enemy_robots_.MergeFrom(from._impl_.enemy_robots_);
  _this->_impl_.robot_ips_.MergeFrom(from._impl_.robot_ips_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_geometry()->::Geometry_Info::MergeFrom(
          from._internal_geometry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_ball()->::Ball_Info::MergeFrom(
          from._internal_ball());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_referee()->::Referee_Info::MergeFrom(
          from._internal_referee());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_info()->::Other_Infos::MergeFrom(
          from._internal_info());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RacoonMW_Packet::CopyFrom(const RacoonMW_Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RacoonMW_Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacoonMW_Packet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.our_robots_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.enemy_robots_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.robot_ips_))
    return false;
  if (_internal_has_geometry()) {
    if (!_impl_.geometry_->IsInitialized()) return false;
  }
  if (_internal_has_ball()) {
    if (!_impl_.ball_->IsInitialized()) return false;
  }
  if (_internal_has_referee()) {
    if (!_impl_.referee_->IsInitialized()) return false;
  }
  if (_internal_has_info()) {
    if (!_impl_.info_->IsInitialized()) return false;
  }
  return true;
}

void RacoonMW_Packet::InternalSwap(RacoonMW_Packet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.our_robots_.InternalSwap(&other->_impl_.our_robots_);
  _impl_.enemy_robots_.InternalSwap(&other->_impl_.enemy_robots_);
  _impl_.robot_ips_.InternalSwap(&other->_impl_.robot_ips_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RacoonMW_Packet, _impl_.info_)
      + sizeof(RacoonMW_Packet::_impl_.info_)
      - PROTOBUF_FIELD_OFFSET(RacoonMW_Packet, _impl_.geometry_)>(
          reinterpret_cast<char*>(&_impl_.geometry_),
          reinterpret_cast<char*>(&other->_impl_.geometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RacoonMW_Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_to_5fracoonai_2eproto_getter, &descriptor_table_to_5fracoonai_2eproto_once,
      file_level_metadata_to_5fracoonai_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Robot_Infos*
Arena::CreateMaybeMessage< ::Robot_Infos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Robot_Infos >(arena);
}
template<> PROTOBUF_NOINLINE ::Ball_Info*
Arena::CreateMaybeMessage< ::Ball_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ball_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::Geometry_Info*
Arena::CreateMaybeMessage< ::Geometry_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Geometry_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::Referee_Info*
Arena::CreateMaybeMessage< ::Referee_Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::RobotIP_Infos*
Arena::CreateMaybeMessage< ::RobotIP_Infos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RobotIP_Infos >(arena);
}
template<> PROTOBUF_NOINLINE ::Other_Infos*
Arena::CreateMaybeMessage< ::Other_Infos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Other_Infos >(arena);
}
template<> PROTOBUF_NOINLINE ::RacoonMW_Packet*
Arena::CreateMaybeMessage< ::RacoonMW_Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RacoonMW_Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
