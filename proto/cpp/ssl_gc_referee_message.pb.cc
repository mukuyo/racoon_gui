// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_gc_referee_message.proto

#include "ssl_gc_referee_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Referee_TeamInfo::Referee_TeamInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.yellow_card_times_)*/{}
  , /*decltype(_impl_._yellow_card_times_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_.red_cards_)*/0u
  , /*decltype(_impl_.yellow_cards_)*/0u
  , /*decltype(_impl_.timeouts_)*/0u
  , /*decltype(_impl_.timeout_time_)*/0u
  , /*decltype(_impl_.goalkeeper_)*/0u
  , /*decltype(_impl_.foul_counter_)*/0u
  , /*decltype(_impl_.ball_placement_failures_)*/0u
  , /*decltype(_impl_.max_allowed_bots_)*/0u
  , /*decltype(_impl_.can_place_ball_)*/false
  , /*decltype(_impl_.bot_substitution_intent_)*/false
  , /*decltype(_impl_.ball_placement_failures_reached_)*/false} {}
struct Referee_TeamInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Referee_TeamInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Referee_TeamInfoDefaultTypeInternal() {}
  union {
    Referee_TeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Referee_TeamInfoDefaultTypeInternal _Referee_TeamInfo_default_instance_;
PROTOBUF_CONSTEXPR Referee_Point::Referee_Point(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0} {}
struct Referee_PointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Referee_PointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Referee_PointDefaultTypeInternal() {}
  union {
    Referee_Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Referee_PointDefaultTypeInternal _Referee_Point_default_instance_;
PROTOBUF_CONSTEXPR Referee::Referee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_events_)*/{}
  , /*decltype(_impl_.game_event_proposals_)*/{}
  , /*decltype(_impl_.source_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.yellow_)*/nullptr
  , /*decltype(_impl_.blue_)*/nullptr
  , /*decltype(_impl_.designated_position_)*/nullptr
  , /*decltype(_impl_.packet_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.stage_)*/0
  , /*decltype(_impl_.stage_time_left_)*/0
  , /*decltype(_impl_.command_)*/0
  , /*decltype(_impl_.command_counter_)*/0u
  , /*decltype(_impl_.command_timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.blue_team_on_positive_half_)*/false
  , /*decltype(_impl_.next_command_)*/0
  , /*decltype(_impl_.current_action_time_remaining_)*/0
  , /*decltype(_impl_.match_type_)*/0} {}
struct RefereeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefereeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefereeDefaultTypeInternal() {}
  union {
    Referee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefereeDefaultTypeInternal _Referee_default_instance_;
PROTOBUF_CONSTEXPR GameEventProposalGroup::GameEventProposalGroup(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.game_event_)*/{}
  , /*decltype(_impl_.accepted_)*/false} {}
struct GameEventProposalGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEventProposalGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEventProposalGroupDefaultTypeInternal() {}
  union {
    GameEventProposalGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEventProposalGroupDefaultTypeInternal _GameEventProposalGroup_default_instance_;
static ::_pb::Metadata file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.red_cards_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.yellow_card_times_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.yellow_cards_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.timeouts_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.timeout_time_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.goalkeeper_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.foul_counter_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.ball_placement_failures_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.can_place_ball_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.max_allowed_bots_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.bot_substitution_intent_),
  PROTOBUF_FIELD_OFFSET(::Referee_TeamInfo, _impl_.ball_placement_failures_reached_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  10,
  9,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::Referee_Point, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee_Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Referee_Point, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Referee_Point, _impl_.y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Referee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.source_identifier_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.packet_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.stage_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.stage_time_left_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.command_counter_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.command_timestamp_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.yellow_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.blue_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.designated_position_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.blue_team_on_positive_half_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.next_command_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.game_events_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.game_event_proposals_),
  PROTOBUF_FIELD_OFFSET(::Referee, _impl_.current_action_time_remaining_),
  0,
  13,
  4,
  5,
  6,
  7,
  8,
  9,
  1,
  2,
  3,
  10,
  11,
  ~0u,
  ~0u,
  12,
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_.game_event_),
  PROTOBUF_FIELD_OFFSET(::GameEventProposalGroup, _impl_.accepted_),
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 20, -1, sizeof(::Referee_TeamInfo)},
  { 34, 42, -1, sizeof(::Referee_Point)},
  { 44, 66, -1, sizeof(::Referee)},
  { 82, 90, -1, sizeof(::GameEventProposalGroup)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Referee_TeamInfo_default_instance_._instance,
  &::_Referee_Point_default_instance_._instance,
  &::_Referee_default_instance_._instance,
  &::_GameEventProposalGroup_default_instance_._instance,
};

const char descriptor_table_protodef_ssl_5fgc_5freferee_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034ssl_gc_referee_message.proto\032\027ssl_gc_g"
  "ame_event.proto\"\257\r\n\007Referee\022\031\n\021source_id"
  "entifier\030\022 \001(\t\022-\n\nmatch_type\030\023 \001(\0162\n.Mat"
  "chType:\rUNKNOWN_MATCH\022\030\n\020packet_timestam"
  "p\030\001 \002(\004\022\035\n\005stage\030\002 \002(\0162\016.Referee.Stage\022\027"
  "\n\017stage_time_left\030\003 \001(\021\022!\n\007command\030\004 \002(\016"
  "2\020.Referee.Command\022\027\n\017command_counter\030\005 "
  "\002(\r\022\031\n\021command_timestamp\030\006 \002(\004\022!\n\006yellow"
  "\030\007 \002(\0132\021.Referee.TeamInfo\022\037\n\004blue\030\010 \002(\0132"
  "\021.Referee.TeamInfo\022+\n\023designated_positio"
  "n\030\t \001(\0132\016.Referee.Point\022\"\n\032blue_team_on_"
  "positive_half\030\n \001(\010\022&\n\014next_command\030\014 \001("
  "\0162\020.Referee.Command\022\037\n\013game_events\030\020 \003(\013"
  "2\n.GameEvent\0225\n\024game_event_proposals\030\021 \003"
  "(\0132\027.GameEventProposalGroup\022%\n\035current_a"
  "ction_time_remaining\030\017 \001(\005\032\336\002\n\010TeamInfo\022"
  "\014\n\004name\030\001 \002(\t\022\r\n\005score\030\002 \002(\r\022\021\n\tred_card"
  "s\030\003 \002(\r\022\035\n\021yellow_card_times\030\004 \003(\rB\002\020\001\022\024"
  "\n\014yellow_cards\030\005 \002(\r\022\020\n\010timeouts\030\006 \002(\r\022\024"
  "\n\014timeout_time\030\007 \002(\r\022\022\n\ngoalkeeper\030\010 \002(\r"
  "\022\024\n\014foul_counter\030\t \001(\r\022\037\n\027ball_placement"
  "_failures\030\n \001(\r\022\026\n\016can_place_ball\030\014 \001(\010\022"
  "\030\n\020max_allowed_bots\030\r \001(\r\022\037\n\027bot_substit"
  "ution_intent\030\016 \001(\010\022\'\n\037ball_placement_fai"
  "lures_reached\030\017 \001(\010\032\035\n\005Point\022\t\n\001x\030\001 \002(\002\022"
  "\t\n\001y\030\002 \002(\002\"\321\002\n\005Stage\022\031\n\025NORMAL_FIRST_HAL"
  "F_PRE\020\000\022\025\n\021NORMAL_FIRST_HALF\020\001\022\024\n\020NORMAL"
  "_HALF_TIME\020\002\022\032\n\026NORMAL_SECOND_HALF_PRE\020\003"
  "\022\026\n\022NORMAL_SECOND_HALF\020\004\022\024\n\020EXTRA_TIME_B"
  "REAK\020\005\022\030\n\024EXTRA_FIRST_HALF_PRE\020\006\022\024\n\020EXTR"
  "A_FIRST_HALF\020\007\022\023\n\017EXTRA_HALF_TIME\020\010\022\031\n\025E"
  "XTRA_SECOND_HALF_PRE\020\t\022\025\n\021EXTRA_SECOND_H"
  "ALF\020\n\022\032\n\026PENALTY_SHOOTOUT_BREAK\020\013\022\024\n\020PEN"
  "ALTY_SHOOTOUT\020\014\022\r\n\tPOST_GAME\020\r\"\216\003\n\007Comma"
  "nd\022\010\n\004HALT\020\000\022\010\n\004STOP\020\001\022\020\n\014NORMAL_START\020\002"
  "\022\017\n\013FORCE_START\020\003\022\032\n\026PREPARE_KICKOFF_YEL"
  "LOW\020\004\022\030\n\024PREPARE_KICKOFF_BLUE\020\005\022\032\n\026PREPA"
  "RE_PENALTY_YELLOW\020\006\022\030\n\024PREPARE_PENALTY_B"
  "LUE\020\007\022\026\n\022DIRECT_FREE_YELLOW\020\010\022\024\n\020DIRECT_"
  "FREE_BLUE\020\t\022\030\n\024INDIRECT_FREE_YELLOW\020\n\022\026\n"
  "\022INDIRECT_FREE_BLUE\020\013\022\022\n\016TIMEOUT_YELLOW\020"
  "\014\022\020\n\014TIMEOUT_BLUE\020\r\022\023\n\013GOAL_YELLOW\020\016\032\002\010\001"
  "\022\021\n\tGOAL_BLUE\020\017\032\002\010\001\022\031\n\025BALL_PLACEMENT_YE"
  "LLOW\020\020\022\027\n\023BALL_PLACEMENT_BLUE\020\021J\004\010\013\020\014J\004\010"
  "\r\020\016J\004\010\016\020\017\"J\n\026GameEventProposalGroup\022\036\n\ng"
  "ame_event\030\001 \003(\0132\n.GameEvent\022\020\n\010accepted\030"
  "\002 \001(\010*T\n\tMatchType\022\021\n\rUNKNOWN_MATCH\020\000\022\017\n"
  "\013GROUP_PHASE\020\001\022\025\n\021ELIMINATION_PHASE\020\002\022\014\n"
  "\010FRIENDLY\020\003B-Z+github.com/Rione-SSL/RACO"
  "ON-Pi/proto/pb_gen"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_ssl_5fgc_5fgame_5fevent_2eproto,
};
static ::_pbi::once_flag descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto = {
    false, false, 1978, descriptor_table_protodef_ssl_5fgc_5freferee_5fmessage_2eproto,
    "ssl_gc_referee_message.proto",
    &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once, descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_ssl_5fgc_5freferee_5fmessage_2eproto::offsets,
    file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto, file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto,
    file_level_service_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_getter() {
  return &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ssl_5fgc_5freferee_5fmessage_2eproto(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Stage_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[0];
}
bool Referee_Stage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Referee_Stage Referee::NORMAL_FIRST_HALF_PRE;
constexpr Referee_Stage Referee::NORMAL_FIRST_HALF;
constexpr Referee_Stage Referee::NORMAL_HALF_TIME;
constexpr Referee_Stage Referee::NORMAL_SECOND_HALF_PRE;
constexpr Referee_Stage Referee::NORMAL_SECOND_HALF;
constexpr Referee_Stage Referee::EXTRA_TIME_BREAK;
constexpr Referee_Stage Referee::EXTRA_FIRST_HALF_PRE;
constexpr Referee_Stage Referee::EXTRA_FIRST_HALF;
constexpr Referee_Stage Referee::EXTRA_HALF_TIME;
constexpr Referee_Stage Referee::EXTRA_SECOND_HALF_PRE;
constexpr Referee_Stage Referee::EXTRA_SECOND_HALF;
constexpr Referee_Stage Referee::PENALTY_SHOOTOUT_BREAK;
constexpr Referee_Stage Referee::PENALTY_SHOOTOUT;
constexpr Referee_Stage Referee::POST_GAME;
constexpr Referee_Stage Referee::Stage_MIN;
constexpr Referee_Stage Referee::Stage_MAX;
constexpr int Referee::Stage_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Referee_Command_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[1];
}
bool Referee_Command_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Referee_Command Referee::HALT;
constexpr Referee_Command Referee::STOP;
constexpr Referee_Command Referee::NORMAL_START;
constexpr Referee_Command Referee::FORCE_START;
constexpr Referee_Command Referee::PREPARE_KICKOFF_YELLOW;
constexpr Referee_Command Referee::PREPARE_KICKOFF_BLUE;
constexpr Referee_Command Referee::PREPARE_PENALTY_YELLOW;
constexpr Referee_Command Referee::PREPARE_PENALTY_BLUE;
constexpr Referee_Command Referee::DIRECT_FREE_YELLOW;
constexpr Referee_Command Referee::DIRECT_FREE_BLUE;
constexpr Referee_Command Referee::INDIRECT_FREE_YELLOW;
constexpr Referee_Command Referee::INDIRECT_FREE_BLUE;
constexpr Referee_Command Referee::TIMEOUT_YELLOW;
constexpr Referee_Command Referee::TIMEOUT_BLUE;
constexpr Referee_Command Referee::GOAL_YELLOW;
constexpr Referee_Command Referee::GOAL_BLUE;
constexpr Referee_Command Referee::BALL_PLACEMENT_YELLOW;
constexpr Referee_Command Referee::BALL_PLACEMENT_BLUE;
constexpr Referee_Command Referee::Command_MIN;
constexpr Referee_Command Referee::Command_MAX;
constexpr int Referee::Command_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto);
  return file_level_enum_descriptors_ssl_5fgc_5freferee_5fmessage_2eproto[2];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Referee_TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee_TeamInfo>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_red_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yellow_cards(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timeouts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_timeout_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_goalkeeper(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_foul_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ball_placement_failures(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_can_place_ball(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_max_allowed_bots(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_bot_substitution_intent(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ball_placement_failures_reached(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

Referee_TeamInfo::Referee_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Referee.TeamInfo)
}
Referee_TeamInfo::Referee_TeamInfo(const Referee_TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Referee_TeamInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yellow_card_times_){from._impl_.yellow_card_times_}
    , /*decltype(_impl_._yellow_card_times_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.score_){}
    , decltype(_impl_.red_cards_){}
    , decltype(_impl_.yellow_cards_){}
    , decltype(_impl_.timeouts_){}
    , decltype(_impl_.timeout_time_){}
    , decltype(_impl_.goalkeeper_){}
    , decltype(_impl_.foul_counter_){}
    , decltype(_impl_.ball_placement_failures_){}
    , decltype(_impl_.max_allowed_bots_){}
    , decltype(_impl_.can_place_ball_){}
    , decltype(_impl_.bot_substitution_intent_){}
    , decltype(_impl_.ball_placement_failures_reached_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.score_, &from._impl_.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ball_placement_failures_reached_) -
    reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.ball_placement_failures_reached_));
  // @@protoc_insertion_point(copy_constructor:Referee.TeamInfo)
}

inline void Referee_TeamInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.yellow_card_times_){arena}
    , /*decltype(_impl_._yellow_card_times_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.score_){0u}
    , decltype(_impl_.red_cards_){0u}
    , decltype(_impl_.yellow_cards_){0u}
    , decltype(_impl_.timeouts_){0u}
    , decltype(_impl_.timeout_time_){0u}
    , decltype(_impl_.goalkeeper_){0u}
    , decltype(_impl_.foul_counter_){0u}
    , decltype(_impl_.ball_placement_failures_){0u}
    , decltype(_impl_.max_allowed_bots_){0u}
    , decltype(_impl_.can_place_ball_){false}
    , decltype(_impl_.bot_substitution_intent_){false}
    , decltype(_impl_.ball_placement_failures_reached_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Referee_TeamInfo::~Referee_TeamInfo() {
  // @@protoc_insertion_point(destructor:Referee.TeamInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Referee_TeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.yellow_card_times_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Referee_TeamInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Referee_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.TeamInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.yellow_card_times_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.foul_counter_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.foul_counter_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.ball_placement_failures_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ball_placement_failures_reached_) -
        reinterpret_cast<char*>(&_impl_.ball_placement_failures_)) + sizeof(_impl_.ball_placement_failures_reached_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee_TeamInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Referee.TeamInfo.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_score(&has_bits);
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 red_cards = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_red_cards(&has_bits);
          _impl_.red_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 yellow_card_times = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_yellow_card_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_yellow_card_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 yellow_cards = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_yellow_cards(&has_bits);
          _impl_.yellow_cards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 timeouts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_timeouts(&has_bits);
          _impl_.timeouts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 timeout_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_timeout_time(&has_bits);
          _impl_.timeout_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 goalkeeper = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_goalkeeper(&has_bits);
          _impl_.goalkeeper_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 foul_counter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_foul_counter(&has_bits);
          _impl_.foul_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ball_placement_failures = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ball_placement_failures(&has_bits);
          _impl_.ball_placement_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool can_place_ball = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_can_place_ball(&has_bits);
          _impl_.can_place_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 max_allowed_bots = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_max_allowed_bots(&has_bits);
          _impl_.max_allowed_bots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bot_substitution_intent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_bot_substitution_intent(&has_bits);
          _impl_.bot_substitution_intent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool ball_placement_failures_reached = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_ball_placement_failures_reached(&has_bits);
          _impl_.ball_placement_failures_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Referee_TeamInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.TeamInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Referee.TeamInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required uint32 score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_score(), target);
  }

  // required uint32 red_cards = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_red_cards(), target);
  }

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    int byte_size = _impl_._yellow_card_times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_yellow_card_times(), byte_size, target);
    }
  }

  // required uint32 yellow_cards = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_yellow_cards(), target);
  }

  // required uint32 timeouts = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_timeouts(), target);
  }

  // required uint32 timeout_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_timeout_time(), target);
  }

  // required uint32 goalkeeper = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_goalkeeper(), target);
  }

  // optional uint32 foul_counter = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_foul_counter(), target);
  }

  // optional uint32 ball_placement_failures = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_ball_placement_failures(), target);
  }

  // optional bool can_place_ball = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_can_place_ball(), target);
  }

  // optional uint32 max_allowed_bots = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_max_allowed_bots(), target);
  }

  // optional bool bot_substitution_intent = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_bot_substitution_intent(), target);
  }

  // optional bool ball_placement_failures_reached = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_ball_placement_failures_reached(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.TeamInfo)
  return target;
}

size_t Referee_TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.TeamInfo)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_score()) {
    // required uint32 score = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  if (_internal_has_red_cards()) {
    // required uint32 red_cards = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red_cards());
  }

  if (_internal_has_yellow_cards()) {
    // required uint32 yellow_cards = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yellow_cards());
  }

  if (_internal_has_timeouts()) {
    // required uint32 timeouts = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeouts());
  }

  if (_internal_has_timeout_time()) {
    // required uint32 timeout_time = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout_time());
  }

  if (_internal_has_goalkeeper()) {
    // required uint32 goalkeeper = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_goalkeeper());
  }

  return total_size;
}
size_t Referee_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.TeamInfo)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required uint32 score = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());

    // required uint32 red_cards = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red_cards());

    // required uint32 yellow_cards = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_yellow_cards());

    // required uint32 timeouts = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeouts());

    // required uint32 timeout_time = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_timeout_time());

    // required uint32 goalkeeper = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_goalkeeper());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 yellow_card_times = 4 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.yellow_card_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._yellow_card_times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 foul_counter = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_foul_counter());
  }

  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 ball_placement_failures = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ball_placement_failures());
    }

    // optional uint32 max_allowed_bots = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_max_allowed_bots());
    }

    // optional bool can_place_ball = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool bot_substitution_intent = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool ball_placement_failures_reached = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Referee_TeamInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Referee_TeamInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Referee_TeamInfo::GetClassData() const { return &_class_data_; }


void Referee_TeamInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Referee_TeamInfo*>(&to_msg);
  auto& from = static_cast<const Referee_TeamInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee.TeamInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.yellow_card_times_.MergeFrom(from._impl_.yellow_card_times_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.red_cards_ = from._impl_.red_cards_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.yellow_cards_ = from._impl_.yellow_cards_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timeouts_ = from._impl_.timeouts_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.timeout_time_ = from._impl_.timeout_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.goalkeeper_ = from._impl_.goalkeeper_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.foul_counter_ = from._impl_.foul_counter_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ball_placement_failures_ = from._impl_.ball_placement_failures_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.max_allowed_bots_ = from._impl_.max_allowed_bots_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.can_place_ball_ = from._impl_.can_place_ball_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bot_substitution_intent_ = from._impl_.bot_substitution_intent_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.ball_placement_failures_reached_ = from._impl_.ball_placement_failures_reached_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Referee_TeamInfo::CopyFrom(const Referee_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_TeamInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Referee_TeamInfo::InternalSwap(Referee_TeamInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.yellow_card_times_.InternalSwap(&other->_impl_.yellow_card_times_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.ball_placement_failures_reached_)
      + sizeof(Referee_TeamInfo::_impl_.ball_placement_failures_reached_)
      - PROTOBUF_FIELD_OFFSET(Referee_TeamInfo, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee_TeamInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_getter, &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once,
      file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto[0]);
}

// ===================================================================

class Referee_Point::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee_Point>()._impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

Referee_Point::Referee_Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Referee.Point)
}
Referee_Point::Referee_Point(const Referee_Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Referee_Point* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:Referee.Point)
}

inline void Referee_Point::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
  };
}

Referee_Point::~Referee_Point() {
  // @@protoc_insertion_point(destructor:Referee.Point)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Referee_Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Referee_Point::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Referee_Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee_Point::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Referee_Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee.Point)
  return target;
}

size_t Referee_Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee.Point)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Referee_Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee.Point)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Referee_Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Referee_Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Referee_Point::GetClassData() const { return &_class_data_; }


void Referee_Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Referee_Point*>(&to_msg);
  auto& from = static_cast<const Referee_Point&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee.Point)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Referee_Point::CopyFrom(const Referee_Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee_Point::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Referee_Point::InternalSwap(Referee_Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.y_)
      + sizeof(Referee_Point::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Referee_Point, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee_Point::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_getter, &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once,
      file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto[1]);
}

// ===================================================================

class Referee::_Internal {
 public:
  using HasBits = decltype(std::declval<Referee>()._impl_._has_bits_);
  static void set_has_source_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_packet_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stage_time_left(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_command_counter(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_command_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::Referee_TeamInfo& yellow(const Referee* msg);
  static void set_has_yellow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Referee_TeamInfo& blue(const Referee* msg);
  static void set_has_blue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Referee_Point& designated_position(const Referee* msg);
  static void set_has_designated_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_blue_team_on_positive_half(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_next_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_current_action_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003b6) ^ 0x000003b6) != 0;
  }
};

const ::Referee_TeamInfo&
Referee::_Internal::yellow(const Referee* msg) {
  return *msg->_impl_.yellow_;
}
const ::Referee_TeamInfo&
Referee::_Internal::blue(const Referee* msg) {
  return *msg->_impl_.blue_;
}
const ::Referee_Point&
Referee::_Internal::designated_position(const Referee* msg) {
  return *msg->_impl_.designated_position_;
}
void Referee::clear_game_events() {
  _impl_.game_events_.Clear();
}
Referee::Referee(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Referee)
}
Referee::Referee(const Referee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Referee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_events_){from._impl_.game_events_}
    , decltype(_impl_.game_event_proposals_){from._impl_.game_event_proposals_}
    , decltype(_impl_.source_identifier_){}
    , decltype(_impl_.yellow_){nullptr}
    , decltype(_impl_.blue_){nullptr}
    , decltype(_impl_.designated_position_){nullptr}
    , decltype(_impl_.packet_timestamp_){}
    , decltype(_impl_.stage_){}
    , decltype(_impl_.stage_time_left_){}
    , decltype(_impl_.command_){}
    , decltype(_impl_.command_counter_){}
    , decltype(_impl_.command_timestamp_){}
    , decltype(_impl_.blue_team_on_positive_half_){}
    , decltype(_impl_.next_command_){}
    , decltype(_impl_.current_action_time_remaining_){}
    , decltype(_impl_.match_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source_identifier()) {
    _this->_impl_.source_identifier_.Set(from._internal_source_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_yellow()) {
    _this->_impl_.yellow_ = new ::Referee_TeamInfo(*from._impl_.yellow_);
  }
  if (from._internal_has_blue()) {
    _this->_impl_.blue_ = new ::Referee_TeamInfo(*from._impl_.blue_);
  }
  if (from._internal_has_designated_position()) {
    _this->_impl_.designated_position_ = new ::Referee_Point(*from._impl_.designated_position_);
  }
  ::memcpy(&_impl_.packet_timestamp_, &from._impl_.packet_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_type_) -
    reinterpret_cast<char*>(&_impl_.packet_timestamp_)) + sizeof(_impl_.match_type_));
  // @@protoc_insertion_point(copy_constructor:Referee)
}

inline void Referee::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_events_){arena}
    , decltype(_impl_.game_event_proposals_){arena}
    , decltype(_impl_.source_identifier_){}
    , decltype(_impl_.yellow_){nullptr}
    , decltype(_impl_.blue_){nullptr}
    , decltype(_impl_.designated_position_){nullptr}
    , decltype(_impl_.packet_timestamp_){uint64_t{0u}}
    , decltype(_impl_.stage_){0}
    , decltype(_impl_.stage_time_left_){0}
    , decltype(_impl_.command_){0}
    , decltype(_impl_.command_counter_){0u}
    , decltype(_impl_.command_timestamp_){uint64_t{0u}}
    , decltype(_impl_.blue_team_on_positive_half_){false}
    , decltype(_impl_.next_command_){0}
    , decltype(_impl_.current_action_time_remaining_){0}
    , decltype(_impl_.match_type_){0}
  };
  _impl_.source_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Referee::~Referee() {
  // @@protoc_insertion_point(destructor:Referee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Referee::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_events_.~RepeatedPtrField();
  _impl_.game_event_proposals_.~RepeatedPtrField();
  _impl_.source_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.yellow_;
  if (this != internal_default_instance()) delete _impl_.blue_;
  if (this != internal_default_instance()) delete _impl_.designated_position_;
}

void Referee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Referee::Clear() {
// @@protoc_insertion_point(message_clear_start:Referee)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_events_.Clear();
  _impl_.game_event_proposals_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.source_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.yellow_ != nullptr);
      _impl_.yellow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.blue_ != nullptr);
      _impl_.blue_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.designated_position_ != nullptr);
      _impl_.designated_position_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.packet_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.command_) -
        reinterpret_cast<char*>(&_impl_.packet_timestamp_)) + sizeof(_impl_.command_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.command_counter_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.match_type_) -
        reinterpret_cast<char*>(&_impl_.command_counter_)) + sizeof(_impl_.match_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Referee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 packet_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_packet_timestamp(&has_bits);
          _impl_.packet_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Referee.Stage stage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Stage_IsValid(val))) {
            _internal_set_stage(static_cast<::Referee_Stage>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional sint32 stage_time_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_stage_time_left(&has_bits);
          _impl_.stage_time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Referee.Command command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Command_IsValid(val))) {
            _internal_set_command(static_cast<::Referee_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 command_counter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_command_counter(&has_bits);
          _impl_.command_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint64 command_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_command_timestamp(&has_bits);
          _impl_.command_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Referee.TeamInfo yellow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_yellow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .Referee.TeamInfo blue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Referee.Point designated_position = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_designated_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool blue_team_on_positive_half = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_blue_team_on_positive_half(&has_bits);
          _impl_.blue_team_on_positive_half_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Referee.Command next_command = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Referee_Command_IsValid(val))) {
            _internal_set_next_command(static_cast<::Referee_Command>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 current_action_time_remaining = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_current_action_time_remaining(&has_bits);
          _impl_.current_action_time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .GameEvent game_events = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_game_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .GameEventProposalGroup game_event_proposals = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_game_event_proposals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string source_identifier = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_source_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "Referee.source_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::MatchType_IsValid(val))) {
            _internal_set_match_type(static_cast<::MatchType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Referee::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Referee)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 packet_timestamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_packet_timestamp(), target);
  }

  // required .Referee.Stage stage = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stage(), target);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(3, this->_internal_stage_time_left(), target);
  }

  // required .Referee.Command command = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_command(), target);
  }

  // required uint32 command_counter = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_command_counter(), target);
  }

  // required uint64 command_timestamp = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_command_timestamp(), target);
  }

  // required .Referee.TeamInfo yellow = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::yellow(this),
        _Internal::yellow(this).GetCachedSize(), target, stream);
  }

  // required .Referee.TeamInfo blue = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::blue(this),
        _Internal::blue(this).GetCachedSize(), target, stream);
  }

  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::designated_position(this),
        _Internal::designated_position(this).GetCachedSize(), target, stream);
  }

  // optional bool blue_team_on_positive_half = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_blue_team_on_positive_half(), target);
  }

  // optional .Referee.Command next_command = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_next_command(), target);
  }

  // optional int32 current_action_time_remaining = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_current_action_time_remaining(), target);
  }

  // repeated .GameEvent game_events = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .GameEventProposalGroup game_event_proposals = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_event_proposals_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_event_proposals(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string source_identifier = 18;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_identifier().data(), static_cast<int>(this->_internal_source_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Referee.source_identifier");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_source_identifier(), target);
  }

  // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      19, this->_internal_match_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Referee)
  return target;
}

size_t Referee::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Referee)
  size_t total_size = 0;

  if (_internal_has_yellow()) {
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yellow_);
  }

  if (_internal_has_blue()) {
    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blue_);
  }

  if (_internal_has_packet_timestamp()) {
    // required uint64 packet_timestamp = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packet_timestamp());
  }

  if (_internal_has_stage()) {
    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());
  }

  if (_internal_has_command()) {
    // required .Referee.Command command = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());
  }

  if (_internal_has_command_counter()) {
    // required uint32 command_counter = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command_counter());
  }

  if (_internal_has_command_timestamp()) {
    // required uint64 command_timestamp = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_command_timestamp());
  }

  return total_size;
}
size_t Referee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Referee)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000003b6) ^ 0x000003b6) == 0) {  // All required fields are present.
    // required .Referee.TeamInfo yellow = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.yellow_);

    // required .Referee.TeamInfo blue = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.blue_);

    // required uint64 packet_timestamp = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_packet_timestamp());

    // required .Referee.Stage stage = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_stage());

    // required .Referee.Command command = 4;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_command());

    // required uint32 command_counter = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_command_counter());

    // required uint64 command_timestamp = 6;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_command_timestamp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameEvent game_events = 16;
  total_size += 2UL * this->_internal_game_events_size();
  for (const auto& msg : this->_impl_.game_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GameEventProposalGroup game_event_proposals = 17;
  total_size += 2UL * this->_internal_game_event_proposals_size();
  for (const auto& msg : this->_impl_.game_event_proposals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string source_identifier = 18;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_identifier());
  }

  // optional .Referee.Point designated_position = 9;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.designated_position_);
  }

  // optional sint32 stage_time_left = 3;
  if (cached_has_bits & 0x00000040u) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_stage_time_left());
  }

  if (cached_has_bits & 0x00003c00u) {
    // optional bool blue_team_on_positive_half = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional .Referee.Command next_command = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_next_command());
    }

    // optional int32 current_action_time_remaining = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_action_time_remaining());
    }

    // optional .MatchType match_type = 19 [default = UNKNOWN_MATCH];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Referee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Referee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Referee::GetClassData() const { return &_class_data_; }


void Referee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Referee*>(&to_msg);
  auto& from = static_cast<const Referee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Referee)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_events_.MergeFrom(from._impl_.game_events_);
  _this->_impl_.game_event_proposals_.MergeFrom(from._impl_.game_event_proposals_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_source_identifier(from._internal_source_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_yellow()->::Referee_TeamInfo::MergeFrom(
          from._internal_yellow());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_blue()->::Referee_TeamInfo::MergeFrom(
          from._internal_blue());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_designated_position()->::Referee_Point::MergeFrom(
          from._internal_designated_position());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.packet_timestamp_ = from._impl_.packet_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.stage_ = from._impl_.stage_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.stage_time_left_ = from._impl_.stage_time_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.command_ = from._impl_.command_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.command_counter_ = from._impl_.command_counter_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.command_timestamp_ = from._impl_.command_timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.blue_team_on_positive_half_ = from._impl_.blue_team_on_positive_half_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.next_command_ = from._impl_.next_command_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.current_action_time_remaining_ = from._impl_.current_action_time_remaining_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.match_type_ = from._impl_.match_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Referee::CopyFrom(const Referee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Referee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Referee::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.game_events_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.game_event_proposals_))
    return false;
  if (_internal_has_yellow()) {
    if (!_impl_.yellow_->IsInitialized()) return false;
  }
  if (_internal_has_blue()) {
    if (!_impl_.blue_->IsInitialized()) return false;
  }
  if (_internal_has_designated_position()) {
    if (!_impl_.designated_position_->IsInitialized()) return false;
  }
  return true;
}

void Referee::InternalSwap(Referee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_events_.InternalSwap(&other->_impl_.game_events_);
  _impl_.game_event_proposals_.InternalSwap(&other->_impl_.game_event_proposals_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_identifier_, lhs_arena,
      &other->_impl_.source_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Referee, _impl_.match_type_)
      + sizeof(Referee::_impl_.match_type_)
      - PROTOBUF_FIELD_OFFSET(Referee, _impl_.yellow_)>(
          reinterpret_cast<char*>(&_impl_.yellow_),
          reinterpret_cast<char*>(&other->_impl_.yellow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Referee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_getter, &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once,
      file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto[2]);
}

// ===================================================================

class GameEventProposalGroup::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEventProposalGroup>()._impl_._has_bits_);
  static void set_has_accepted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void GameEventProposalGroup::clear_game_event() {
  _impl_.game_event_.Clear();
}
GameEventProposalGroup::GameEventProposalGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GameEventProposalGroup)
}
GameEventProposalGroup::GameEventProposalGroup(const GameEventProposalGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEventProposalGroup* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_event_){from._impl_.game_event_}
    , decltype(_impl_.accepted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.accepted_ = from._impl_.accepted_;
  // @@protoc_insertion_point(copy_constructor:GameEventProposalGroup)
}

inline void GameEventProposalGroup::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.game_event_){arena}
    , decltype(_impl_.accepted_){false}
  };
}

GameEventProposalGroup::~GameEventProposalGroup() {
  // @@protoc_insertion_point(destructor:GameEventProposalGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEventProposalGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_event_.~RepeatedPtrField();
}

void GameEventProposalGroup::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEventProposalGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:GameEventProposalGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_event_.Clear();
  _impl_.accepted_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEventProposalGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .GameEvent game_event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_event(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool accepted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_accepted(&has_bits);
          _impl_.accepted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEventProposalGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GameEventProposalGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GameEvent game_event = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_event_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_event(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool accepted = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_accepted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameEventProposalGroup)
  return target;
}

size_t GameEventProposalGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameEventProposalGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GameEvent game_event = 1;
  total_size += 1UL * this->_internal_game_event_size();
  for (const auto& msg : this->_impl_.game_event_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool accepted = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEventProposalGroup::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEventProposalGroup::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEventProposalGroup::GetClassData() const { return &_class_data_; }


void GameEventProposalGroup::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEventProposalGroup*>(&to_msg);
  auto& from = static_cast<const GameEventProposalGroup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GameEventProposalGroup)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_event_.MergeFrom(from._impl_.game_event_);
  if (from._internal_has_accepted()) {
    _this->_internal_set_accepted(from._internal_accepted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEventProposalGroup::CopyFrom(const GameEventProposalGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameEventProposalGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEventProposalGroup::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.game_event_))
    return false;
  return true;
}

void GameEventProposalGroup::InternalSwap(GameEventProposalGroup* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.game_event_.InternalSwap(&other->_impl_.game_event_);
  swap(_impl_.accepted_, other->_impl_.accepted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEventProposalGroup::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_getter, &descriptor_table_ssl_5fgc_5freferee_5fmessage_2eproto_once,
      file_level_metadata_ssl_5fgc_5freferee_5fmessage_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Referee_TeamInfo*
Arena::CreateMaybeMessage< ::Referee_TeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee_TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Referee_Point*
Arena::CreateMaybeMessage< ::Referee_Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee_Point >(arena);
}
template<> PROTOBUF_NOINLINE ::Referee*
Arena::CreateMaybeMessage< ::Referee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Referee >(arena);
}
template<> PROTOBUF_NOINLINE ::GameEventProposalGroup*
Arena::CreateMaybeMessage< ::GameEventProposalGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GameEventProposalGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
